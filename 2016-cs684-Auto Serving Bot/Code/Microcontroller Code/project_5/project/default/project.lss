
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800200  000073c6  0000745a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000073c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  0080033c  0080033c  00007596  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00007596  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000848  00000000  00000000  000075b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b78  00000000  00000000  00007dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024a  00000000  00000000  00009976  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003113  00000000  00000000  00009bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f0  00000000  00000000  0000ccd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000747  00000000  00000000  0000d0c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__vector_5>
      18:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ec       	ldi	r30, 0xC6	; 198
      fc:	f3 e7       	ldi	r31, 0x73	; 115
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 33       	cpi	r26, 0x3C	; 60
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	ac e3       	ldi	r26, 0x3C	; 60
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 3a       	cpi	r26, 0xA3	; 163
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 78 25 	call	0x4af0	; 0x4af0 <main>
     122:	0c 94 e1 39 	jmp	0x73c2	; 0x73c2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	36 e6       	ldi	r19, 0x66	; 102
     172:	46 e6       	ldi	r20, 0x66	; 102
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	36 e6       	ldi	r19, 0x66	; 102
     30a:	46 e6       	ldi	r20, 0x66	; 102
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	80 e7       	ldi	r24, 0x70	; 112
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 e6       	ldi	r20, 0x66	; 102
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	36 e6       	ldi	r19, 0x66	; 102
     616:	46 e6       	ldi	r20, 0x66	; 102
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	36 e6       	ldi	r19, 0x66	; 102
     71c:	46 e6       	ldi	r20, 0x66	; 102
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	36 e6       	ldi	r19, 0x66	; 102
     832:	46 e6       	ldi	r20, 0x66	; 102
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	80 e7       	ldi	r24, 0x70	; 112
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	36 e6       	ldi	r19, 0x66	; 102
     924:	46 e6       	ldi	r20, 0x66	; 102
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	80 e7       	ldi	r24, 0x70	; 112
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	36 e6       	ldi	r19, 0x66	; 102
     b58:	46 e6       	ldi	r20, 0x66	; 102
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	36 e6       	ldi	r19, 0x66	; 102
     cd4:	46 e6       	ldi	r20, 0x66	; 102
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	80 e7       	ldi	r24, 0x70	; 112
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	36 e6       	ldi	r19, 0x66	; 102
     e1c:	46 e6       	ldi	r20, 0x66	; 102
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	46 e6       	ldi	r20, 0x66	; 102
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	36 e6       	ldi	r19, 0x66	; 102
    10d0:	46 e6       	ldi	r20, 0x66	; 102
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 96 39 	call	0x732c	; 0x732c <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 8d 03 	sts	0x038D, r25
    12ec:	80 93 8c 03 	sts	0x038C, r24
		lcd_wr_char(million);
    12f0:	80 91 8c 03 	lds	r24, 0x038C
    12f4:	90 91 8d 03 	lds	r25, 0x038D
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 96 39 	call	0x732c	; 0x732c <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 8f 03 	sts	0x038F, r25
    1324:	80 93 8e 03 	sts	0x038E, r24
		thousand = temp%10 + 48;
    1328:	80 91 8e 03 	lds	r24, 0x038E
    132c:	90 91 8f 03 	lds	r25, 0x038F
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 96 39 	call	0x732c	; 0x732c <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 a0 03 	sts	0x03A0, r25
    1340:	80 93 9f 03 	sts	0x039F, r24
		lcd_wr_char(thousand);
    1344:	80 91 9f 03 	lds	r24, 0x039F
    1348:	90 91 a0 03 	lds	r25, 0x03A0
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 96 39 	call	0x732c	; 0x732c <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 8f 03 	sts	0x038F, r25
    1378:	80 93 8e 03 	sts	0x038E, r24
		hundred = temp%10 + 48;
    137c:	80 91 8e 03 	lds	r24, 0x038E
    1380:	90 91 8f 03 	lds	r25, 0x038F
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 96 39 	call	0x732c	; 0x732c <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 9a 03 	sts	0x039A, r25
    1394:	80 93 99 03 	sts	0x0399, r24
		lcd_wr_char(hundred);
    1398:	80 91 99 03 	lds	r24, 0x0399
    139c:	90 91 9a 03 	lds	r25, 0x039A
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 96 39 	call	0x732c	; 0x732c <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 8f 03 	sts	0x038F, r25
    13cc:	80 93 8e 03 	sts	0x038E, r24
		tens = temp%10 + 48;
    13d0:	80 91 8e 03 	lds	r24, 0x038E
    13d4:	90 91 8f 03 	lds	r25, 0x038F
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 96 39 	call	0x732c	; 0x732c <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 96 03 	sts	0x0396, r25
    13e8:	80 93 95 03 	sts	0x0395, r24
		lcd_wr_char(tens);
    13ec:	80 91 95 03 	lds	r24, 0x0395
    13f0:	90 91 96 03 	lds	r25, 0x0396
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 96 39 	call	0x732c	; 0x732c <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 9e 03 	sts	0x039E, r25
    1420:	80 93 9d 03 	sts	0x039D, r24
		lcd_wr_char(unit);
    1424:	80 91 9d 03 	lds	r24, 0x039D
    1428:	90 91 9e 03 	lds	r25, 0x039E
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <uart_start>:
#define BOT_DELAY_BACKWARDX 1
#define BOT_DELAY_BACKWARDY 4



void uart_start(void) {
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //transmit side of hardware
    145a:	a1 ec       	ldi	r26, 0xC1	; 193
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e1 ec       	ldi	r30, 0xC1	; 193
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	88 61       	ori	r24, 0x18	; 24
    1466:	8c 93       	st	X, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //receive side of hardware
    1468:	a2 ec       	ldi	r26, 0xC2	; 194
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e2 ec       	ldi	r30, 0xC2	; 194
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	86 60       	ori	r24, 0x06	; 6
    1474:	8c 93       	st	X, r24

	UBRR0L = BAUD_PRESCALE; //set the baud to 9600, have to split it into the two registers
    1476:	e4 ec       	ldi	r30, 0xC4	; 196
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	8f e5       	ldi	r24, 0x5F	; 95
    147c:	80 83       	st	Z, r24
	UBRR0H = (BAUD_PRESCALE >> 8); //high end of baud register
    147e:	e5 ec       	ldi	r30, 0xC5	; 197
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	10 82       	st	Z, r1

	UCSR0B |= (1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data
    1484:	a1 ec       	ldi	r26, 0xC1	; 193
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e1 ec       	ldi	r30, 0xC1	; 193
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	80 68       	ori	r24, 0x80	; 128
    1490:	8c 93       	st	X, r24

	/*#if DEBUG
	uart_sendstr("0x04 - UART is up...");
  #endif*/
}
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <uart_sendint>:

void uart_sendint(uint8_t data) {
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	89 83       	std	Y+1, r24	; 0x01
	/*
	Use this to send a 8bit long piece of data
	 */
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    14a4:	e0 ec       	ldi	r30, 0xC0	; 192
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	80 72       	andi	r24, 0x20	; 32
    14b0:	90 70       	andi	r25, 0x00	; 0
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	b9 f3       	breq	.-18     	; 0x14a4 <uart_sendint+0xc>
	UDR0 = data; //send the data
    14b6:	e6 ec       	ldi	r30, 0xC6	; 198
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	80 83       	st	Z, r24
	//while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
	//UDR0 = '\n';//send a new line just to be sure
}
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <uart_sendint16>:

void uart_sendint16(uint16_t data) {
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	0f 92       	push	r0
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	9a 83       	std	Y+2, r25	; 0x02
    14d4:	89 83       	std	Y+1, r24	; 0x01
	/*
	Use this to send a 16bit long piece of data
	 */
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    14d6:	e0 ec       	ldi	r30, 0xC0	; 192
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	80 72       	andi	r24, 0x20	; 32
    14e2:	90 70       	andi	r25, 0x00	; 0
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	b9 f3       	breq	.-18     	; 0x14d6 <uart_sendint16+0x10>
	UDR0 = data;//send the lower bits
    14e8:	e6 ec       	ldi	r30, 0xC6	; 198
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	80 83       	st	Z, r24
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    14f0:	e0 ec       	ldi	r30, 0xC0	; 192
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	80 72       	andi	r24, 0x20	; 32
    14fc:	90 70       	andi	r25, 0x00	; 0
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	b9 f3       	breq	.-18     	; 0x14f0 <uart_sendint16+0x2a>
	UDR0 = (data >> 8); //send the higher bits
    1502:	e6 ec       	ldi	r30, 0xC6	; 198
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	89 2f       	mov	r24, r25
    150c:	99 27       	eor	r25, r25
    150e:	80 83       	st	Z, r24
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    1510:	e0 ec       	ldi	r30, 0xC0	; 192
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	80 72       	andi	r24, 0x20	; 32
    151c:	90 70       	andi	r25, 0x00	; 0
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	b9 f3       	breq	.-18     	; 0x1510 <uart_sendint16+0x4a>
	UDR0 = '\n';//send a new line just to be sure
    1522:	e6 ec       	ldi	r30, 0xC6	; 198
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	8a e0       	ldi	r24, 0x0A	; 10
    1528:	80 83       	st	Z, r24
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <uart_sendstr>:

void uart_sendstr(char *data) {
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	0f 92       	push	r0
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	14 c0       	rjmp	.+40     	; 0x156e <uart_sendstr+0x3a>
	/*
	Use this to send a string, it will split it up into individual parts
	send those parts, and then send the new line code
	 */
	while (*data) {
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    1546:	e0 ec       	ldi	r30, 0xC0	; 192
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	80 72       	andi	r24, 0x20	; 32
    1552:	90 70       	andi	r25, 0x00	; 0
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	b9 f3       	breq	.-18     	; 0x1546 <uart_sendstr+0x12>
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
    1558:	a6 ec       	ldi	r26, 0xC6	; 198
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e9 81       	ldd	r30, Y+1	; 0x01
    155e:	fa 81       	ldd	r31, Y+2	; 0x02
    1560:	80 81       	ld	r24, Z
    1562:	8c 93       	st	X, r24
		data += 1;//go to new bit in string
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
void uart_sendstr(char *data) {
	/*
	Use this to send a string, it will split it up into individual parts
	send those parts, and then send the new line code
	 */
	while (*data) {
    156e:	e9 81       	ldd	r30, Y+1	; 0x01
    1570:	fa 81       	ldd	r31, Y+2	; 0x02
    1572:	80 81       	ld	r24, Z
    1574:	88 23       	and	r24, r24
    1576:	39 f7       	brne	.-50     	; 0x1546 <uart_sendstr+0x12>
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
		data += 1;//go to new bit in string
	}
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    1578:	e0 ec       	ldi	r30, 0xC0	; 192
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	80 72       	andi	r24, 0x20	; 32
    1584:	90 70       	andi	r25, 0x00	; 0
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	b9 f3       	breq	.-18     	; 0x1578 <uart_sendstr+0x44>
	UDR0 = '\n';//send a new line just to be sure
    158a:	e6 ec       	ldi	r30, 0xC6	; 198
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8a e0       	ldi	r24, 0x0A	; 10
    1590:	80 83       	st	Z, r24
}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <buzzer_on>:

void buzzer_on (void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	0f 92       	push	r0
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
    15a6:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
    15a8:	e6 e2       	ldi	r30, 0x26	; 38
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore | 0x08;
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	88 60       	ori	r24, 0x08	; 8
    15b4:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
    15b6:	e8 e2       	ldi	r30, 0x28	; 40
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	80 83       	st	Z, r24
}
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <buzzer_off>:

void buzzer_off (void)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	0f 92       	push	r0
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
    15d0:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
    15d2:	e6 e2       	ldi	r30, 0x26	; 38
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xF7;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	87 7f       	andi	r24, 0xF7	; 247
    15de:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
    15e0:	e8 e2       	ldi	r30, 0x28	; 40
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	80 83       	st	Z, r24
}
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <__vector_25>:


SIGNAL(SIG_USART0_RECV)     // ISR for receive complete interrupt
{
    15f0:	1f 92       	push	r1
    15f2:	0f 92       	push	r0
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	0f 92       	push	r0
    15f8:	00 90 5b 00 	lds	r0, 0x005B
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	data = UDR0;
    1620:	e6 ec       	ldi	r30, 0xC6	; 198
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 93 97 03 	sts	0x0397, r24
	check=1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	90 93 49 03 	sts	0x0349, r25
    1632:	80 93 48 03 	sts	0x0348, r24
	datac=data;         //making copy of data from UDR0 in 'data' variable
    1636:	80 91 97 03 	lds	r24, 0x0397
    163a:	80 93 98 03 	sts	0x0398, r24
	//lcd_print(1,14,data,3);
	//UDR0 = data;        //echo data back to PC
	// uart_sendint(datac);
	if((data == 'F' || data== 'f') )
    163e:	80 91 97 03 	lds	r24, 0x0397
    1642:	86 34       	cpi	r24, 0x46	; 70
    1644:	21 f0       	breq	.+8      	; 0x164e <__vector_25+0x5e>
    1646:	80 91 97 03 	lds	r24, 0x0397
    164a:	86 36       	cpi	r24, 0x66	; 102
    164c:	31 f4       	brne	.+12     	; 0x165a <__vector_25+0x6a>
	{
		testmsg=1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	90 93 6d 03 	sts	0x036D, r25
    1656:	80 93 6c 03 	sts	0x036C, r24
	}

	if( (data == botid || data== botid2 ) && testmsg==1 && start == 0)
    165a:	90 91 97 03 	lds	r25, 0x0397
    165e:	80 91 0c 02 	lds	r24, 0x020C
    1662:	98 17       	cp	r25, r24
    1664:	31 f0       	breq	.+12     	; 0x1672 <__vector_25+0x82>
    1666:	90 91 97 03 	lds	r25, 0x0397
    166a:	80 91 0d 02 	lds	r24, 0x020D
    166e:	98 17       	cp	r25, r24
    1670:	d9 f4       	brne	.+54     	; 0x16a8 <__vector_25+0xb8>
    1672:	80 91 6c 03 	lds	r24, 0x036C
    1676:	90 91 6d 03 	lds	r25, 0x036D
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	91 05       	cpc	r25, r1
    167e:	a1 f4       	brne	.+40     	; 0x16a8 <__vector_25+0xb8>
    1680:	80 91 4a 03 	lds	r24, 0x034A
    1684:	90 91 4b 03 	lds	r25, 0x034B
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	71 f4       	brne	.+28     	; 0x16a8 <__vector_25+0xb8>
	{

		if( freebot==0)
    168c:	80 91 7e 03 	lds	r24, 0x037E
    1690:	90 91 7f 03 	lds	r25, 0x037F
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	21 f4       	brne	.+8      	; 0x16a0 <__vector_25+0xb0>
		{
			uart_sendstr(testreply);
    1698:	8e e0       	ldi	r24, 0x0E	; 14
    169a:	92 e0       	ldi	r25, 0x02	; 2
    169c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <uart_sendstr>

		}
		testmsg=0;
    16a0:	10 92 6d 03 	sts	0x036D, r1
    16a4:	10 92 6c 03 	sts	0x036C, r1
	}

	if(data == 'S' || data== 's')
    16a8:	80 91 97 03 	lds	r24, 0x0397
    16ac:	83 35       	cpi	r24, 0x53	; 83
    16ae:	21 f0       	breq	.+8      	; 0x16b8 <__vector_25+0xc8>
    16b0:	80 91 97 03 	lds	r24, 0x0397
    16b4:	83 37       	cpi	r24, 0x73	; 115
    16b6:	31 f4       	brne	.+12     	; 0x16c4 <__vector_25+0xd4>
	{
		start=1;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	90 93 4b 03 	sts	0x034B, r25
    16c0:	80 93 4a 03 	sts	0x034A, r24
	}
	if(start)
    16c4:	80 91 4a 03 	lds	r24, 0x034A
    16c8:	90 91 4b 03 	lds	r25, 0x034B
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <__vector_25+0xe2>
    16d0:	0b c2       	rjmp	.+1046   	; 0x1ae8 <__vector_25+0x4f8>
	{
		if((data== botid2 || data== botid) && stop_s==1 && freebot==0)
    16d2:	90 91 97 03 	lds	r25, 0x0397
    16d6:	80 91 0d 02 	lds	r24, 0x020D
    16da:	98 17       	cp	r25, r24
    16dc:	31 f0       	breq	.+12     	; 0x16ea <__vector_25+0xfa>
    16de:	90 91 97 03 	lds	r25, 0x0397
    16e2:	80 91 0c 02 	lds	r24, 0x020C
    16e6:	98 17       	cp	r25, r24
    16e8:	d9 f4       	brne	.+54     	; 0x1720 <__vector_25+0x130>
    16ea:	80 91 00 02 	lds	r24, 0x0200
    16ee:	90 91 01 02 	lds	r25, 0x0201
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	a1 f4       	brne	.+40     	; 0x1720 <__vector_25+0x130>
    16f8:	80 91 7e 03 	lds	r24, 0x037E
    16fc:	90 91 7f 03 	lds	r25, 0x037F
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	71 f4       	brne	.+28     	; 0x1720 <__vector_25+0x130>
		{
			stop_s=0;
    1704:	10 92 01 02 	sts	0x0201, r1
    1708:	10 92 00 02 	sts	0x0200, r1
			id=1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	90 93 4d 03 	sts	0x034D, r25
    1714:	80 93 4c 03 	sts	0x034C, r24
			uart_sendstr(startreply);
    1718:	86 e1       	ldi	r24, 0x16	; 22
    171a:	92 e0       	ldi	r25, 0x02	; 2
    171c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <uart_sendstr>
		}
		if((data=='z' || data=='Z') && stop_s==0)
    1720:	80 91 97 03 	lds	r24, 0x0397
    1724:	8a 37       	cpi	r24, 0x7A	; 122
    1726:	21 f0       	breq	.+8      	; 0x1730 <__vector_25+0x140>
    1728:	80 91 97 03 	lds	r24, 0x0397
    172c:	8a 35       	cpi	r24, 0x5A	; 90
    172e:	b1 f4       	brne	.+44     	; 0x175c <__vector_25+0x16c>
    1730:	80 91 00 02 	lds	r24, 0x0200
    1734:	90 91 01 02 	lds	r25, 0x0201
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	81 f4       	brne	.+32     	; 0x175c <__vector_25+0x16c>
		{
			stop_s=1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	90 93 01 02 	sts	0x0201, r25
    1744:	80 93 00 02 	sts	0x0200, r24
			id=0;
    1748:	10 92 4d 03 	sts	0x034D, r1
    174c:	10 92 4c 03 	sts	0x034C, r1
			config_done=1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	90 93 55 03 	sts	0x0355, r25
    1758:	80 93 54 03 	sts	0x0354, r24
		}
		//uart_sendint(data);
		if(stop_s==0 && id==1)        //change for every bot
    175c:	80 91 00 02 	lds	r24, 0x0200
    1760:	90 91 01 02 	lds	r25, 0x0201
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	09 f0       	breq	.+2      	; 0x176a <__vector_25+0x17a>
    1768:	bf c1       	rjmp	.+894    	; 0x1ae8 <__vector_25+0x4f8>
    176a:	80 91 4c 03 	lds	r24, 0x034C
    176e:	90 91 4d 03 	lds	r25, 0x034D
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	91 05       	cpc	r25, r1
    1776:	09 f0       	breq	.+2      	; 0x177a <__vector_25+0x18a>
    1778:	b7 c1       	rjmp	.+878    	; 0x1ae8 <__vector_25+0x4f8>
		{
			if(coordinates==2)
    177a:	80 91 4e 03 	lds	r24, 0x034E
    177e:	90 91 4f 03 	lds	r25, 0x034F
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	91 05       	cpc	r25, r1
    1786:	09 f0       	breq	.+2      	; 0x178a <__vector_25+0x19a>
    1788:	be c0       	rjmp	.+380    	; 0x1906 <__vector_25+0x316>
			{
				if(destination_act==2) //ASCII value of 8
    178a:	80 91 52 03 	lds	r24, 0x0352
    178e:	90 91 53 03 	lds	r25, 0x0353
    1792:	82 30       	cpi	r24, 0x02	; 2
    1794:	91 05       	cpc	r25, r1
    1796:	09 f0       	breq	.+2      	; 0x179a <__vector_25+0x1aa>
    1798:	50 c0       	rjmp	.+160    	; 0x183a <__vector_25+0x24a>
				{
					//y_dest=data;  //forward
					if(data==0x30)
    179a:	80 91 97 03 	lds	r24, 0x0397
    179e:	80 33       	cpi	r24, 0x30	; 48
    17a0:	29 f4       	brne	.+10     	; 0x17ac <__vector_25+0x1bc>
					{
						y_dest=0;
    17a2:	10 92 91 03 	sts	0x0391, r1
    17a6:	10 92 90 03 	sts	0x0390, r1
    17aa:	41 c0       	rjmp	.+130    	; 0x182e <__vector_25+0x23e>
					}
					else if(data==0x31)
    17ac:	80 91 97 03 	lds	r24, 0x0397
    17b0:	81 33       	cpi	r24, 0x31	; 49
    17b2:	39 f4       	brne	.+14     	; 0x17c2 <__vector_25+0x1d2>
					{
						y_dest=1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	90 93 91 03 	sts	0x0391, r25
    17bc:	80 93 90 03 	sts	0x0390, r24
    17c0:	36 c0       	rjmp	.+108    	; 0x182e <__vector_25+0x23e>
					}
					else if(data==0x32)
    17c2:	80 91 97 03 	lds	r24, 0x0397
    17c6:	82 33       	cpi	r24, 0x32	; 50
    17c8:	39 f4       	brne	.+14     	; 0x17d8 <__vector_25+0x1e8>
					{
						y_dest=2;
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	90 93 91 03 	sts	0x0391, r25
    17d2:	80 93 90 03 	sts	0x0390, r24
    17d6:	2b c0       	rjmp	.+86     	; 0x182e <__vector_25+0x23e>
					}
					else if(data==0x33)
    17d8:	80 91 97 03 	lds	r24, 0x0397
    17dc:	83 33       	cpi	r24, 0x33	; 51
    17de:	39 f4       	brne	.+14     	; 0x17ee <__vector_25+0x1fe>
					{
						y_dest=3;
    17e0:	83 e0       	ldi	r24, 0x03	; 3
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	90 93 91 03 	sts	0x0391, r25
    17e8:	80 93 90 03 	sts	0x0390, r24
    17ec:	20 c0       	rjmp	.+64     	; 0x182e <__vector_25+0x23e>
					}
					else if(data==0x34)
    17ee:	80 91 97 03 	lds	r24, 0x0397
    17f2:	84 33       	cpi	r24, 0x34	; 52
    17f4:	39 f4       	brne	.+14     	; 0x1804 <__vector_25+0x214>
					{
						y_dest=4;
    17f6:	84 e0       	ldi	r24, 0x04	; 4
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	90 93 91 03 	sts	0x0391, r25
    17fe:	80 93 90 03 	sts	0x0390, r24
    1802:	15 c0       	rjmp	.+42     	; 0x182e <__vector_25+0x23e>
					}
					else if(data==0x35)
    1804:	80 91 97 03 	lds	r24, 0x0397
    1808:	85 33       	cpi	r24, 0x35	; 53
    180a:	39 f4       	brne	.+14     	; 0x181a <__vector_25+0x22a>
					{
						y_dest=5;
    180c:	85 e0       	ldi	r24, 0x05	; 5
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	90 93 91 03 	sts	0x0391, r25
    1814:	80 93 90 03 	sts	0x0390, r24
    1818:	0a c0       	rjmp	.+20     	; 0x182e <__vector_25+0x23e>
					}
					else if(data==0x36)
    181a:	80 91 97 03 	lds	r24, 0x0397
    181e:	86 33       	cpi	r24, 0x36	; 54
    1820:	31 f4       	brne	.+12     	; 0x182e <__vector_25+0x23e>
					{
						y_dest=6;
    1822:	86 e0       	ldi	r24, 0x06	; 6
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	90 93 91 03 	sts	0x0391, r25
    182a:	80 93 90 03 	sts	0x0390, r24
					}

					//uart_sendint(y_dest);
					destination_act=3;
    182e:	83 e0       	ldi	r24, 0x03	; 3
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	90 93 53 03 	sts	0x0353, r25
    1836:	80 93 52 03 	sts	0x0352, r24
					//lcd_print('1', '5', 38, 10);
				}
				if(destination_act==1) //ASCII value of 8
    183a:	80 91 52 03 	lds	r24, 0x0352
    183e:	90 91 53 03 	lds	r25, 0x0353
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	09 f0       	breq	.+2      	; 0x184a <__vector_25+0x25a>
    1848:	50 c0       	rjmp	.+160    	; 0x18ea <__vector_25+0x2fa>
				{
					//x_dest=data;  //forward
					if(data==0x30)
    184a:	80 91 97 03 	lds	r24, 0x0397
    184e:	80 33       	cpi	r24, 0x30	; 48
    1850:	29 f4       	brne	.+10     	; 0x185c <__vector_25+0x26c>
					{
						x_dest=0;
    1852:	10 92 a2 03 	sts	0x03A2, r1
    1856:	10 92 a1 03 	sts	0x03A1, r1
    185a:	41 c0       	rjmp	.+130    	; 0x18de <__vector_25+0x2ee>
					}
					else if(data==0x31)
    185c:	80 91 97 03 	lds	r24, 0x0397
    1860:	81 33       	cpi	r24, 0x31	; 49
    1862:	39 f4       	brne	.+14     	; 0x1872 <__vector_25+0x282>
					{
						x_dest=1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	90 93 a2 03 	sts	0x03A2, r25
    186c:	80 93 a1 03 	sts	0x03A1, r24
    1870:	36 c0       	rjmp	.+108    	; 0x18de <__vector_25+0x2ee>
					}
					else if(data==0x32)
    1872:	80 91 97 03 	lds	r24, 0x0397
    1876:	82 33       	cpi	r24, 0x32	; 50
    1878:	39 f4       	brne	.+14     	; 0x1888 <__vector_25+0x298>
					{
						x_dest=2;
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	90 93 a2 03 	sts	0x03A2, r25
    1882:	80 93 a1 03 	sts	0x03A1, r24
    1886:	2b c0       	rjmp	.+86     	; 0x18de <__vector_25+0x2ee>
					}
					else if(data==0x33)
    1888:	80 91 97 03 	lds	r24, 0x0397
    188c:	83 33       	cpi	r24, 0x33	; 51
    188e:	39 f4       	brne	.+14     	; 0x189e <__vector_25+0x2ae>
					{
						x_dest=3;
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	90 93 a2 03 	sts	0x03A2, r25
    1898:	80 93 a1 03 	sts	0x03A1, r24
    189c:	20 c0       	rjmp	.+64     	; 0x18de <__vector_25+0x2ee>
					}
					else if(data==0x34)
    189e:	80 91 97 03 	lds	r24, 0x0397
    18a2:	84 33       	cpi	r24, 0x34	; 52
    18a4:	39 f4       	brne	.+14     	; 0x18b4 <__vector_25+0x2c4>
					{
						x_dest=4;
    18a6:	84 e0       	ldi	r24, 0x04	; 4
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	90 93 a2 03 	sts	0x03A2, r25
    18ae:	80 93 a1 03 	sts	0x03A1, r24
    18b2:	15 c0       	rjmp	.+42     	; 0x18de <__vector_25+0x2ee>
					}
					else if(data==0x35)
    18b4:	80 91 97 03 	lds	r24, 0x0397
    18b8:	85 33       	cpi	r24, 0x35	; 53
    18ba:	39 f4       	brne	.+14     	; 0x18ca <__vector_25+0x2da>
					{
						x_dest=5;
    18bc:	85 e0       	ldi	r24, 0x05	; 5
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	90 93 a2 03 	sts	0x03A2, r25
    18c4:	80 93 a1 03 	sts	0x03A1, r24
    18c8:	0a c0       	rjmp	.+20     	; 0x18de <__vector_25+0x2ee>
					}
					else if(data==0x36)
    18ca:	80 91 97 03 	lds	r24, 0x0397
    18ce:	86 33       	cpi	r24, 0x36	; 54
    18d0:	31 f4       	brne	.+12     	; 0x18de <__vector_25+0x2ee>
					{
						x_dest=6;
    18d2:	86 e0       	ldi	r24, 0x06	; 6
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	90 93 a2 03 	sts	0x03A2, r25
    18da:	80 93 a1 03 	sts	0x03A1, r24
					}
					//uart_sendint(x_dest);
					destination_act=2;
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	90 93 53 03 	sts	0x0353, r25
    18e6:	80 93 52 03 	sts	0x0352, r24
					//lcd_print('1', '5', 38, 10);
				}



				if(data == 'd' || data == 'D') //ASCII value of 8
    18ea:	80 91 97 03 	lds	r24, 0x0397
    18ee:	84 36       	cpi	r24, 0x64	; 100
    18f0:	21 f0       	breq	.+8      	; 0x18fa <__vector_25+0x30a>
    18f2:	80 91 97 03 	lds	r24, 0x0397
    18f6:	84 34       	cpi	r24, 0x44	; 68
    18f8:	31 f4       	brne	.+12     	; 0x1906 <__vector_25+0x316>
				{
					destination_act=1;  //forward
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	90 93 53 03 	sts	0x0353, r25
    1902:	80 93 52 03 	sts	0x0352, r24
				/*if(data == 0x39) //ASCII value of 9
		{
		  buzzer_off();
		}*/
			}
			if(x_recei==1 && coordinates==1)
    1906:	80 91 50 03 	lds	r24, 0x0350
    190a:	90 91 51 03 	lds	r25, 0x0351
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	91 05       	cpc	r25, r1
    1912:	09 f0       	breq	.+2      	; 0x1916 <__vector_25+0x326>
    1914:	5c c0       	rjmp	.+184    	; 0x19ce <__vector_25+0x3de>
    1916:	80 91 4e 03 	lds	r24, 0x034E
    191a:	90 91 4f 03 	lds	r25, 0x034F
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 05       	cpc	r25, r1
    1922:	09 f0       	breq	.+2      	; 0x1926 <__vector_25+0x336>
    1924:	54 c0       	rjmp	.+168    	; 0x19ce <__vector_25+0x3de>
			{
				//y_coor=data;
				if(data==0x30)
    1926:	80 91 97 03 	lds	r24, 0x0397
    192a:	80 33       	cpi	r24, 0x30	; 48
    192c:	29 f4       	brne	.+10     	; 0x1938 <__vector_25+0x348>
				{
					y_coor=0;
    192e:	10 92 8b 03 	sts	0x038B, r1
    1932:	10 92 8a 03 	sts	0x038A, r1
    1936:	41 c0       	rjmp	.+130    	; 0x19ba <__vector_25+0x3ca>
				}
				else if(data==0x31)
    1938:	80 91 97 03 	lds	r24, 0x0397
    193c:	81 33       	cpi	r24, 0x31	; 49
    193e:	39 f4       	brne	.+14     	; 0x194e <__vector_25+0x35e>
				{
					y_coor=1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	90 93 8b 03 	sts	0x038B, r25
    1948:	80 93 8a 03 	sts	0x038A, r24
    194c:	36 c0       	rjmp	.+108    	; 0x19ba <__vector_25+0x3ca>
				}
				else if(data==0x32)
    194e:	80 91 97 03 	lds	r24, 0x0397
    1952:	82 33       	cpi	r24, 0x32	; 50
    1954:	39 f4       	brne	.+14     	; 0x1964 <__vector_25+0x374>
				{
					y_coor=2;
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	90 93 8b 03 	sts	0x038B, r25
    195e:	80 93 8a 03 	sts	0x038A, r24
    1962:	2b c0       	rjmp	.+86     	; 0x19ba <__vector_25+0x3ca>
				}
				else if(data==0x33)
    1964:	80 91 97 03 	lds	r24, 0x0397
    1968:	83 33       	cpi	r24, 0x33	; 51
    196a:	39 f4       	brne	.+14     	; 0x197a <__vector_25+0x38a>
				{
					y_coor=3;
    196c:	83 e0       	ldi	r24, 0x03	; 3
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	90 93 8b 03 	sts	0x038B, r25
    1974:	80 93 8a 03 	sts	0x038A, r24
    1978:	20 c0       	rjmp	.+64     	; 0x19ba <__vector_25+0x3ca>
				}
				else if(data==0x34)
    197a:	80 91 97 03 	lds	r24, 0x0397
    197e:	84 33       	cpi	r24, 0x34	; 52
    1980:	39 f4       	brne	.+14     	; 0x1990 <__vector_25+0x3a0>
				{
					y_coor=4;
    1982:	84 e0       	ldi	r24, 0x04	; 4
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	90 93 8b 03 	sts	0x038B, r25
    198a:	80 93 8a 03 	sts	0x038A, r24
    198e:	15 c0       	rjmp	.+42     	; 0x19ba <__vector_25+0x3ca>
				}
				else if(data==0x35)
    1990:	80 91 97 03 	lds	r24, 0x0397
    1994:	85 33       	cpi	r24, 0x35	; 53
    1996:	39 f4       	brne	.+14     	; 0x19a6 <__vector_25+0x3b6>
				{
					y_coor=5;
    1998:	85 e0       	ldi	r24, 0x05	; 5
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	90 93 8b 03 	sts	0x038B, r25
    19a0:	80 93 8a 03 	sts	0x038A, r24
    19a4:	0a c0       	rjmp	.+20     	; 0x19ba <__vector_25+0x3ca>
				}
				else if(data==0x36)
    19a6:	80 91 97 03 	lds	r24, 0x0397
    19aa:	86 33       	cpi	r24, 0x36	; 54
    19ac:	31 f4       	brne	.+12     	; 0x19ba <__vector_25+0x3ca>
				{
					y_coor=6;
    19ae:	86 e0       	ldi	r24, 0x06	; 6
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	90 93 8b 03 	sts	0x038B, r25
    19b6:	80 93 8a 03 	sts	0x038A, r24
				}
				//lcd_print(2,1,x_coor,3);
				//lcd_print(2,6,y_coor,3);
				x_recei=0;
    19ba:	10 92 51 03 	sts	0x0351, r1
    19be:	10 92 50 03 	sts	0x0350, r1
				coordinates=2;
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	90 93 4f 03 	sts	0x034F, r25
    19ca:	80 93 4e 03 	sts	0x034E, r24
			}
			if(coordinates==1 && x_recei==0)
    19ce:	80 91 4e 03 	lds	r24, 0x034E
    19d2:	90 91 4f 03 	lds	r25, 0x034F
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	09 f0       	breq	.+2      	; 0x19de <__vector_25+0x3ee>
    19dc:	57 c0       	rjmp	.+174    	; 0x1a8c <__vector_25+0x49c>
    19de:	80 91 50 03 	lds	r24, 0x0350
    19e2:	90 91 51 03 	lds	r25, 0x0351
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	09 f0       	breq	.+2      	; 0x19ec <__vector_25+0x3fc>
    19ea:	50 c0       	rjmp	.+160    	; 0x1a8c <__vector_25+0x49c>
			{
				//uart_sendint(data);
				//x_coor=data;
				if(data==0x30)
    19ec:	80 91 97 03 	lds	r24, 0x0397
    19f0:	80 33       	cpi	r24, 0x30	; 48
    19f2:	29 f4       	brne	.+10     	; 0x19fe <__vector_25+0x40e>
				{
					x_coor=0;
    19f4:	10 92 9c 03 	sts	0x039C, r1
    19f8:	10 92 9b 03 	sts	0x039B, r1
    19fc:	41 c0       	rjmp	.+130    	; 0x1a80 <__vector_25+0x490>
				}
				else if(data==0x31)
    19fe:	80 91 97 03 	lds	r24, 0x0397
    1a02:	81 33       	cpi	r24, 0x31	; 49
    1a04:	39 f4       	brne	.+14     	; 0x1a14 <__vector_25+0x424>
				{
					x_coor=1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	90 93 9c 03 	sts	0x039C, r25
    1a0e:	80 93 9b 03 	sts	0x039B, r24
    1a12:	36 c0       	rjmp	.+108    	; 0x1a80 <__vector_25+0x490>
				}
				else if(data==0x32)
    1a14:	80 91 97 03 	lds	r24, 0x0397
    1a18:	82 33       	cpi	r24, 0x32	; 50
    1a1a:	39 f4       	brne	.+14     	; 0x1a2a <__vector_25+0x43a>
				{
					x_coor=2;
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	90 93 9c 03 	sts	0x039C, r25
    1a24:	80 93 9b 03 	sts	0x039B, r24
    1a28:	2b c0       	rjmp	.+86     	; 0x1a80 <__vector_25+0x490>
				}
				else if(data==0x33)
    1a2a:	80 91 97 03 	lds	r24, 0x0397
    1a2e:	83 33       	cpi	r24, 0x33	; 51
    1a30:	39 f4       	brne	.+14     	; 0x1a40 <__vector_25+0x450>
				{
					x_coor=3;
    1a32:	83 e0       	ldi	r24, 0x03	; 3
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	90 93 9c 03 	sts	0x039C, r25
    1a3a:	80 93 9b 03 	sts	0x039B, r24
    1a3e:	20 c0       	rjmp	.+64     	; 0x1a80 <__vector_25+0x490>
				}
				else if(data==0x34)
    1a40:	80 91 97 03 	lds	r24, 0x0397
    1a44:	84 33       	cpi	r24, 0x34	; 52
    1a46:	39 f4       	brne	.+14     	; 0x1a56 <__vector_25+0x466>
				{
					x_coor=4;
    1a48:	84 e0       	ldi	r24, 0x04	; 4
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	90 93 9c 03 	sts	0x039C, r25
    1a50:	80 93 9b 03 	sts	0x039B, r24
    1a54:	15 c0       	rjmp	.+42     	; 0x1a80 <__vector_25+0x490>
				}
				else if(data==0x35)
    1a56:	80 91 97 03 	lds	r24, 0x0397
    1a5a:	85 33       	cpi	r24, 0x35	; 53
    1a5c:	39 f4       	brne	.+14     	; 0x1a6c <__vector_25+0x47c>
				{
					x_coor=5;
    1a5e:	85 e0       	ldi	r24, 0x05	; 5
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	90 93 9c 03 	sts	0x039C, r25
    1a66:	80 93 9b 03 	sts	0x039B, r24
    1a6a:	0a c0       	rjmp	.+20     	; 0x1a80 <__vector_25+0x490>
				}
				else if(data==0x36)
    1a6c:	80 91 97 03 	lds	r24, 0x0397
    1a70:	86 33       	cpi	r24, 0x36	; 54
    1a72:	31 f4       	brne	.+12     	; 0x1a80 <__vector_25+0x490>
				{
					x_coor=6;
    1a74:	86 e0       	ldi	r24, 0x06	; 6
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	90 93 9c 03 	sts	0x039C, r25
    1a7c:	80 93 9b 03 	sts	0x039B, r24
				}
				//uart_sendint(x_coor);
				x_recei=1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	90 93 51 03 	sts	0x0351, r25
    1a88:	80 93 50 03 	sts	0x0350, r24
			}
			if(data=='i' || data=='I')
    1a8c:	80 91 97 03 	lds	r24, 0x0397
    1a90:	89 36       	cpi	r24, 0x69	; 105
    1a92:	21 f0       	breq	.+8      	; 0x1a9c <__vector_25+0x4ac>
    1a94:	80 91 97 03 	lds	r24, 0x0397
    1a98:	89 34       	cpi	r24, 0x49	; 73
    1a9a:	31 f4       	brne	.+12     	; 0x1aa8 <__vector_25+0x4b8>
			{
				coordinates=1;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	90 93 4f 03 	sts	0x034F, r25
    1aa4:	80 93 4e 03 	sts	0x034E, r24
			}


			if(data=='c' || data=='C')
    1aa8:	80 91 97 03 	lds	r24, 0x0397
    1aac:	83 36       	cpi	r24, 0x63	; 99
    1aae:	21 f0       	breq	.+8      	; 0x1ab8 <__vector_25+0x4c8>
    1ab0:	80 91 97 03 	lds	r24, 0x0397
    1ab4:	83 34       	cpi	r24, 0x43	; 67
    1ab6:	c1 f4       	brne	.+48     	; 0x1ae8 <__vector_25+0x4f8>
			{
				//datac=x_coor;
				//if(x_coor=='0')
				uart_sendint(x_coor);
    1ab8:	80 91 9b 03 	lds	r24, 0x039B
    1abc:	90 91 9c 03 	lds	r25, 0x039C
    1ac0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <uart_sendint>
				//datac=y_coor;
				//else
				uart_sendint(y_coor);
    1ac4:	80 91 8a 03 	lds	r24, 0x038A
    1ac8:	90 91 8b 03 	lds	r25, 0x038B
    1acc:	0e 94 4c 0a 	call	0x1498	; 0x1498 <uart_sendint>
				uart_sendint(x_dest);
    1ad0:	80 91 a1 03 	lds	r24, 0x03A1
    1ad4:	90 91 a2 03 	lds	r25, 0x03A2
    1ad8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <uart_sendint>
				uart_sendint(x_dest);
    1adc:	80 91 a1 03 	lds	r24, 0x03A1
    1ae0:	90 91 a2 03 	lds	r25, 0x03A2
    1ae4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <uart_sendint>

		}
		//UDR0 = data;
	}

}
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	ff 91       	pop	r31
    1aee:	ef 91       	pop	r30
    1af0:	bf 91       	pop	r27
    1af2:	af 91       	pop	r26
    1af4:	9f 91       	pop	r25
    1af6:	8f 91       	pop	r24
    1af8:	7f 91       	pop	r23
    1afa:	6f 91       	pop	r22
    1afc:	5f 91       	pop	r21
    1afe:	4f 91       	pop	r20
    1b00:	3f 91       	pop	r19
    1b02:	2f 91       	pop	r18
    1b04:	0f 90       	pop	r0
    1b06:	00 92 5b 00 	sts	0x005B, r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1b1c:	a7 e2       	ldi	r26, 0x27	; 39
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e7 e2       	ldi	r30, 0x27	; 39
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	87 6f       	ori	r24, 0xF7	; 247
    1b28:	8c 93       	st	X, r24
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1b2a:	a8 e2       	ldi	r26, 0x28	; 40
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e8 e2       	ldi	r30, 0x28	; 40
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	80 78       	andi	r24, 0x80	; 128
    1b36:	8c 93       	st	X, r24
}
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00;
    1b46:	e0 e3       	ldi	r30, 0x30	; 48
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	10 82       	st	Z, r1
	PORTF = 0x00;
    1b4c:	e1 e3       	ldi	r30, 0x31	; 49
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	10 82       	st	Z, r1
	DDRK = 0x00;
    1b52:	e7 e0       	ldi	r30, 0x07	; 7
    1b54:	f1 e0       	ldi	r31, 0x01	; 1
    1b56:	10 82       	st	Z, r1
	PORTK = 0x00;
    1b58:	e8 e0       	ldi	r30, 0x08	; 8
    1b5a:	f1 e0       	ldi	r31, 0x01	; 1
    1b5c:	10 82       	st	Z, r1
}
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
	DDRA = DDRA | 0x0F;
    1b6c:	a1 e2       	ldi	r26, 0x21	; 33
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e1 e2       	ldi	r30, 0x21	; 33
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	8f 60       	ori	r24, 0x0F	; 15
    1b78:	8c 93       	st	X, r24
	PORTA = PORTA & 0xF0;
    1b7a:	a2 e2       	ldi	r26, 0x22	; 34
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e2 e2       	ldi	r30, 0x22	; 34
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	80 7f       	andi	r24, 0xF0	; 240
    1b86:	8c 93       	st	X, r24
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1b88:	aa e0       	ldi	r26, 0x0A	; 10
    1b8a:	b1 e0       	ldi	r27, 0x01	; 1
    1b8c:	ea e0       	ldi	r30, 0x0A	; 10
    1b8e:	f1 e0       	ldi	r31, 0x01	; 1
    1b90:	80 81       	ld	r24, Z
    1b92:	88 61       	ori	r24, 0x18	; 24
    1b94:	8c 93       	st	X, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1b96:	ab e0       	ldi	r26, 0x0B	; 11
    1b98:	b1 e0       	ldi	r27, 0x01	; 1
    1b9a:	eb e0       	ldi	r30, 0x0B	; 11
    1b9c:	f1 e0       	ldi	r31, 0x01	; 1
    1b9e:	80 81       	ld	r24, Z
    1ba0:	88 61       	ori	r24, 0x18	; 24
    1ba2:	8c 93       	st	X, r24
}
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;  //Stop
    1bb2:	e1 e2       	ldi	r30, 0x21	; 33
    1bb4:	f1 e0       	ldi	r31, 0x01	; 1
    1bb6:	10 82       	st	Z, r1
	TCNT5H = 0xFF;  //Counter higher 8-bit value to which OCR5xH value is compared with
    1bb8:	e5 e2       	ldi	r30, 0x25	; 37
    1bba:	f1 e0       	ldi	r31, 0x01	; 1
    1bbc:	8f ef       	ldi	r24, 0xFF	; 255
    1bbe:	80 83       	st	Z, r24
	TCNT5L = 0x01;  //Counter lower 8-bit value to which OCR5xH value is compared with
    1bc0:	e4 e2       	ldi	r30, 0x24	; 36
    1bc2:	f1 e0       	ldi	r31, 0x01	; 1
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	80 83       	st	Z, r24
	OCR5AH = 0x00;  //Output compare register high value for Left Motor
    1bc8:	e9 e2       	ldi	r30, 0x29	; 41
    1bca:	f1 e0       	ldi	r31, 0x01	; 1
    1bcc:	10 82       	st	Z, r1
	OCR5AL = 0xFF;  //Output compare register low value for Left Motor
    1bce:	e8 e2       	ldi	r30, 0x28	; 40
    1bd0:	f1 e0       	ldi	r31, 0x01	; 1
    1bd2:	8f ef       	ldi	r24, 0xFF	; 255
    1bd4:	80 83       	st	Z, r24
	OCR5BH = 0x00;  //Output compare register high value for Right Motor
    1bd6:	eb e2       	ldi	r30, 0x2B	; 43
    1bd8:	f1 e0       	ldi	r31, 0x01	; 1
    1bda:	10 82       	st	Z, r1
	OCR5BL = 0xFF;  //Output compare register low value for Right Motor
    1bdc:	ea e2       	ldi	r30, 0x2A	; 42
    1bde:	f1 e0       	ldi	r31, 0x01	; 1
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
	OCR5CH = 0x00;  //Output compare register high value for Motor C1
    1be4:	ed e2       	ldi	r30, 0x2D	; 45
    1be6:	f1 e0       	ldi	r31, 0x01	; 1
    1be8:	10 82       	st	Z, r1
	OCR5CL = 0xFF;  //Output compare register low value for Motor C1
    1bea:	ec e2       	ldi	r30, 0x2C	; 44
    1bec:	f1 e0       	ldi	r31, 0x01	; 1
    1bee:	8f ef       	ldi	r24, 0xFF	; 255
    1bf0:	80 83       	st	Z, r24
	TCCR5A = 0xA9;  /*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    1bf2:	e0 e2       	ldi	r30, 0x20	; 32
    1bf4:	f1 e0       	ldi	r31, 0x01	; 1
    1bf6:	89 ea       	ldi	r24, 0xA9	; 169
    1bf8:	80 83       	st	Z, r24
			For Overriding normal port functionality to OCRnA outputs.
			  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;  //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1bfa:	e1 e2       	ldi	r30, 0x21	; 33
    1bfc:	f1 e0       	ldi	r31, 0x01	; 1
    1bfe:	8b e0       	ldi	r24, 0x0B	; 11
    1c00:	80 83       	st	Z, r24
}
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <adc_init>:

void adc_init()
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1c10:	ea e7       	ldi	r30, 0x7A	; 122
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	10 82       	st	Z, r1
	ADCSRB = 0x00;    //MUX5 = 0
    1c16:	eb e7       	ldi	r30, 0x7B	; 123
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	10 82       	st	Z, r1
	ADMUX = 0x20;   //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1c1c:	ec e7       	ldi	r30, 0x7C	; 124
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 e2       	ldi	r24, 0x20	; 32
    1c22:	80 83       	st	Z, r24
	ACSR = 0x80;
    1c24:	e0 e5       	ldi	r30, 0x50	; 80
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 e8       	ldi	r24, 0x80	; 128
    1c2a:	80 83       	st	Z, r24
	ADCSRA = 0x86;    //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1c2c:	ea e7       	ldi	r30, 0x7A	; 122
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	86 e8       	ldi	r24, 0x86	; 134
    1c32:	80 83       	st	Z, r24
}
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	0f 92       	push	r0
    1c40:	0f 92       	push	r0
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	88 30       	cpi	r24, 0x08	; 8
    1c4c:	20 f0       	brcs	.+8      	; 0x1c56 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1c4e:	eb e7       	ldi	r30, 0x7B	; 123
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	88 e0       	ldi	r24, 0x08	; 8
    1c54:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	87 70       	andi	r24, 0x07	; 7
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;
    1c5c:	ec e7       	ldi	r30, 0x7C	; 124
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	80 62       	ori	r24, 0x20	; 32
    1c64:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;   //Set start conversion bit
    1c66:	aa e7       	ldi	r26, 0x7A	; 122
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ea e7       	ldi	r30, 0x7A	; 122
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	80 64       	ori	r24, 0x40	; 64
    1c72:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);  //Wait for conversion to complete
    1c74:	ea e7       	ldi	r30, 0x7A	; 122
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	80 71       	andi	r24, 0x10	; 16
    1c80:	90 70       	andi	r25, 0x00	; 0
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	b9 f3       	breq	.-18     	; 0x1c74 <ADC_Conversion+0x3a>
	a=ADCH;
    1c86:	e9 e7       	ldi	r30, 0x79	; 121
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1c8e:	aa e7       	ldi	r26, 0x7A	; 122
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ea e7       	ldi	r30, 0x7A	; 122
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	80 61       	ori	r24, 0x10	; 16
    1c9a:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1c9c:	eb e7       	ldi	r30, 0x7B	; 123
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	10 82       	st	Z, r1
	return a;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <print_sensor+0x6>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	6a 83       	std	Y+2, r22	; 0x02
    1cbc:	4b 83       	std	Y+3, r20	; 0x03

	ADC_Value = ADC_Conversion(channel);
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    1cc4:	80 93 92 03 	sts	0x0392, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    1cc8:	80 91 92 03 	lds	r24, 0x0392
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	6a 81       	ldd	r22, Y+2	; 0x02
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	23 e0       	ldi	r18, 0x03	; 3
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
}
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	0f 92       	push	r0
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1cfa:	e8 e2       	ldi	r30, 0x28	; 40
    1cfc:	f1 e0       	ldi	r31, 0x01	; 1
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1d02:	ea e2       	ldi	r30, 0x2A	; 42
    1d04:	f1 e0       	ldi	r31, 0x01	; 1
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	80 83       	st	Z, r24
}
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	0f 92       	push	r0
    1d1a:	0f 92       	push	r0
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char PortARestore = 0;
    1d22:	19 82       	std	Y+1, r1	; 0x01

	Direction &= 0x0F;     // removing upper nibbel for the protection
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	8f 70       	andi	r24, 0x0F	; 15
    1d28:	8a 83       	std	Y+2, r24	; 0x02
	PortARestore = PORTA;    // reading the PORTA original status
    1d2a:	e2 e2       	ldi	r30, 0x22	; 34
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	89 83       	std	Y+1, r24	; 0x01
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	80 7f       	andi	r24, 0xF0	; 240
    1d36:	89 83       	std	Y+1, r24	; 0x01
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1d38:	99 81       	ldd	r25, Y+1	; 0x01
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	89 2b       	or	r24, r25
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	PORTA = PortARestore;    // executing the command
    1d40:	e2 e2       	ldi	r30, 0x22	; 34
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	80 83       	st	Z, r24
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    1d5a:	ad e2       	ldi	r26, 0x2D	; 45
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	ed e2       	ldi	r30, 0x2D	; 45
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8f 7e       	andi	r24, 0xEF	; 239
    1d66:	8c 93       	st	X, r24
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    1d68:	ae e2       	ldi	r26, 0x2E	; 46
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	ee e2       	ldi	r30, 0x2E	; 46
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	80 61       	ori	r24, 0x10	; 16
    1d74:	8c 93       	st	X, r24
}
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1d84:	ad e2       	ldi	r26, 0x2D	; 45
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	ed e2       	ldi	r30, 0x2D	; 45
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 7d       	andi	r24, 0xDF	; 223
    1d90:	8c 93       	st	X, r24
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1d92:	ae e2       	ldi	r26, 0x2E	; 46
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	ee e2       	ldi	r30, 0x2E	; 46
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 62       	ori	r24, 0x20	; 32
    1d9e:	8c 93       	st	X, r24
}
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <left_position_encoder_interrupt_init>:



void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1dae:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1db0:	aa e6       	ldi	r26, 0x6A	; 106
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	ea e6       	ldi	r30, 0x6A	; 106
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	82 60       	ori	r24, 0x02	; 2
    1dbc:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1dbe:	ad e3       	ldi	r26, 0x3D	; 61
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	ed e3       	ldi	r30, 0x3D	; 61
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 61       	ori	r24, 0x10	; 16
    1dca:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
    1dcc:	78 94       	sei
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1ddc:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1dde:	aa e6       	ldi	r26, 0x6A	; 106
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	ea e6       	ldi	r30, 0x6A	; 106
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	88 60       	ori	r24, 0x08	; 8
    1dea:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1dec:	ad e3       	ldi	r26, 0x3D	; 61
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	ed e3       	ldi	r30, 0x3D	; 61
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	80 62       	ori	r24, 0x20	; 32
    1df8:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt
    1dfa:	78 94       	sei
}
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
    1e02:	1f 92       	push	r1
    1e04:	0f 92       	push	r0
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	0f 92       	push	r0
    1e0a:	11 24       	eor	r1, r1
    1e0c:	8f 93       	push	r24
    1e0e:	9f 93       	push	r25
    1e10:	af 93       	push	r26
    1e12:	bf 93       	push	r27
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
    1e1c:	80 91 40 03 	lds	r24, 0x0340
    1e20:	90 91 41 03 	lds	r25, 0x0341
    1e24:	a0 91 42 03 	lds	r26, 0x0342
    1e28:	b0 91 43 03 	lds	r27, 0x0343
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	a1 1d       	adc	r26, r1
    1e30:	b1 1d       	adc	r27, r1
    1e32:	80 93 40 03 	sts	0x0340, r24
    1e36:	90 93 41 03 	sts	0x0341, r25
    1e3a:	a0 93 42 03 	sts	0x0342, r26
    1e3e:	b0 93 43 03 	sts	0x0343, r27
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	bf 91       	pop	r27
    1e48:	af 91       	pop	r26
    1e4a:	9f 91       	pop	r25
    1e4c:	8f 91       	pop	r24
    1e4e:	0f 90       	pop	r0
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	0f 90       	pop	r0
    1e54:	1f 90       	pop	r1
    1e56:	18 95       	reti

00001e58 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    1e58:	1f 92       	push	r1
    1e5a:	0f 92       	push	r0
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	0f 92       	push	r0
    1e60:	11 24       	eor	r1, r1
    1e62:	8f 93       	push	r24
    1e64:	9f 93       	push	r25
    1e66:	af 93       	push	r26
    1e68:	bf 93       	push	r27
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
    1e72:	80 91 3c 03 	lds	r24, 0x033C
    1e76:	90 91 3d 03 	lds	r25, 0x033D
    1e7a:	a0 91 3e 03 	lds	r26, 0x033E
    1e7e:	b0 91 3f 03 	lds	r27, 0x033F
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	a1 1d       	adc	r26, r1
    1e86:	b1 1d       	adc	r27, r1
    1e88:	80 93 3c 03 	sts	0x033C, r24
    1e8c:	90 93 3d 03 	sts	0x033D, r25
    1e90:	a0 93 3e 03 	sts	0x033E, r26
    1e94:	b0 93 3f 03 	sts	0x033F, r27
}
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	bf 91       	pop	r27
    1e9e:	af 91       	pop	r26
    1ea0:	9f 91       	pop	r25
    1ea2:	8f 91       	pop	r24
    1ea4:	0f 90       	pop	r0
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	0f 90       	pop	r0
    1eaa:	1f 90       	pop	r1
    1eac:	18 95       	reti

00001eae <forward>:



void forward (void) //both wheels forward
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x06);
    1eb6:	86 e0       	ldi	r24, 0x06	; 6
    1eb8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <motion_set>
}
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <back>:

void back (void) //both wheels backward
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x09);
    1eca:	89 e0       	ldi	r24, 0x09	; 9
    1ecc:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <motion_set>
}
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x05);
    1ede:	85 e0       	ldi	r24, 0x05	; 5
    1ee0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <motion_set>
}
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x0A);
    1ef2:	8a e0       	ldi	r24, 0x0A	; 10
    1ef4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <motion_set>
}
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x04);
    1f06:	84 e0       	ldi	r24, 0x04	; 4
    1f08:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <motion_set>
}
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x02);
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <motion_set>
}
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x01);
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <motion_set>
}
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x08);
    1f42:	88 e0       	ldi	r24, 0x08	; 8
    1f44:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <motion_set>
}
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <stop>:

void stop (void)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x00);
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <motion_set>
}
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	2c 97       	sbiw	r28, 0x0c	; 12
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	9a 87       	std	Y+10, r25	; 0x0a
    1f78:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e0       	ldi	r26, 0x00	; 0
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	af 83       	std	Y+7, r26	; 0x07
    1f88:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    1f8a:	19 82       	std	Y+1, r1	; 0x01
    1f8c:	1a 82       	std	Y+2, r1	; 0x02
    1f8e:	1b 82       	std	Y+3, r1	; 0x03
    1f90:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	cc 01       	movw	r24, r24
    1f98:	a0 e0       	ldi	r26, 0x00	; 0
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	28 e4       	ldi	r18, 0x48	; 72
    1fae:	31 ee       	ldi	r19, 0xE1	; 225
    1fb0:	42 e8       	ldi	r20, 0x82	; 130
    1fb2:	50 e4       	ldi	r21, 0x40	; 64
    1fb4:	0e 94 98 35 	call	0x6b30	; 0x6b30 <__divsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	8d 83       	std	Y+5, r24	; 0x05
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	af 83       	std	Y+7, r26	; 0x07
    1fc2:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1fc4:	6d 81       	ldd	r22, Y+5	; 0x05
    1fc6:	7e 81       	ldd	r23, Y+6	; 0x06
    1fc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fca:	98 85       	ldd	r25, Y+8	; 0x08
    1fcc:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	cc 01       	movw	r24, r24
    1fd6:	a0 e0       	ldi	r26, 0x00	; 0
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	ab 83       	std	Y+3, r26	; 0x03
    1fe0:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
    1fe2:	10 92 40 03 	sts	0x0340, r1
    1fe6:	10 92 41 03 	sts	0x0341, r1
    1fea:	10 92 42 03 	sts	0x0342, r1
    1fee:	10 92 43 03 	sts	0x0343, r1
	ShaftCountLeft = 0;
    1ff2:	10 92 3c 03 	sts	0x033C, r1
    1ff6:	10 92 3d 03 	sts	0x033D, r1
    1ffa:	10 92 3e 03 	sts	0x033E, r1
    1ffe:	10 92 3f 03 	sts	0x033F, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    2002:	20 91 40 03 	lds	r18, 0x0340
    2006:	30 91 41 03 	lds	r19, 0x0341
    200a:	40 91 42 03 	lds	r20, 0x0342
    200e:	50 91 43 03 	lds	r21, 0x0343
    2012:	1c 86       	std	Y+12, r1	; 0x0c
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	ab 81       	ldd	r26, Y+3	; 0x03
    201a:	bc 81       	ldd	r27, Y+4	; 0x04
    201c:	28 17       	cp	r18, r24
    201e:	39 07       	cpc	r19, r25
    2020:	4a 07       	cpc	r20, r26
    2022:	5b 07       	cpc	r21, r27
    2024:	10 f0       	brcs	.+4      	; 0x202a <angle_rotate+0xc8>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	8c 87       	std	Y+12, r24	; 0x0c
    202a:	20 91 3c 03 	lds	r18, 0x033C
    202e:	30 91 3d 03 	lds	r19, 0x033D
    2032:	40 91 3e 03 	lds	r20, 0x033E
    2036:	50 91 3f 03 	lds	r21, 0x033F
    203a:	1b 86       	std	Y+11, r1	; 0x0b
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	ab 81       	ldd	r26, Y+3	; 0x03
    2042:	bc 81       	ldd	r27, Y+4	; 0x04
    2044:	28 17       	cp	r18, r24
    2046:	39 07       	cpc	r19, r25
    2048:	4a 07       	cpc	r20, r26
    204a:	5b 07       	cpc	r21, r27
    204c:	10 f0       	brcs	.+4      	; 0x2052 <angle_rotate+0xf0>
    204e:	91 e0       	ldi	r25, 0x01	; 1
    2050:	9b 87       	std	Y+11, r25	; 0x0b
    2052:	8c 85       	ldd	r24, Y+12	; 0x0c
    2054:	9b 85       	ldd	r25, Y+11	; 0x0b
    2056:	89 2b       	or	r24, r25
    2058:	88 23       	and	r24, r24
    205a:	99 f2       	breq	.-90     	; 0x2002 <angle_rotate+0xa0>
			break;
	}
	stop(); //Stop robot
    205c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
}
    2060:	2c 96       	adiw	r28, 0x0c	; 12
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	2a 97       	sbiw	r28, 0x0a	; 10
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	9a 87       	std	Y+10, r25	; 0x0a
    2088:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a0 e0       	ldi	r26, 0x00	; 0
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	8d 83       	std	Y+5, r24	; 0x05
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	af 83       	std	Y+7, r26	; 0x07
    2098:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    209a:	19 82       	std	Y+1, r1	; 0x01
    209c:	1a 82       	std	Y+2, r1	; 0x02
    209e:	1b 82       	std	Y+3, r1	; 0x03
    20a0:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	cc 01       	movw	r24, r24
    20a8:	a0 e0       	ldi	r26, 0x00	; 0
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	25 ee       	ldi	r18, 0xE5	; 229
    20be:	30 ed       	ldi	r19, 0xD0	; 208
    20c0:	4a ea       	ldi	r20, 0xAA	; 170
    20c2:	50 e4       	ldi	r21, 0x40	; 64
    20c4:	0e 94 98 35 	call	0x6b30	; 0x6b30 <__divsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	af 83       	std	Y+7, r26	; 0x07
    20d2:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    20d4:	6d 81       	ldd	r22, Y+5	; 0x05
    20d6:	7e 81       	ldd	r23, Y+6	; 0x06
    20d8:	8f 81       	ldd	r24, Y+7	; 0x07
    20da:	98 85       	ldd	r25, Y+8	; 0x08
    20dc:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	ab 83       	std	Y+3, r26	; 0x03
    20ea:	bc 83       	std	Y+4, r27	; 0x04

	ShaftCountRight = 0;
    20ec:	10 92 40 03 	sts	0x0340, r1
    20f0:	10 92 41 03 	sts	0x0341, r1
    20f4:	10 92 42 03 	sts	0x0342, r1
    20f8:	10 92 43 03 	sts	0x0343, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    20fc:	20 91 40 03 	lds	r18, 0x0340
    2100:	30 91 41 03 	lds	r19, 0x0341
    2104:	40 91 42 03 	lds	r20, 0x0342
    2108:	50 91 43 03 	lds	r21, 0x0343
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	ab 81       	ldd	r26, Y+3	; 0x03
    2112:	bc 81       	ldd	r27, Y+4	; 0x04
    2114:	82 17       	cp	r24, r18
    2116:	93 07       	cpc	r25, r19
    2118:	a4 07       	cpc	r26, r20
    211a:	b5 07       	cpc	r27, r21
    211c:	78 f7       	brcc	.-34     	; 0x20fc <linear_distance_mm+0x8a>
		{
			break;
		}
	}
	stop(); //Stop robot
    211e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
}
    2122:	2a 96       	adiw	r28, 0x0a	; 10
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	0f 92       	push	r0
    213a:	0f 92       	push	r0
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
	forward();
    2144:	0e 94 57 0f 	call	0x1eae	; 0x1eae <forward>
	linear_distance_mm(DistanceInMM);
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	0e 94 39 10 	call	0x2072	; 0x2072 <linear_distance_mm>
}
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	0f 92       	push	r0
    2160:	0f 92       	push	r0
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
	back();
    216a:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <back>
	linear_distance_mm(DistanceInMM);
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	0e 94 39 10 	call	0x2072	; 0x2072 <linear_distance_mm>
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	0f 92       	push	r0
    2186:	0f 92       	push	r0
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    2190:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <left>
	angle_rotate(Degrees);
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <angle_rotate>
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <right_degrees>:



void right_degrees(unsigned int Degrees)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	0f 92       	push	r0
    21ac:	0f 92       	push	r0
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    21b6:	0e 94 75 0f 	call	0x1eea	; 0x1eea <right>
	angle_rotate(Degrees);
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <angle_rotate>
}
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	0f 92       	push	r0
    21d2:	0f 92       	push	r0
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	9a 83       	std	Y+2, r25	; 0x02
    21da:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
    21dc:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <soft_left>
	Degrees=Degrees*2;
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	9a 83       	std	Y+2, r25	; 0x02
    21ea:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <angle_rotate>
}
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	0f 92       	push	r0
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
    220e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <soft_right>
	Degrees=Degrees*2;
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	9a 83       	std	Y+2, r25	; 0x02
    221c:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <angle_rotate>
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	0f 92       	push	r0
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
    2240:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <soft_left_2>
	Degrees=Degrees*2;
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	9a 81       	ldd	r25, Y+2	; 0x02
    2254:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <angle_rotate>
}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	0f 92       	push	r0
    2268:	0f 92       	push	r0
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
    2272:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <soft_right_2>
	Degrees=Degrees*2;
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <angle_rotate>
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <port_init>:
//Function to Initialize PORTS
void port_init()
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    229c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <lcd_port_config>
	adc_pin_config();
    22a0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <adc_pin_config>
	motion_pin_config();  //robot motion pins config
    22a4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
    22a8:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
    22ac:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <right_encoder_pin_config>
}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <init_devices>:

//Function to initialize all the devices
void init_devices()
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    22be:	f8 94       	cli
	port_init();  //Initializes all the ports
    22c0:	0e 94 4a 11 	call	0x2294	; 0x2294 <port_init>
	left_position_encoder_interrupt_init();
    22c4:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    22c8:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <right_position_encoder_interrupt_init>
	adc_init();
    22cc:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <adc_init>
	timer5_init();
    22d0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <timer5_init>
	uart_start();
    22d4:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart_start>
	sei();   // Enables the global interrupt
    22d8:	78 94       	sei
}
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <checkobst>:

void checkobst()
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	2e 97       	sbiw	r28, 0x0e	; 14
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
	 sample_sensor();
    22f4:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
    22f8:	7f c0       	rjmp	.+254    	; 0x23f8 <checkobst+0x118>
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			stop();
    22fa:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			_delay_ms(delayvalueonward);
    22fe:	80 91 30 02 	lds	r24, 0x0230
    2302:	90 91 31 02 	lds	r25, 0x0231
    2306:	cc 01       	movw	r24, r24
    2308:	a0 e0       	ldi	r26, 0x00	; 0
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	8b 87       	std	Y+11, r24	; 0x0b
    231a:	9c 87       	std	Y+12, r25	; 0x0c
    231c:	ad 87       	std	Y+13, r26	; 0x0d
    231e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2320:	6b 85       	ldd	r22, Y+11	; 0x0b
    2322:	7c 85       	ldd	r23, Y+12	; 0x0c
    2324:	8d 85       	ldd	r24, Y+13	; 0x0d
    2326:	9e 85       	ldd	r25, Y+14	; 0x0e
    2328:	26 e6       	ldi	r18, 0x66	; 102
    232a:	36 e6       	ldi	r19, 0x66	; 102
    232c:	46 e6       	ldi	r20, 0x66	; 102
    232e:	55 e4       	ldi	r21, 0x45	; 69
    2330:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	8f 83       	std	Y+7, r24	; 0x07
    233a:	98 87       	std	Y+8, r25	; 0x08
    233c:	a9 87       	std	Y+9, r26	; 0x09
    233e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	2c f4       	brge	.+10     	; 0x2362 <checkobst+0x82>
		__ticks = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
    2360:	3f c0       	rjmp	.+126    	; 0x23e0 <checkobst+0x100>
	else if (__tmp > 65535)
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	3f ef       	ldi	r19, 0xFF	; 255
    236e:	4f e7       	ldi	r20, 0x7F	; 127
    2370:	57 e4       	ldi	r21, 0x47	; 71
    2372:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    2376:	18 16       	cp	r1, r24
    2378:	4c f5       	brge	.+82     	; 0x23cc <checkobst+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237a:	6b 85       	ldd	r22, Y+11	; 0x0b
    237c:	7c 85       	ldd	r23, Y+12	; 0x0c
    237e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2380:	9e 85       	ldd	r25, Y+14	; 0x0e
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e2       	ldi	r20, 0x20	; 32
    2388:	51 e4       	ldi	r21, 0x41	; 65
    238a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <checkobst+0xe2>
    23a4:	80 e7       	ldi	r24, 0x70	; 112
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	9c 83       	std	Y+4, r25	; 0x04
    23aa:	8b 83       	std	Y+3, r24	; 0x03
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <checkobst+0xd0>
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c2:	8d 81       	ldd	r24, Y+5	; 0x05
    23c4:	9e 81       	ldd	r25, Y+6	; 0x06
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	69 f7       	brne	.-38     	; 0x23a4 <checkobst+0xc4>
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <checkobst+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <checkobst+0x10c>
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
			sample_sensor();
    23f4:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
}

void checkobst()
{
	 sample_sensor();
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    23f8:	80 91 5a 03 	lds	r24, 0x035A
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	80 91 08 02 	lds	r24, 0x0208
    2404:	90 91 09 02 	lds	r25, 0x0209
    2408:	82 17       	cp	r24, r18
    240a:	93 07       	cpc	r25, r19
    240c:	08 f4       	brcc	.+2      	; 0x2410 <checkobst+0x130>
    240e:	75 cf       	rjmp	.-278    	; 0x22fa <checkobst+0x1a>
    2410:	80 91 5b 03 	lds	r24, 0x035B
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	80 91 86 03 	lds	r24, 0x0386
    241c:	90 91 87 03 	lds	r25, 0x0387
    2420:	28 17       	cp	r18, r24
    2422:	39 07       	cpc	r19, r25
    2424:	08 f4       	brcc	.+2      	; 0x2428 <checkobst+0x148>
    2426:	69 cf       	rjmp	.-302    	; 0x22fa <checkobst+0x1a>
    2428:	80 91 60 03 	lds	r24, 0x0360
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	80 91 86 03 	lds	r24, 0x0386
    2434:	90 91 87 03 	lds	r25, 0x0387
    2438:	28 17       	cp	r18, r24
    243a:	39 07       	cpc	r19, r25
    243c:	08 f4       	brcc	.+2      	; 0x2440 <checkobst+0x160>
    243e:	5d cf       	rjmp	.-326    	; 0x22fa <checkobst+0x1a>
    2440:	80 91 61 03 	lds	r24, 0x0361
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	80 91 86 03 	lds	r24, 0x0386
    244c:	90 91 87 03 	lds	r25, 0x0387
    2450:	28 17       	cp	r18, r24
    2452:	39 07       	cpc	r19, r25
    2454:	08 f4       	brcc	.+2      	; 0x2458 <checkobst+0x178>
    2456:	51 cf       	rjmp	.-350    	; 0x22fa <checkobst+0x1a>
			_delay_ms(delayvalueonward);
			sample_sensor();
		}
		//_delay_ms(2000);

}
    2458:	2e 96       	adiw	r28, 0x0e	; 14
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <checkobst_backpath>:
void checkobst_backpath()
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	2e 97       	sbiw	r28, 0x0e	; 14
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
	 sample_sensor();
    247e:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
    2482:	7f c0       	rjmp	.+254    	; 0x2582 <checkobst_backpath+0x118>
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			stop();
    2484:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			//back_mm(80);
			_delay_ms(delayvalueback);
    2488:	80 91 32 02 	lds	r24, 0x0232
    248c:	90 91 33 02 	lds	r25, 0x0233
    2490:	cc 01       	movw	r24, r24
    2492:	a0 e0       	ldi	r26, 0x00	; 0
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8b 87       	std	Y+11, r24	; 0x0b
    24a4:	9c 87       	std	Y+12, r25	; 0x0c
    24a6:	ad 87       	std	Y+13, r26	; 0x0d
    24a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b2:	26 e6       	ldi	r18, 0x66	; 102
    24b4:	36 e6       	ldi	r19, 0x66	; 102
    24b6:	46 e6       	ldi	r20, 0x66	; 102
    24b8:	55 e4       	ldi	r21, 0x45	; 69
    24ba:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	8f 83       	std	Y+7, r24	; 0x07
    24c4:	98 87       	std	Y+8, r25	; 0x08
    24c6:	a9 87       	std	Y+9, r26	; 0x09
    24c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	2c f4       	brge	.+10     	; 0x24ec <checkobst_backpath+0x82>
		__ticks = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
    24ea:	3f c0       	rjmp	.+126    	; 0x256a <checkobst_backpath+0x100>
	else if (__tmp > 65535)
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    2500:	18 16       	cp	r1, r24
    2502:	4c f5       	brge	.+82     	; 0x2556 <checkobst_backpath+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2504:	6b 85       	ldd	r22, Y+11	; 0x0b
    2506:	7c 85       	ldd	r23, Y+12	; 0x0c
    2508:	8d 85       	ldd	r24, Y+13	; 0x0d
    250a:	9e 85       	ldd	r25, Y+14	; 0x0e
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
    252c:	0f c0       	rjmp	.+30     	; 0x254c <checkobst_backpath+0xe2>
    252e:	80 e7       	ldi	r24, 0x70	; 112
    2530:	91 e0       	ldi	r25, 0x01	; 1
    2532:	9c 83       	std	Y+4, r25	; 0x04
    2534:	8b 83       	std	Y+3, r24	; 0x03
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <checkobst_backpath+0xd0>
    253e:	9c 83       	std	Y+4, r25	; 0x04
    2540:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	69 f7       	brne	.-38     	; 0x252e <checkobst_backpath+0xc4>
    2554:	14 c0       	rjmp	.+40     	; 0x257e <checkobst_backpath+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2556:	6f 81       	ldd	r22, Y+7	; 0x07
    2558:	78 85       	ldd	r23, Y+8	; 0x08
    255a:	89 85       	ldd	r24, Y+9	; 0x09
    255c:	9a 85       	ldd	r25, Y+10	; 0x0a
    255e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	9a 83       	std	Y+2, r25	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <checkobst_backpath+0x10c>
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
			sample_sensor();
    257e:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>

}
void checkobst_backpath()
{
	 sample_sensor();
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    2582:	80 91 5a 03 	lds	r24, 0x035A
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	80 91 08 02 	lds	r24, 0x0208
    258e:	90 91 09 02 	lds	r25, 0x0209
    2592:	82 17       	cp	r24, r18
    2594:	93 07       	cpc	r25, r19
    2596:	08 f4       	brcc	.+2      	; 0x259a <checkobst_backpath+0x130>
    2598:	75 cf       	rjmp	.-278    	; 0x2484 <checkobst_backpath+0x1a>
    259a:	80 91 5b 03 	lds	r24, 0x035B
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	80 91 86 03 	lds	r24, 0x0386
    25a6:	90 91 87 03 	lds	r25, 0x0387
    25aa:	28 17       	cp	r18, r24
    25ac:	39 07       	cpc	r19, r25
    25ae:	08 f4       	brcc	.+2      	; 0x25b2 <checkobst_backpath+0x148>
    25b0:	69 cf       	rjmp	.-302    	; 0x2484 <checkobst_backpath+0x1a>
    25b2:	80 91 60 03 	lds	r24, 0x0360
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	80 91 86 03 	lds	r24, 0x0386
    25be:	90 91 87 03 	lds	r25, 0x0387
    25c2:	28 17       	cp	r18, r24
    25c4:	39 07       	cpc	r19, r25
    25c6:	08 f4       	brcc	.+2      	; 0x25ca <checkobst_backpath+0x160>
    25c8:	5d cf       	rjmp	.-326    	; 0x2484 <checkobst_backpath+0x1a>
    25ca:	80 91 61 03 	lds	r24, 0x0361
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	80 91 86 03 	lds	r24, 0x0386
    25d6:	90 91 87 03 	lds	r25, 0x0387
    25da:	28 17       	cp	r18, r24
    25dc:	39 07       	cpc	r19, r25
    25de:	08 f4       	brcc	.+2      	; 0x25e2 <checkobst_backpath+0x178>
    25e0:	51 cf       	rjmp	.-350    	; 0x2484 <checkobst_backpath+0x1a>
			//back_mm(80);
			_delay_ms(delayvalueback);
			sample_sensor();
		}

}
    25e2:	2e 96       	adiw	r28, 0x0e	; 14
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <route>:




int route()
{
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	c6 54       	subi	r28, 0x46	; 70
    2602:	d0 40       	sbci	r29, 0x00	; 0
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
	Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    260e:	83 e0       	ldi	r24, 0x03	; 3
    2610:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2614:	80 93 45 03 	sts	0x0345, r24
	Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    2618:	82 e0       	ldi	r24, 0x02	; 2
    261a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    261e:	80 93 46 03 	sts	0x0346, r24
	Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2628:	80 93 47 03 	sts	0x0347, r24
  	sample_sensor();
    262c:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
  	flag=0;
    2630:	10 92 44 03 	sts	0x0344, r1
	obstflag=0;
    2634:	10 92 5c 03 	sts	0x035C, r1

	x_coor=currentcountx;
    2638:	80 91 74 03 	lds	r24, 0x0374
    263c:	90 91 75 03 	lds	r25, 0x0375
    2640:	90 93 9c 03 	sts	0x039C, r25
    2644:	80 93 9b 03 	sts	0x039B, r24
	y_coor=currentcounty;
    2648:	80 91 76 03 	lds	r24, 0x0376
    264c:	90 91 77 03 	lds	r25, 0x0377
    2650:	90 93 8b 03 	sts	0x038B, r25
    2654:	80 93 8a 03 	sts	0x038A, r24
	print_sensor(1,1,3);    //Prints value of White Line Sensor1
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	61 e0       	ldi	r22, 0x01	; 1
    265c:	43 e0       	ldi	r20, 0x03	; 3
    265e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <print_sensor>
	print_sensor(1,5,2);    //Prints Value of White Line Sensor2
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	65 e0       	ldi	r22, 0x05	; 5
    2666:	42 e0       	ldi	r20, 0x02	; 2
    2668:	0e 94 57 0e 	call	0x1cae	; 0x1cae <print_sensor>
	print_sensor(1,9,1);    //Prints Value of White Line Sensor3
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	69 e0       	ldi	r22, 0x09	; 9
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0e 94 57 0e 	call	0x1cae	; 0x1cae <print_sensor>
	lcd_print(2,1,currentcountx,2);
    2676:	80 91 74 03 	lds	r24, 0x0374
    267a:	90 91 75 03 	lds	r25, 0x0375
    267e:	9c 01       	movw	r18, r24
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	61 e0       	ldi	r22, 0x01	; 1
    2684:	a9 01       	movw	r20, r18
    2686:	22 e0       	ldi	r18, 0x02	; 2
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
	lcd_print(2,5,currentcounty,2);
    268e:	80 91 76 03 	lds	r24, 0x0376
    2692:	90 91 77 03 	lds	r25, 0x0377
    2696:	9c 01       	movw	r18, r24
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	65 e0       	ldi	r22, 0x05	; 5
    269c:	a9 01       	movw	r20, r18
    269e:	22 e0       	ldi	r18, 0x02	; 2
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    26a6:	9b c0       	rjmp	.+310    	; 0x27de <route+0x1ea>
 //print_sensor(2,4,11);	//Prints Value of Front Sharp Sensor
  //print_sensor(2,8,6);	//Prints Value of Front IR Sensor

  while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			obstflag=1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	80 93 5c 03 	sts	0x035C, r24
			stop();
    26ae:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			buzzer_on();
    26b2:	0e 94 ce 0a 	call	0x159c	; 0x159c <buzzer_on>
			_delay_ms(delayvalueonward);
    26b6:	80 91 30 02 	lds	r24, 0x0230
    26ba:	90 91 31 02 	lds	r25, 0x0231
    26be:	cc 01       	movw	r24, r24
    26c0:	a0 e0       	ldi	r26, 0x00	; 0
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
    26c8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	fe 01       	movw	r30, r28
    26d2:	ed 5b       	subi	r30, 0xBD	; 189
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 83       	st	Z, r24
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	a2 83       	std	Z+2, r26	; 0x02
    26dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26de:	8e 01       	movw	r16, r28
    26e0:	01 5c       	subi	r16, 0xC1	; 193
    26e2:	1f 4f       	sbci	r17, 0xFF	; 255
    26e4:	fe 01       	movw	r30, r28
    26e6:	ed 5b       	subi	r30, 0xBD	; 189
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	60 81       	ld	r22, Z
    26ec:	71 81       	ldd	r23, Z+1	; 0x01
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	26 e6       	ldi	r18, 0x66	; 102
    26f4:	36 e6       	ldi	r19, 0x66	; 102
    26f6:	46 e6       	ldi	r20, 0x66	; 102
    26f8:	55 e4       	ldi	r21, 0x45	; 69
    26fa:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	f8 01       	movw	r30, r16
    2704:	80 83       	st	Z, r24
    2706:	91 83       	std	Z+1, r25	; 0x01
    2708:	a2 83       	std	Z+2, r26	; 0x02
    270a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    270c:	fe 01       	movw	r30, r28
    270e:	ff 96       	adiw	r30, 0x3f	; 63
    2710:	60 81       	ld	r22, Z
    2712:	71 81       	ldd	r23, Z+1	; 0x01
    2714:	82 81       	ldd	r24, Z+2	; 0x02
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e8       	ldi	r20, 0x80	; 128
    271e:	5f e3       	ldi	r21, 0x3F	; 63
    2720:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    2724:	88 23       	and	r24, r24
    2726:	2c f4       	brge	.+10     	; 0x2732 <route+0x13e>
		__ticks = 1;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	9e af       	std	Y+62, r25	; 0x3e
    272e:	8d af       	std	Y+61, r24	; 0x3d
    2730:	46 c0       	rjmp	.+140    	; 0x27be <route+0x1ca>
	else if (__tmp > 65535)
    2732:	fe 01       	movw	r30, r28
    2734:	ff 96       	adiw	r30, 0x3f	; 63
    2736:	60 81       	ld	r22, Z
    2738:	71 81       	ldd	r23, Z+1	; 0x01
    273a:	82 81       	ldd	r24, Z+2	; 0x02
    273c:	93 81       	ldd	r25, Z+3	; 0x03
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	64 f5       	brge	.+88     	; 0x27a6 <route+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	fe 01       	movw	r30, r28
    2750:	ed 5b       	subi	r30, 0xBD	; 189
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e2       	ldi	r20, 0x20	; 32
    2762:	51 e4       	ldi	r21, 0x41	; 65
    2764:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9e af       	std	Y+62, r25	; 0x3e
    277a:	8d af       	std	Y+61, r24	; 0x3d
    277c:	0f c0       	rjmp	.+30     	; 0x279c <route+0x1a8>
    277e:	80 e7       	ldi	r24, 0x70	; 112
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	9c af       	std	Y+60, r25	; 0x3c
    2784:	8b af       	std	Y+59, r24	; 0x3b
    2786:	8b ad       	ldd	r24, Y+59	; 0x3b
    2788:	9c ad       	ldd	r25, Y+60	; 0x3c
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <route+0x196>
    278e:	9c af       	std	Y+60, r25	; 0x3c
    2790:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2792:	8d ad       	ldd	r24, Y+61	; 0x3d
    2794:	9e ad       	ldd	r25, Y+62	; 0x3e
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	9e af       	std	Y+62, r25	; 0x3e
    279a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279c:	8d ad       	ldd	r24, Y+61	; 0x3d
    279e:	9e ad       	ldd	r25, Y+62	; 0x3e
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	69 f7       	brne	.-38     	; 0x277e <route+0x18a>
    27a4:	16 c0       	rjmp	.+44     	; 0x27d2 <route+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a6:	fe 01       	movw	r30, r28
    27a8:	ff 96       	adiw	r30, 0x3f	; 63
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e af       	std	Y+62, r25	; 0x3e
    27bc:	8d af       	std	Y+61, r24	; 0x3d
    27be:	8d ad       	ldd	r24, Y+61	; 0x3d
    27c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    27c2:	9a af       	std	Y+58, r25	; 0x3a
    27c4:	89 af       	std	Y+57, r24	; 0x39
    27c6:	89 ad       	ldd	r24, Y+57	; 0x39
    27c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <route+0x1d6>
    27ce:	9a af       	std	Y+58, r25	; 0x3a
    27d0:	89 af       	std	Y+57, r24	; 0x39
			buzzer_off();
    27d2:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <buzzer_off>
			sample_sensor();
    27d6:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
			//handle_obst_onward();
			checkobst();
    27da:	0e 94 70 11 	call	0x22e0	; 0x22e0 <checkobst>
	lcd_print(2,1,currentcountx,2);
	lcd_print(2,5,currentcounty,2);
 //print_sensor(2,4,11);	//Prints Value of Front Sharp Sensor
  //print_sensor(2,8,6);	//Prints Value of Front IR Sensor

  while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    27de:	80 91 5a 03 	lds	r24, 0x035A
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	80 91 08 02 	lds	r24, 0x0208
    27ea:	90 91 09 02 	lds	r25, 0x0209
    27ee:	82 17       	cp	r24, r18
    27f0:	93 07       	cpc	r25, r19
    27f2:	08 f4       	brcc	.+2      	; 0x27f6 <route+0x202>
    27f4:	59 cf       	rjmp	.-334    	; 0x26a8 <route+0xb4>
    27f6:	80 91 5b 03 	lds	r24, 0x035B
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	80 91 86 03 	lds	r24, 0x0386
    2802:	90 91 87 03 	lds	r25, 0x0387
    2806:	28 17       	cp	r18, r24
    2808:	39 07       	cpc	r19, r25
    280a:	08 f4       	brcc	.+2      	; 0x280e <route+0x21a>
    280c:	4d cf       	rjmp	.-358    	; 0x26a8 <route+0xb4>
    280e:	80 91 60 03 	lds	r24, 0x0360
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	80 91 86 03 	lds	r24, 0x0386
    281a:	90 91 87 03 	lds	r25, 0x0387
    281e:	28 17       	cp	r18, r24
    2820:	39 07       	cpc	r19, r25
    2822:	08 f4       	brcc	.+2      	; 0x2826 <route+0x232>
    2824:	41 cf       	rjmp	.-382    	; 0x26a8 <route+0xb4>
    2826:	80 91 61 03 	lds	r24, 0x0361
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	80 91 86 03 	lds	r24, 0x0386
    2832:	90 91 87 03 	lds	r25, 0x0387
    2836:	28 17       	cp	r18, r24
    2838:	39 07       	cpc	r19, r25
    283a:	08 f4       	brcc	.+2      	; 0x283e <route+0x24a>
    283c:	35 cf       	rjmp	.-406    	; 0x26a8 <route+0xb4>
			//handle_obst_onward();
			checkobst();
			
		}

	if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    283e:	80 91 5a 03 	lds	r24, 0x035A
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	80 91 08 02 	lds	r24, 0x0208
    284a:	90 91 09 02 	lds	r25, 0x0209
    284e:	82 17       	cp	r24, r18
    2850:	93 07       	cpc	r25, r19
    2852:	08 f1       	brcs	.+66     	; 0x2896 <route+0x2a2>
    2854:	80 91 5b 03 	lds	r24, 0x035B
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	80 91 86 03 	lds	r24, 0x0386
    2860:	90 91 87 03 	lds	r25, 0x0387
    2864:	28 17       	cp	r18, r24
    2866:	39 07       	cpc	r19, r25
    2868:	b0 f0       	brcs	.+44     	; 0x2896 <route+0x2a2>
    286a:	80 91 60 03 	lds	r24, 0x0360
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	80 91 86 03 	lds	r24, 0x0386
    2876:	90 91 87 03 	lds	r25, 0x0387
    287a:	28 17       	cp	r18, r24
    287c:	39 07       	cpc	r19, r25
    287e:	58 f0       	brcs	.+22     	; 0x2896 <route+0x2a2>
    2880:	80 91 61 03 	lds	r24, 0x0361
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	80 91 86 03 	lds	r24, 0x0386
    288c:	90 91 87 03 	lds	r25, 0x0387
    2890:	28 17       	cp	r18, r24
    2892:	39 07       	cpc	r19, r25
    2894:	20 f4       	brcc	.+8      	; 0x289e <route+0x2aa>
		{
			obstflag=1;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	80 93 5c 03 	sts	0x035C, r24
    289c:	25 c0       	rjmp	.+74     	; 0x28e8 <route+0x2f4>
		}
	else
	{
		obstflag=0;
    289e:	10 92 5c 03 	sts	0x035C, r1
    28a2:	22 c0       	rjmp	.+68     	; 0x28e8 <route+0x2f4>



	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
	{
		checkobst();
    28a4:	0e 94 70 11 	call	0x22e0	; 0x22e0 <checkobst>
		flag=1;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	80 93 44 03 	sts	0x0344, r24
		last_choice=1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	90 93 57 03 	sts	0x0357, r25
    28b6:	80 93 56 03 	sts	0x0356, r24
		//flag2=1;
		forward_mm(5);
    28ba:	85 e0       	ldi	r24, 0x05	; 5
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		//velocity(120,120);
		back_s=0;
    28c2:	10 92 79 03 	sts	0x0379, r1
    28c6:	10 92 78 03 	sts	0x0378, r1
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    28ca:	83 e0       	ldi	r24, 0x03	; 3
    28cc:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    28d0:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    28da:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    28e4:	80 93 47 03 	sts	0x0347, r24
	}




	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
    28e8:	80 91 46 03 	lds	r24, 0x0346
    28ec:	80 34       	cpi	r24, 0x40	; 64
    28ee:	80 f1       	brcs	.+96     	; 0x2950 <route+0x35c>
    28f0:	80 91 45 03 	lds	r24, 0x0345
    28f4:	80 34       	cpi	r24, 0x40	; 64
    28f6:	60 f5       	brcc	.+88     	; 0x2950 <route+0x35c>
    28f8:	80 91 47 03 	lds	r24, 0x0347
    28fc:	80 34       	cpi	r24, 0x40	; 64
    28fe:	40 f5       	brcc	.+80     	; 0x2950 <route+0x35c>
    2900:	80 91 5c 03 	lds	r24, 0x035C
    2904:	88 23       	and	r24, r24
    2906:	71 f2       	breq	.-100    	; 0x28a4 <route+0x2b0>
    2908:	23 c0       	rjmp	.+70     	; 0x2950 <route+0x35c>
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
	{
		checkobst();
    290a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <checkobst>
		last_choice=2;
    290e:	82 e0       	ldi	r24, 0x02	; 2
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	90 93 57 03 	sts	0x0357, r25
    2916:	80 93 56 03 	sts	0x0356, r24
		left_degrees(2);
    291a:	82 e0       	ldi	r24, 0x02	; 2
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
		forward_mm(5);
    2922:	85 e0       	ldi	r24, 0x05	; 5
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		back_s=0;
    292a:	10 92 79 03 	sts	0x0379, r1
    292e:	10 92 78 03 	sts	0x0378, r1
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    2932:	83 e0       	ldi	r24, 0x03	; 3
    2934:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2938:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    293c:	82 e0       	ldi	r24, 0x02	; 2
    293e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2942:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    294c:	80 93 47 03 	sts	0x0347, r24
		back_s=0;
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
    2950:	80 91 46 03 	lds	r24, 0x0346
    2954:	80 34       	cpi	r24, 0x40	; 64
    2956:	80 f1       	brcs	.+96     	; 0x29b8 <route+0x3c4>
    2958:	80 91 45 03 	lds	r24, 0x0345
    295c:	80 34       	cpi	r24, 0x40	; 64
    295e:	60 f1       	brcs	.+88     	; 0x29b8 <route+0x3c4>
    2960:	80 91 47 03 	lds	r24, 0x0347
    2964:	80 34       	cpi	r24, 0x40	; 64
    2966:	40 f5       	brcc	.+80     	; 0x29b8 <route+0x3c4>
    2968:	80 91 5c 03 	lds	r24, 0x035C
    296c:	88 23       	and	r24, r24
    296e:	69 f2       	breq	.-102    	; 0x290a <route+0x316>
    2970:	23 c0       	rjmp	.+70     	; 0x29b8 <route+0x3c4>
		Right_white_line = ADC_Conversion(1);

	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		checkobst();
    2972:	0e 94 70 11 	call	0x22e0	; 0x22e0 <checkobst>
		last_choice=3;
    2976:	83 e0       	ldi	r24, 0x03	; 3
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	90 93 57 03 	sts	0x0357, r25
    297e:	80 93 56 03 	sts	0x0356, r24
		right_degrees(2);
    2982:	82 e0       	ldi	r24, 0x02	; 2
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
		forward_mm(5);
    298a:	85 e0       	ldi	r24, 0x05	; 5
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		back_s=0;
    2992:	10 92 79 03 	sts	0x0379, r1
    2996:	10 92 78 03 	sts	0x0378, r1
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    299a:	83 e0       	ldi	r24, 0x03	; 3
    299c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    29a0:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    29aa:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    29b4:	80 93 47 03 	sts	0x0347, r24
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);

	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
    29b8:	80 91 46 03 	lds	r24, 0x0346
    29bc:	80 34       	cpi	r24, 0x40	; 64
    29be:	80 f1       	brcs	.+96     	; 0x2a20 <route+0x42c>
    29c0:	80 91 45 03 	lds	r24, 0x0345
    29c4:	80 34       	cpi	r24, 0x40	; 64
    29c6:	60 f5       	brcc	.+88     	; 0x2a20 <route+0x42c>
    29c8:	80 91 47 03 	lds	r24, 0x0347
    29cc:	80 34       	cpi	r24, 0x40	; 64
    29ce:	40 f1       	brcs	.+80     	; 0x2a20 <route+0x42c>
    29d0:	80 91 5c 03 	lds	r24, 0x035C
    29d4:	88 23       	and	r24, r24
    29d6:	69 f2       	breq	.-102    	; 0x2972 <route+0x37e>
    29d8:	23 c0       	rjmp	.+70     	; 0x2a20 <route+0x42c>
		Right_white_line = ADC_Conversion(1);

	}
	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		checkobst();
    29da:	0e 94 70 11 	call	0x22e0	; 0x22e0 <checkobst>
		last_choice=4;
    29de:	84 e0       	ldi	r24, 0x04	; 4
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	90 93 57 03 	sts	0x0357, r25
    29e6:	80 93 56 03 	sts	0x0356, r24
		right_degrees(5);
    29ea:	85 e0       	ldi	r24, 0x05	; 5
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
		back_s=0;
    29f2:	10 92 79 03 	sts	0x0379, r1
    29f6:	10 92 78 03 	sts	0x0378, r1
		forward_mm(2);
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    2a02:	83 e0       	ldi	r24, 0x03	; 3
    2a04:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2a08:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2a12:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2a1c:	80 93 47 03 	sts	0x0347, r24
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);

	}
	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
    2a20:	80 91 46 03 	lds	r24, 0x0346
    2a24:	80 34       	cpi	r24, 0x40	; 64
    2a26:	80 f5       	brcc	.+96     	; 0x2a88 <route+0x494>
    2a28:	80 91 45 03 	lds	r24, 0x0345
    2a2c:	80 34       	cpi	r24, 0x40	; 64
    2a2e:	60 f5       	brcc	.+88     	; 0x2a88 <route+0x494>
    2a30:	80 91 47 03 	lds	r24, 0x0347
    2a34:	80 34       	cpi	r24, 0x40	; 64
    2a36:	40 f1       	brcs	.+80     	; 0x2a88 <route+0x494>
    2a38:	80 91 5c 03 	lds	r24, 0x035C
    2a3c:	88 23       	and	r24, r24
    2a3e:	69 f2       	breq	.-102    	; 0x29da <route+0x3e6>
    2a40:	23 c0       	rjmp	.+70     	; 0x2a88 <route+0x494>
		Right_white_line = ADC_Conversion(1);

	}
	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
	{
		checkobst();
    2a42:	0e 94 70 11 	call	0x22e0	; 0x22e0 <checkobst>
		last_choice=5;
    2a46:	85 e0       	ldi	r24, 0x05	; 5
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	90 93 57 03 	sts	0x0357, r25
    2a4e:	80 93 56 03 	sts	0x0356, r24
		left_degrees(5);
    2a52:	85 e0       	ldi	r24, 0x05	; 5
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
		back_s=0;
    2a5a:	10 92 79 03 	sts	0x0379, r1
    2a5e:	10 92 78 03 	sts	0x0378, r1
		forward_mm(2);
    2a62:	82 e0       	ldi	r24, 0x02	; 2
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    2a6a:	83 e0       	ldi	r24, 0x03	; 3
    2a6c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2a70:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2a7a:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2a84:	80 93 47 03 	sts	0x0347, r24
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);

	}
	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
    2a88:	80 91 46 03 	lds	r24, 0x0346
    2a8c:	80 34       	cpi	r24, 0x40	; 64
    2a8e:	60 f4       	brcc	.+24     	; 0x2aa8 <route+0x4b4>
    2a90:	80 91 45 03 	lds	r24, 0x0345
    2a94:	80 34       	cpi	r24, 0x40	; 64
    2a96:	40 f0       	brcs	.+16     	; 0x2aa8 <route+0x4b4>
    2a98:	80 91 47 03 	lds	r24, 0x0347
    2a9c:	81 34       	cpi	r24, 0x41	; 65
    2a9e:	20 f4       	brcc	.+8      	; 0x2aa8 <route+0x4b4>
    2aa0:	80 91 5c 03 	lds	r24, 0x035C
    2aa4:	88 23       	and	r24, r24
    2aa6:	69 f2       	breq	.-102    	; 0x2a42 <route+0x44e>

	}
	/*Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
  Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
  Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor*/
	if((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (flag==0) && (last_choice!=6) && (last_choice!=9) && (obstflag==0) )
    2aa8:	80 91 46 03 	lds	r24, 0x0346
    2aac:	80 34       	cpi	r24, 0x40	; 64
    2aae:	08 f4       	brcc	.+2      	; 0x2ab2 <route+0x4be>
    2ab0:	1f c2       	rjmp	.+1086   	; 0x2ef0 <route+0x8fc>
    2ab2:	80 91 45 03 	lds	r24, 0x0345
    2ab6:	80 34       	cpi	r24, 0x40	; 64
    2ab8:	08 f4       	brcc	.+2      	; 0x2abc <route+0x4c8>
    2aba:	1a c2       	rjmp	.+1076   	; 0x2ef0 <route+0x8fc>
    2abc:	80 91 47 03 	lds	r24, 0x0347
    2ac0:	80 34       	cpi	r24, 0x40	; 64
    2ac2:	08 f4       	brcc	.+2      	; 0x2ac6 <route+0x4d2>
    2ac4:	15 c2       	rjmp	.+1066   	; 0x2ef0 <route+0x8fc>
    2ac6:	80 91 44 03 	lds	r24, 0x0344
    2aca:	88 23       	and	r24, r24
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <route+0x4dc>
    2ace:	10 c2       	rjmp	.+1056   	; 0x2ef0 <route+0x8fc>
    2ad0:	80 91 56 03 	lds	r24, 0x0356
    2ad4:	90 91 57 03 	lds	r25, 0x0357
    2ad8:	86 30       	cpi	r24, 0x06	; 6
    2ada:	91 05       	cpc	r25, r1
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <route+0x4ec>
    2ade:	08 c2       	rjmp	.+1040   	; 0x2ef0 <route+0x8fc>
    2ae0:	80 91 56 03 	lds	r24, 0x0356
    2ae4:	90 91 57 03 	lds	r25, 0x0357
    2ae8:	89 30       	cpi	r24, 0x09	; 9
    2aea:	91 05       	cpc	r25, r1
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <route+0x4fc>
    2aee:	00 c2       	rjmp	.+1024   	; 0x2ef0 <route+0x8fc>
    2af0:	80 91 5c 03 	lds	r24, 0x035C
    2af4:	88 23       	and	r24, r24
    2af6:	09 f0       	breq	.+2      	; 0x2afa <route+0x506>
    2af8:	fb c1       	rjmp	.+1014   	; 0x2ef0 <route+0x8fc>
	{
		last_choice=6;
    2afa:	86 e0       	ldi	r24, 0x06	; 6
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	90 93 57 03 	sts	0x0357, r25
    2b02:	80 93 56 03 	sts	0x0356, r24
		flag=1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	80 93 44 03 	sts	0x0344, r24
		back_s=0;
    2b0c:	10 92 79 03 	sts	0x0379, r1
    2b10:	10 92 78 03 	sts	0x0378, r1
		stop();
    2b14:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
		if(flagturn==0)
    2b18:	80 91 80 03 	lds	r24, 0x0380
    2b1c:	90 91 81 03 	lds	r25, 0x0381
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	49 f4       	brne	.+18     	; 0x2b36 <route+0x542>
		{
			currentcountx = currentcountx+1;
    2b24:	80 91 74 03 	lds	r24, 0x0374
    2b28:	90 91 75 03 	lds	r25, 0x0375
    2b2c:	01 96       	adiw	r24, 0x01	; 1
    2b2e:	90 93 75 03 	sts	0x0375, r25
    2b32:	80 93 74 03 	sts	0x0374, r24
		}
		if(flagturn==1)
    2b36:	80 91 80 03 	lds	r24, 0x0380
    2b3a:	90 91 81 03 	lds	r25, 0x0381
    2b3e:	81 30       	cpi	r24, 0x01	; 1
    2b40:	91 05       	cpc	r25, r1
    2b42:	d1 f4       	brne	.+52     	; 0x2b78 <route+0x584>
		{
			if(take_left==1)
    2b44:	80 91 5d 03 	lds	r24, 0x035D
    2b48:	90 91 5e 03 	lds	r25, 0x035E
    2b4c:	81 30       	cpi	r24, 0x01	; 1
    2b4e:	91 05       	cpc	r25, r1
    2b50:	51 f4       	brne	.+20     	; 0x2b66 <route+0x572>
			{
				currentcounty=currentcounty+1;
    2b52:	80 91 76 03 	lds	r24, 0x0376
    2b56:	90 91 77 03 	lds	r25, 0x0377
    2b5a:	01 96       	adiw	r24, 0x01	; 1
    2b5c:	90 93 77 03 	sts	0x0377, r25
    2b60:	80 93 76 03 	sts	0x0376, r24
    2b64:	09 c0       	rjmp	.+18     	; 0x2b78 <route+0x584>
			}
			else 
			{
				currentcounty=currentcounty-1;
    2b66:	80 91 76 03 	lds	r24, 0x0376
    2b6a:	90 91 77 03 	lds	r25, 0x0377
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	90 93 77 03 	sts	0x0377, r25
    2b74:	80 93 76 03 	sts	0x0376, r24
		//if(flag2==1)
		//{
		//currentcountx = currentcountx + 1;
		//}
		//flag2=2;
		forward_mm(5);
    2b78:	85 e0       	ldi	r24, 0x05	; 5
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		if((currentcountx == des_countx) && x_reached==0 && (obstflag==0))
    2b80:	20 91 74 03 	lds	r18, 0x0374
    2b84:	30 91 75 03 	lds	r19, 0x0375
    2b88:	80 91 04 02 	lds	r24, 0x0204
    2b8c:	90 91 05 02 	lds	r25, 0x0205
    2b90:	28 17       	cp	r18, r24
    2b92:	39 07       	cpc	r19, r25
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <route+0x5a4>
    2b96:	a4 c0       	rjmp	.+328    	; 0x2ce0 <route+0x6ec>
    2b98:	80 91 7a 03 	lds	r24, 0x037A
    2b9c:	90 91 7b 03 	lds	r25, 0x037B
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	09 f0       	breq	.+2      	; 0x2ba6 <route+0x5b2>
    2ba4:	9d c0       	rjmp	.+314    	; 0x2ce0 <route+0x6ec>
    2ba6:	80 91 5c 03 	lds	r24, 0x035C
    2baa:	88 23       	and	r24, r24
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <route+0x5bc>
    2bae:	98 c0       	rjmp	.+304    	; 0x2ce0 <route+0x6ec>
		{
			//_delay_ms(500);
			flagturn=1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	90 93 81 03 	sts	0x0381, r25
    2bb8:	80 93 80 03 	sts	0x0380, r24
			forward_mm(70); //Moves robot forward 100mm
    2bbc:	86 e4       	ldi	r24, 0x46	; 70
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
			if(take_left==1)
    2bc4:	80 91 5d 03 	lds	r24, 0x035D
    2bc8:	90 91 5e 03 	lds	r25, 0x035E
    2bcc:	81 30       	cpi	r24, 0x01	; 1
    2bce:	91 05       	cpc	r25, r1
    2bd0:	29 f4       	brne	.+10     	; 0x2bdc <route+0x5e8>
			{
				left_degrees(90);
    2bd2:	8a e5       	ldi	r24, 0x5A	; 90
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
    2bda:	04 c0       	rjmp	.+8      	; 0x2be4 <route+0x5f0>
			}
			else
			{
				right_degrees(90);
    2bdc:	8a e5       	ldi	r24, 0x5A	; 90
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	aa ef       	ldi	r26, 0xFA	; 250
    2bea:	b3 e4       	ldi	r27, 0x43	; 67
    2bec:	8d ab       	std	Y+53, r24	; 0x35
    2bee:	9e ab       	std	Y+54, r25	; 0x36
    2bf0:	af ab       	std	Y+55, r26	; 0x37
    2bf2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf4:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf6:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bfa:	98 ad       	ldd	r25, Y+56	; 0x38
    2bfc:	26 e6       	ldi	r18, 0x66	; 102
    2bfe:	36 e6       	ldi	r19, 0x66	; 102
    2c00:	46 e6       	ldi	r20, 0x66	; 102
    2c02:	55 e4       	ldi	r21, 0x45	; 69
    2c04:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	89 ab       	std	Y+49, r24	; 0x31
    2c0e:	9a ab       	std	Y+50, r25	; 0x32
    2c10:	ab ab       	std	Y+51, r26	; 0x33
    2c12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c14:	69 a9       	ldd	r22, Y+49	; 0x31
    2c16:	7a a9       	ldd	r23, Y+50	; 0x32
    2c18:	8b a9       	ldd	r24, Y+51	; 0x33
    2c1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    2c28:	88 23       	and	r24, r24
    2c2a:	2c f4       	brge	.+10     	; 0x2c36 <route+0x642>
		__ticks = 1;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	98 ab       	std	Y+48, r25	; 0x30
    2c32:	8f a7       	std	Y+47, r24	; 0x2f
    2c34:	3f c0       	rjmp	.+126    	; 0x2cb4 <route+0x6c0>
	else if (__tmp > 65535)
    2c36:	69 a9       	ldd	r22, Y+49	; 0x31
    2c38:	7a a9       	ldd	r23, Y+50	; 0x32
    2c3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	3f ef       	ldi	r19, 0xFF	; 255
    2c42:	4f e7       	ldi	r20, 0x7F	; 127
    2c44:	57 e4       	ldi	r21, 0x47	; 71
    2c46:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    2c4a:	18 16       	cp	r1, r24
    2c4c:	4c f5       	brge	.+82     	; 0x2ca0 <route+0x6ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c50:	7e a9       	ldd	r23, Y+54	; 0x36
    2c52:	8f a9       	ldd	r24, Y+55	; 0x37
    2c54:	98 ad       	ldd	r25, Y+56	; 0x38
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e2       	ldi	r20, 0x20	; 32
    2c5c:	51 e4       	ldi	r21, 0x41	; 65
    2c5e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	98 ab       	std	Y+48, r25	; 0x30
    2c74:	8f a7       	std	Y+47, r24	; 0x2f
    2c76:	0f c0       	rjmp	.+30     	; 0x2c96 <route+0x6a2>
    2c78:	80 e7       	ldi	r24, 0x70	; 112
    2c7a:	91 e0       	ldi	r25, 0x01	; 1
    2c7c:	9e a7       	std	Y+46, r25	; 0x2e
    2c7e:	8d a7       	std	Y+45, r24	; 0x2d
    2c80:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c82:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <route+0x690>
    2c88:	9e a7       	std	Y+46, r25	; 0x2e
    2c8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c8e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	98 ab       	std	Y+48, r25	; 0x30
    2c94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c98:	98 a9       	ldd	r25, Y+48	; 0x30
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	69 f7       	brne	.-38     	; 0x2c78 <route+0x684>
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <route+0x6d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ca4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ca6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca8:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	98 ab       	std	Y+48, r25	; 0x30
    2cb2:	8f a7       	std	Y+47, r24	; 0x2f
    2cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb8:	9c a7       	std	Y+44, r25	; 0x2c
    2cba:	8b a7       	std	Y+43, r24	; 0x2b
    2cbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <route+0x6cc>
    2cc4:	9c a7       	std	Y+44, r25	; 0x2c
    2cc6:	8b a7       	std	Y+43, r24	; 0x2b
			}
			_delay_ms(500);
			forward();
    2cc8:	0e 94 57 0f 	call	0x1eae	; 0x1eae <forward>
			x_reached=1;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	90 93 7b 03 	sts	0x037B, r25
    2cd4:	80 93 7a 03 	sts	0x037A, r24
			forward_mm(25);
    2cd8:	89 e1       	ldi	r24, 0x19	; 25
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		}
		if(take_left==1)
    2ce0:	80 91 5d 03 	lds	r24, 0x035D
    2ce4:	90 91 5e 03 	lds	r25, 0x035E
    2ce8:	81 30       	cpi	r24, 0x01	; 1
    2cea:	91 05       	cpc	r25, r1
    2cec:	09 f0       	breq	.+2      	; 0x2cf0 <route+0x6fc>
    2cee:	7f c0       	rjmp	.+254    	; 0x2dee <route+0x7fa>
		{
			if((currentcounty == des_county))
    2cf0:	20 91 76 03 	lds	r18, 0x0376
    2cf4:	30 91 77 03 	lds	r19, 0x0377
    2cf8:	80 91 06 02 	lds	r24, 0x0206
    2cfc:	90 91 07 02 	lds	r25, 0x0207
    2d00:	28 17       	cp	r18, r24
    2d02:	39 07       	cpc	r19, r25
    2d04:	09 f0       	breq	.+2      	; 0x2d08 <route+0x714>
    2d06:	f4 c0       	rjmp	.+488    	; 0x2ef0 <route+0x8fc>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	aa ef       	ldi	r26, 0xFA	; 250
    2d0e:	b3 e4       	ldi	r27, 0x43	; 67
    2d10:	8f a3       	std	Y+39, r24	; 0x27
    2d12:	98 a7       	std	Y+40, r25	; 0x28
    2d14:	a9 a7       	std	Y+41, r26	; 0x29
    2d16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d18:	6f a1       	ldd	r22, Y+39	; 0x27
    2d1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d20:	26 e6       	ldi	r18, 0x66	; 102
    2d22:	36 e6       	ldi	r19, 0x66	; 102
    2d24:	46 e6       	ldi	r20, 0x66	; 102
    2d26:	55 e4       	ldi	r21, 0x45	; 69
    2d28:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	8b a3       	std	Y+35, r24	; 0x23
    2d32:	9c a3       	std	Y+36, r25	; 0x24
    2d34:	ad a3       	std	Y+37, r26	; 0x25
    2d36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d38:	6b a1       	ldd	r22, Y+35	; 0x23
    2d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e8       	ldi	r20, 0x80	; 128
    2d46:	5f e3       	ldi	r21, 0x3F	; 63
    2d48:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    2d4c:	88 23       	and	r24, r24
    2d4e:	2c f4       	brge	.+10     	; 0x2d5a <route+0x766>
		__ticks = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9a a3       	std	Y+34, r25	; 0x22
    2d56:	89 a3       	std	Y+33, r24	; 0x21
    2d58:	3f c0       	rjmp	.+126    	; 0x2dd8 <route+0x7e4>
	else if (__tmp > 65535)
    2d5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d60:	9e a1       	ldd	r25, Y+38	; 0x26
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	3f ef       	ldi	r19, 0xFF	; 255
    2d66:	4f e7       	ldi	r20, 0x7F	; 127
    2d68:	57 e4       	ldi	r21, 0x47	; 71
    2d6a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    2d6e:	18 16       	cp	r1, r24
    2d70:	4c f5       	brge	.+82     	; 0x2dc4 <route+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d72:	6f a1       	ldd	r22, Y+39	; 0x27
    2d74:	78 a5       	ldd	r23, Y+40	; 0x28
    2d76:	89 a5       	ldd	r24, Y+41	; 0x29
    2d78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	40 e2       	ldi	r20, 0x20	; 32
    2d80:	51 e4       	ldi	r21, 0x41	; 65
    2d82:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9a a3       	std	Y+34, r25	; 0x22
    2d98:	89 a3       	std	Y+33, r24	; 0x21
    2d9a:	0f c0       	rjmp	.+30     	; 0x2dba <route+0x7c6>
    2d9c:	80 e7       	ldi	r24, 0x70	; 112
    2d9e:	91 e0       	ldi	r25, 0x01	; 1
    2da0:	98 a3       	std	Y+32, r25	; 0x20
    2da2:	8f 8f       	std	Y+31, r24	; 0x1f
    2da4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2da6:	98 a1       	ldd	r25, Y+32	; 0x20
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <route+0x7b4>
    2dac:	98 a3       	std	Y+32, r25	; 0x20
    2dae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db0:	89 a1       	ldd	r24, Y+33	; 0x21
    2db2:	9a a1       	ldd	r25, Y+34	; 0x22
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	9a a3       	std	Y+34, r25	; 0x22
    2db8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dba:	89 a1       	ldd	r24, Y+33	; 0x21
    2dbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	69 f7       	brne	.-38     	; 0x2d9c <route+0x7a8>
    2dc2:	96 c0       	rjmp	.+300    	; 0x2ef0 <route+0x8fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2dc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2dc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dca:	9e a1       	ldd	r25, Y+38	; 0x26
    2dcc:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	9a a3       	std	Y+34, r25	; 0x22
    2dd6:	89 a3       	std	Y+33, r24	; 0x21
    2dd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dda:	9a a1       	ldd	r25, Y+34	; 0x22
    2ddc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dde:	8d 8f       	std	Y+29, r24	; 0x1d
    2de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2de2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <route+0x7f0>
    2de8:	9e 8f       	std	Y+30, r25	; 0x1e
    2dea:	8d 8f       	std	Y+29, r24	; 0x1d
    2dec:	81 c0       	rjmp	.+258    	; 0x2ef0 <route+0x8fc>
				_delay_ms(500);
			}
		}
		else
		{
			if((currentcounty == (des_county+1)))
    2dee:	80 91 06 02 	lds	r24, 0x0206
    2df2:	90 91 07 02 	lds	r25, 0x0207
    2df6:	9c 01       	movw	r18, r24
    2df8:	2f 5f       	subi	r18, 0xFF	; 255
    2dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfc:	80 91 76 03 	lds	r24, 0x0376
    2e00:	90 91 77 03 	lds	r25, 0x0377
    2e04:	28 17       	cp	r18, r24
    2e06:	39 07       	cpc	r19, r25
    2e08:	09 f0       	breq	.+2      	; 0x2e0c <route+0x818>
    2e0a:	72 c0       	rjmp	.+228    	; 0x2ef0 <route+0x8fc>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	aa ef       	ldi	r26, 0xFA	; 250
    2e12:	b3 e4       	ldi	r27, 0x43	; 67
    2e14:	89 8f       	std	Y+25, r24	; 0x19
    2e16:	9a 8f       	std	Y+26, r25	; 0x1a
    2e18:	ab 8f       	std	Y+27, r26	; 0x1b
    2e1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e24:	26 e6       	ldi	r18, 0x66	; 102
    2e26:	36 e6       	ldi	r19, 0x66	; 102
    2e28:	46 e6       	ldi	r20, 0x66	; 102
    2e2a:	55 e4       	ldi	r21, 0x45	; 69
    2e2c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	8d 8b       	std	Y+21, r24	; 0x15
    2e36:	9e 8b       	std	Y+22, r25	; 0x16
    2e38:	af 8b       	std	Y+23, r26	; 0x17
    2e3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e40:	8f 89       	ldd	r24, Y+23	; 0x17
    2e42:	98 8d       	ldd	r25, Y+24	; 0x18
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	2c f4       	brge	.+10     	; 0x2e5e <route+0x86a>
		__ticks = 1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	9c 8b       	std	Y+20, r25	; 0x14
    2e5a:	8b 8b       	std	Y+19, r24	; 0x13
    2e5c:	3f c0       	rjmp	.+126    	; 0x2edc <route+0x8e8>
	else if (__tmp > 65535)
    2e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e60:	7e 89       	ldd	r23, Y+22	; 0x16
    2e62:	8f 89       	ldd	r24, Y+23	; 0x17
    2e64:	98 8d       	ldd	r25, Y+24	; 0x18
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	57 e4       	ldi	r21, 0x47	; 71
    2e6e:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	4c f5       	brge	.+82     	; 0x2ec8 <route+0x8d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e76:	69 8d       	ldd	r22, Y+25	; 0x19
    2e78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9c 8b       	std	Y+20, r25	; 0x14
    2e9c:	8b 8b       	std	Y+19, r24	; 0x13
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <route+0x8ca>
    2ea0:	80 e7       	ldi	r24, 0x70	; 112
    2ea2:	91 e0       	ldi	r25, 0x01	; 1
    2ea4:	9a 8b       	std	Y+18, r25	; 0x12
    2ea6:	89 8b       	std	Y+17, r24	; 0x11
    2ea8:	89 89       	ldd	r24, Y+17	; 0x11
    2eaa:	9a 89       	ldd	r25, Y+18	; 0x12
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <route+0x8b8>
    2eb0:	9a 8b       	std	Y+18, r25	; 0x12
    2eb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	9c 8b       	std	Y+20, r25	; 0x14
    2ebc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	69 f7       	brne	.-38     	; 0x2ea0 <route+0x8ac>
    2ec6:	14 c0       	rjmp	.+40     	; 0x2ef0 <route+0x8fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eca:	7e 89       	ldd	r23, Y+22	; 0x16
    2ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ece:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed0:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9c 8b       	std	Y+20, r25	; 0x14
    2eda:	8b 8b       	std	Y+19, r24	; 0x13
    2edc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ede:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee0:	98 8b       	std	Y+16, r25	; 0x10
    2ee2:	8f 87       	std	Y+15, r24	; 0x0f
    2ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee6:	98 89       	ldd	r25, Y+16	; 0x10
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <route+0x8f4>
    2eec:	98 8b       	std	Y+16, r25	; 0x10
    2eee:	8f 87       	std	Y+15, r24	; 0x0f
  {
	flag=1;
	forward();
	velocity(50,130);
  }*/
	if(((currentcountx == des_countx) && (currentcounty == des_county) && (take_left==1) && (obstflag==0)) || ((currentcountx == des_countx) && (currentcounty == (des_county+1)) && (take_left==0) && (obstflag==0)))
    2ef0:	20 91 74 03 	lds	r18, 0x0374
    2ef4:	30 91 75 03 	lds	r19, 0x0375
    2ef8:	80 91 04 02 	lds	r24, 0x0204
    2efc:	90 91 05 02 	lds	r25, 0x0205
    2f00:	28 17       	cp	r18, r24
    2f02:	39 07       	cpc	r19, r25
    2f04:	b1 f4       	brne	.+44     	; 0x2f32 <route+0x93e>
    2f06:	20 91 76 03 	lds	r18, 0x0376
    2f0a:	30 91 77 03 	lds	r19, 0x0377
    2f0e:	80 91 06 02 	lds	r24, 0x0206
    2f12:	90 91 07 02 	lds	r25, 0x0207
    2f16:	28 17       	cp	r18, r24
    2f18:	39 07       	cpc	r19, r25
    2f1a:	59 f4       	brne	.+22     	; 0x2f32 <route+0x93e>
    2f1c:	80 91 5d 03 	lds	r24, 0x035D
    2f20:	90 91 5e 03 	lds	r25, 0x035E
    2f24:	81 30       	cpi	r24, 0x01	; 1
    2f26:	91 05       	cpc	r25, r1
    2f28:	21 f4       	brne	.+8      	; 0x2f32 <route+0x93e>
    2f2a:	80 91 5c 03 	lds	r24, 0x035C
    2f2e:	88 23       	and	r24, r24
    2f30:	39 f1       	breq	.+78     	; 0x2f80 <route+0x98c>
    2f32:	20 91 74 03 	lds	r18, 0x0374
    2f36:	30 91 75 03 	lds	r19, 0x0375
    2f3a:	80 91 04 02 	lds	r24, 0x0204
    2f3e:	90 91 05 02 	lds	r25, 0x0205
    2f42:	28 17       	cp	r18, r24
    2f44:	39 07       	cpc	r19, r25
    2f46:	09 f0       	breq	.+2      	; 0x2f4a <route+0x956>
    2f48:	e0 c0       	rjmp	.+448    	; 0x310a <route+0xb16>
    2f4a:	80 91 06 02 	lds	r24, 0x0206
    2f4e:	90 91 07 02 	lds	r25, 0x0207
    2f52:	9c 01       	movw	r18, r24
    2f54:	2f 5f       	subi	r18, 0xFF	; 255
    2f56:	3f 4f       	sbci	r19, 0xFF	; 255
    2f58:	80 91 76 03 	lds	r24, 0x0376
    2f5c:	90 91 77 03 	lds	r25, 0x0377
    2f60:	28 17       	cp	r18, r24
    2f62:	39 07       	cpc	r19, r25
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <route+0x974>
    2f66:	d1 c0       	rjmp	.+418    	; 0x310a <route+0xb16>
    2f68:	80 91 5d 03 	lds	r24, 0x035D
    2f6c:	90 91 5e 03 	lds	r25, 0x035E
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <route+0x982>
    2f74:	ca c0       	rjmp	.+404    	; 0x310a <route+0xb16>
    2f76:	80 91 5c 03 	lds	r24, 0x035C
    2f7a:	88 23       	and	r24, r24
    2f7c:	09 f0       	breq	.+2      	; 0x2f80 <route+0x98c>
    2f7e:	c5 c0       	rjmp	.+394    	; 0x310a <route+0xb16>
	{
		//forward_mm(50);
		//velocity(0,0);
		//count on y address
		last_choice=7;
    2f80:	87 e0       	ldi	r24, 0x07	; 7
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	90 93 57 03 	sts	0x0357, r25
    2f88:	80 93 56 03 	sts	0x0356, r24
		if(take_left==1)
    2f8c:	80 91 5d 03 	lds	r24, 0x035D
    2f90:	90 91 5e 03 	lds	r25, 0x035E
    2f94:	81 30       	cpi	r24, 0x01	; 1
    2f96:	91 05       	cpc	r25, r1
    2f98:	29 f4       	brne	.+10     	; 0x2fa4 <route+0x9b0>
		{
			forward_mm_totable(270);
    2f9a:	8e e0       	ldi	r24, 0x0E	; 14
    2f9c:	91 e0       	ldi	r25, 0x01	; 1
    2f9e:	0e 94 c3 31 	call	0x6386	; 0x6386 <forward_mm_totable>
    2fa2:	04 c0       	rjmp	.+8      	; 0x2fac <route+0x9b8>
		}
		else
		{
			forward_mm_totable(200);
    2fa4:	88 ec       	ldi	r24, 0xC8	; 200
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	0e 94 c3 31 	call	0x6386	; 0x6386 <forward_mm_totable>
		}
		if(take_left==1)
    2fac:	80 91 5d 03 	lds	r24, 0x035D
    2fb0:	90 91 5e 03 	lds	r25, 0x035E
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	91 05       	cpc	r25, r1
    2fb8:	29 f4       	brne	.+10     	; 0x2fc4 <route+0x9d0>
		{
			left_degrees(90);
    2fba:	8a e5       	ldi	r24, 0x5A	; 90
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
    2fc2:	80 c0       	rjmp	.+256    	; 0x30c4 <route+0xad0>
		}
		else right_degrees(90);
    2fc4:	8a e5       	ldi	r24, 0x5A	; 90
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
    2fcc:	7b c0       	rjmp	.+246    	; 0x30c4 <route+0xad0>


		while(count>0)
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	a0 e7       	ldi	r26, 0x70	; 112
    2fd4:	b2 e4       	ldi	r27, 0x42	; 66
    2fd6:	8b 87       	std	Y+11, r24	; 0x0b
    2fd8:	9c 87       	std	Y+12, r25	; 0x0c
    2fda:	ad 87       	std	Y+13, r26	; 0x0d
    2fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe6:	26 e6       	ldi	r18, 0x66	; 102
    2fe8:	36 e6       	ldi	r19, 0x66	; 102
    2fea:	46 e6       	ldi	r20, 0x66	; 102
    2fec:	55 e4       	ldi	r21, 0x45	; 69
    2fee:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	8f 83       	std	Y+7, r24	; 0x07
    2ff8:	98 87       	std	Y+8, r25	; 0x08
    2ffa:	a9 87       	std	Y+9, r26	; 0x09
    2ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    3000:	78 85       	ldd	r23, Y+8	; 0x08
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e8       	ldi	r20, 0x80	; 128
    300c:	5f e3       	ldi	r21, 0x3F	; 63
    300e:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    3012:	88 23       	and	r24, r24
    3014:	2c f4       	brge	.+10     	; 0x3020 <route+0xa2c>
		__ticks = 1;
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	9e 83       	std	Y+6, r25	; 0x06
    301c:	8d 83       	std	Y+5, r24	; 0x05
    301e:	3f c0       	rjmp	.+126    	; 0x309e <route+0xaaa>
	else if (__tmp > 65535)
    3020:	6f 81       	ldd	r22, Y+7	; 0x07
    3022:	78 85       	ldd	r23, Y+8	; 0x08
    3024:	89 85       	ldd	r24, Y+9	; 0x09
    3026:	9a 85       	ldd	r25, Y+10	; 0x0a
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	3f ef       	ldi	r19, 0xFF	; 255
    302c:	4f e7       	ldi	r20, 0x7F	; 127
    302e:	57 e4       	ldi	r21, 0x47	; 71
    3030:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    3034:	18 16       	cp	r1, r24
    3036:	4c f5       	brge	.+82     	; 0x308a <route+0xa96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3038:	6b 85       	ldd	r22, Y+11	; 0x0b
    303a:	7c 85       	ldd	r23, Y+12	; 0x0c
    303c:	8d 85       	ldd	r24, Y+13	; 0x0d
    303e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e2       	ldi	r20, 0x20	; 32
    3046:	51 e4       	ldi	r21, 0x41	; 65
    3048:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	9e 83       	std	Y+6, r25	; 0x06
    305e:	8d 83       	std	Y+5, r24	; 0x05
    3060:	0f c0       	rjmp	.+30     	; 0x3080 <route+0xa8c>
    3062:	80 e7       	ldi	r24, 0x70	; 112
    3064:	91 e0       	ldi	r25, 0x01	; 1
    3066:	9c 83       	std	Y+4, r25	; 0x04
    3068:	8b 83       	std	Y+3, r24	; 0x03
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	9c 81       	ldd	r25, Y+4	; 0x04
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <route+0xa7a>
    3072:	9c 83       	std	Y+4, r25	; 0x04
    3074:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3076:	8d 81       	ldd	r24, Y+5	; 0x05
    3078:	9e 81       	ldd	r25, Y+6	; 0x06
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	9e 83       	std	Y+6, r25	; 0x06
    307e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3080:	8d 81       	ldd	r24, Y+5	; 0x05
    3082:	9e 81       	ldd	r25, Y+6	; 0x06
    3084:	00 97       	sbiw	r24, 0x00	; 0
    3086:	69 f7       	brne	.-38     	; 0x3062 <route+0xa6e>
    3088:	14 c0       	rjmp	.+40     	; 0x30b2 <route+0xabe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308a:	6f 81       	ldd	r22, Y+7	; 0x07
    308c:	78 85       	ldd	r23, Y+8	; 0x08
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	9a 85       	ldd	r25, Y+10	; 0x0a
    3092:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	9e 83       	std	Y+6, r25	; 0x06
    309c:	8d 83       	std	Y+5, r24	; 0x05
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	9e 81       	ldd	r25, Y+6	; 0x06
    30a2:	9a 83       	std	Y+2, r25	; 0x02
    30a4:	89 83       	std	Y+1, r24	; 0x01
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	9a 81       	ldd	r25, Y+2	; 0x02
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <route+0xab6>
    30ae:	9a 83       	std	Y+2, r25	; 0x02
    30b0:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(60);
			count--;
    30b2:	80 91 02 02 	lds	r24, 0x0202
    30b6:	90 91 03 02 	lds	r25, 0x0203
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	90 93 03 02 	sts	0x0203, r25
    30c0:	80 93 02 02 	sts	0x0202, r24
			left_degrees(90);
		}
		else right_degrees(90);


		while(count>0)
    30c4:	80 91 02 02 	lds	r24, 0x0202
    30c8:	90 91 03 02 	lds	r25, 0x0203
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	09 f0       	breq	.+2      	; 0x30d2 <route+0xade>
    30d0:	7e cf       	rjmp	.-260    	; 0x2fce <route+0x9da>
		{
			_delay_ms(60);
			count--;
		}
		config_done=0;
    30d2:	10 92 55 03 	sts	0x0355, r1
    30d6:	10 92 54 03 	sts	0x0354, r1
		flag_reached=1;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	90 93 69 03 	sts	0x0369, r25
    30e2:	80 93 68 03 	sts	0x0368, r24
		flagturn=0;
    30e6:	10 92 81 03 	sts	0x0381, r1
    30ea:	10 92 80 03 	sts	0x0380, r1
		x_reached=0;
    30ee:	10 92 7b 03 	sts	0x037B, r1
    30f2:	10 92 7a 03 	sts	0x037A, r1
		back_s=0;
    30f6:	10 92 79 03 	sts	0x0379, r1
    30fa:	10 92 78 03 	sts	0x0378, r1
		count=100;
    30fe:	84 e6       	ldi	r24, 0x64	; 100
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	90 93 03 02 	sts	0x0203, r25
    3106:	80 93 02 02 	sts	0x0202, r24


		//while(1);

	}
	if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && (obstflag==0))
    310a:	80 91 46 03 	lds	r24, 0x0346
    310e:	80 34       	cpi	r24, 0x40	; 64
    3110:	50 f5       	brcc	.+84     	; 0x3166 <route+0xb72>
    3112:	80 91 45 03 	lds	r24, 0x0345
    3116:	80 34       	cpi	r24, 0x40	; 64
    3118:	30 f5       	brcc	.+76     	; 0x3166 <route+0xb72>
    311a:	80 91 47 03 	lds	r24, 0x0347
    311e:	80 34       	cpi	r24, 0x40	; 64
    3120:	10 f5       	brcc	.+68     	; 0x3166 <route+0xb72>
    3122:	80 91 5c 03 	lds	r24, 0x035C
    3126:	88 23       	and	r24, r24
    3128:	f1 f4       	brne	.+60     	; 0x3166 <route+0xb72>
			if(	Center_white_line>BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE)
			{
				break;
			}
	}*/
	adjust_path();
    312a:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <adjust_path>
    312e:	1b c0       	rjmp	.+54     	; 0x3166 <route+0xb72>
}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0) )
	{
		//forward_mm(5);
		last_choice=9;
    3130:	89 e0       	ldi	r24, 0x09	; 9
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	90 93 57 03 	sts	0x0357, r25
    3138:	80 93 56 03 	sts	0x0356, r24
		checkobst();
    313c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <checkobst>
		forward_mm(2);
    3140:	82 e0       	ldi	r24, 0x02	; 2
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    3148:	83 e0       	ldi	r24, 0x03	; 3
    314a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    314e:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    3152:	82 e0       	ldi	r24, 0x02	; 2
    3154:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3158:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3162:	80 93 47 03 	sts	0x0347, r24
				break;
			}
	}*/
	adjust_path();
}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0) )
    3166:	80 91 46 03 	lds	r24, 0x0346
    316a:	80 34       	cpi	r24, 0x40	; 64
    316c:	d0 f0       	brcs	.+52     	; 0x31a2 <route+0xbae>
    316e:	80 91 45 03 	lds	r24, 0x0345
    3172:	80 34       	cpi	r24, 0x40	; 64
    3174:	b0 f0       	brcs	.+44     	; 0x31a2 <route+0xbae>
    3176:	80 91 47 03 	lds	r24, 0x0347
    317a:	80 34       	cpi	r24, 0x40	; 64
    317c:	90 f0       	brcs	.+36     	; 0x31a2 <route+0xbae>
    317e:	80 91 56 03 	lds	r24, 0x0356
    3182:	90 91 57 03 	lds	r25, 0x0357
    3186:	86 30       	cpi	r24, 0x06	; 6
    3188:	91 05       	cpc	r25, r1
    318a:	39 f0       	breq	.+14     	; 0x319a <route+0xba6>
    318c:	80 91 56 03 	lds	r24, 0x0356
    3190:	90 91 57 03 	lds	r25, 0x0357
    3194:	89 30       	cpi	r24, 0x09	; 9
    3196:	91 05       	cpc	r25, r1
    3198:	21 f4       	brne	.+8      	; 0x31a2 <route+0xbae>
    319a:	80 91 5c 03 	lds	r24, 0x035C
    319e:	88 23       	and	r24, r24
    31a0:	39 f2       	breq	.-114    	; 0x3130 <route+0xb3c>
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);
	}
	//route(des_countx,des_county,0,0);
	return (1);
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	90 e0       	ldi	r25, 0x00	; 0
}
    31a6:	ca 5b       	subi	r28, 0xBA	; 186
    31a8:	df 4f       	sbci	r29, 0xFF	; 255
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	08 95       	ret

000031be <backroute>:

int backroute()
{
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	cc 58       	subi	r28, 0x8C	; 140
    31cc:	d0 40       	sbci	r29, 0x00	; 0
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	f8 94       	cli
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	cd bf       	out	0x3d, r28	; 61
	Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    31d8:	83 e0       	ldi	r24, 0x03	; 3
    31da:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    31de:	80 93 45 03 	sts	0x0345, r24
	Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    31e2:	82 e0       	ldi	r24, 0x02	; 2
    31e4:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    31e8:	80 93 46 03 	sts	0x0346, r24
	Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    31f2:	80 93 47 03 	sts	0x0347, r24
sample_sensor();
    31f6:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
  flag=0;
    31fa:	10 92 44 03 	sts	0x0344, r1
obstflag=0;
    31fe:	10 92 5c 03 	sts	0x035C, r1
	x_coor=currentcountx;
    3202:	80 91 74 03 	lds	r24, 0x0374
    3206:	90 91 75 03 	lds	r25, 0x0375
    320a:	90 93 9c 03 	sts	0x039C, r25
    320e:	80 93 9b 03 	sts	0x039B, r24
	y_coor=currentcounty;
    3212:	80 91 76 03 	lds	r24, 0x0376
    3216:	90 91 77 03 	lds	r25, 0x0377
    321a:	90 93 8b 03 	sts	0x038B, r25
    321e:	80 93 8a 03 	sts	0x038A, r24
	print_sensor(1,1,3);    //Prints value of White Line Sensor1
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	61 e0       	ldi	r22, 0x01	; 1
    3226:	43 e0       	ldi	r20, 0x03	; 3
    3228:	0e 94 57 0e 	call	0x1cae	; 0x1cae <print_sensor>
	print_sensor(1,5,2);    //Prints Value of White Line Sensor2
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	65 e0       	ldi	r22, 0x05	; 5
    3230:	42 e0       	ldi	r20, 0x02	; 2
    3232:	0e 94 57 0e 	call	0x1cae	; 0x1cae <print_sensor>
	print_sensor(1,9,1);    //Prints Value of White Line Sensor3
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	69 e0       	ldi	r22, 0x09	; 9
    323a:	41 e0       	ldi	r20, 0x01	; 1
    323c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <print_sensor>
	lcd_print(2,1,currentcountx,2);
    3240:	80 91 74 03 	lds	r24, 0x0374
    3244:	90 91 75 03 	lds	r25, 0x0375
    3248:	9c 01       	movw	r18, r24
    324a:	82 e0       	ldi	r24, 0x02	; 2
    324c:	61 e0       	ldi	r22, 0x01	; 1
    324e:	a9 01       	movw	r20, r18
    3250:	22 e0       	ldi	r18, 0x02	; 2
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
	lcd_print(2,5,currentcounty,2);
    3258:	80 91 76 03 	lds	r24, 0x0376
    325c:	90 91 77 03 	lds	r25, 0x0377
    3260:	9c 01       	movw	r18, r24
    3262:	82 e0       	ldi	r24, 0x02	; 2
    3264:	65 e0       	ldi	r22, 0x05	; 5
    3266:	a9 01       	movw	r20, r18
    3268:	22 e0       	ldi	r18, 0x02	; 2
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    3270:	c9 c0       	rjmp	.+402    	; 0x3404 <backroute+0x246>
  //print_sensor(2,4,11);	//Prints Value of Front Sharp Sensor
  //print_sensor(2,8,6);	//Prints Value of Front IR Sensor
  while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			obstflag=1;
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	80 93 5c 03 	sts	0x035C, r24
			stop();
    3278:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			buzzer_on();
    327c:	0e 94 ce 0a 	call	0x159c	; 0x159c <buzzer_on>
			_delay_ms(delayvalueback);
    3280:	80 91 32 02 	lds	r24, 0x0232
    3284:	90 91 33 02 	lds	r25, 0x0233
    3288:	cc 01       	movw	r24, r24
    328a:	a0 e0       	ldi	r26, 0x00	; 0
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	bc 01       	movw	r22, r24
    3290:	cd 01       	movw	r24, r26
    3292:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	fe 01       	movw	r30, r28
    329c:	e7 57       	subi	r30, 0x77	; 119
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 83       	st	Z, r24
    32a2:	91 83       	std	Z+1, r25	; 0x01
    32a4:	a2 83       	std	Z+2, r26	; 0x02
    32a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a8:	8e 01       	movw	r16, r28
    32aa:	0b 57       	subi	r16, 0x7B	; 123
    32ac:	1f 4f       	sbci	r17, 0xFF	; 255
    32ae:	fe 01       	movw	r30, r28
    32b0:	e7 57       	subi	r30, 0x77	; 119
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	26 e6       	ldi	r18, 0x66	; 102
    32be:	36 e6       	ldi	r19, 0x66	; 102
    32c0:	46 e6       	ldi	r20, 0x66	; 102
    32c2:	55 e4       	ldi	r21, 0x45	; 69
    32c4:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	f8 01       	movw	r30, r16
    32ce:	80 83       	st	Z, r24
    32d0:	91 83       	std	Z+1, r25	; 0x01
    32d2:	a2 83       	std	Z+2, r26	; 0x02
    32d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32d6:	fe 01       	movw	r30, r28
    32d8:	eb 57       	subi	r30, 0x7B	; 123
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	60 81       	ld	r22, Z
    32de:	71 81       	ldd	r23, Z+1	; 0x01
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	93 81       	ldd	r25, Z+3	; 0x03
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	40 e8       	ldi	r20, 0x80	; 128
    32ea:	5f e3       	ldi	r21, 0x3F	; 63
    32ec:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    32f0:	88 23       	and	r24, r24
    32f2:	44 f4       	brge	.+16     	; 0x3304 <backroute+0x146>
		__ticks = 1;
    32f4:	fe 01       	movw	r30, r28
    32f6:	ed 57       	subi	r30, 0x7D	; 125
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	80 83       	st	Z, r24
    3302:	64 c0       	rjmp	.+200    	; 0x33cc <backroute+0x20e>
	else if (__tmp > 65535)
    3304:	fe 01       	movw	r30, r28
    3306:	eb 57       	subi	r30, 0x7B	; 123
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	60 81       	ld	r22, Z
    330c:	71 81       	ldd	r23, Z+1	; 0x01
    330e:	82 81       	ldd	r24, Z+2	; 0x02
    3310:	93 81       	ldd	r25, Z+3	; 0x03
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	3f ef       	ldi	r19, 0xFF	; 255
    3316:	4f e7       	ldi	r20, 0x7F	; 127
    3318:	57 e4       	ldi	r21, 0x47	; 71
    331a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    331e:	18 16       	cp	r1, r24
    3320:	0c f0       	brlt	.+2      	; 0x3324 <backroute+0x166>
    3322:	43 c0       	rjmp	.+134    	; 0x33aa <backroute+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3324:	fe 01       	movw	r30, r28
    3326:	e7 57       	subi	r30, 0x77	; 119
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	60 81       	ld	r22, Z
    332c:	71 81       	ldd	r23, Z+1	; 0x01
    332e:	82 81       	ldd	r24, Z+2	; 0x02
    3330:	93 81       	ldd	r25, Z+3	; 0x03
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	40 e2       	ldi	r20, 0x20	; 32
    3338:	51 e4       	ldi	r21, 0x41	; 65
    333a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	8e 01       	movw	r16, r28
    3344:	0d 57       	subi	r16, 0x7D	; 125
    3346:	1f 4f       	sbci	r17, 0xFF	; 255
    3348:	bc 01       	movw	r22, r24
    334a:	cd 01       	movw	r24, r26
    334c:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	f8 01       	movw	r30, r16
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	80 83       	st	Z, r24
    335a:	1f c0       	rjmp	.+62     	; 0x339a <backroute+0x1dc>
    335c:	fe 01       	movw	r30, r28
    335e:	ef 57       	subi	r30, 0x7F	; 127
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 e7       	ldi	r24, 0x70	; 112
    3364:	91 e0       	ldi	r25, 0x01	; 1
    3366:	91 83       	std	Z+1, r25	; 0x01
    3368:	80 83       	st	Z, r24
    336a:	fe 01       	movw	r30, r28
    336c:	ef 57       	subi	r30, 0x7F	; 127
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <backroute+0x1b6>
    3378:	fe 01       	movw	r30, r28
    337a:	ef 57       	subi	r30, 0x7F	; 127
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3382:	de 01       	movw	r26, r28
    3384:	ad 57       	subi	r26, 0x7D	; 125
    3386:	bf 4f       	sbci	r27, 0xFF	; 255
    3388:	fe 01       	movw	r30, r28
    338a:	ed 57       	subi	r30, 0x7D	; 125
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 81       	ld	r24, Z
    3390:	91 81       	ldd	r25, Z+1	; 0x01
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	11 96       	adiw	r26, 0x01	; 1
    3396:	9c 93       	st	X, r25
    3398:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339a:	fe 01       	movw	r30, r28
    339c:	ed 57       	subi	r30, 0x7D	; 125
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 81       	ld	r24, Z
    33a2:	91 81       	ldd	r25, Z+1	; 0x01
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	d1 f6       	brne	.-76     	; 0x335c <backroute+0x19e>
    33a8:	27 c0       	rjmp	.+78     	; 0x33f8 <backroute+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33aa:	8e 01       	movw	r16, r28
    33ac:	0d 57       	subi	r16, 0x7D	; 125
    33ae:	1f 4f       	sbci	r17, 0xFF	; 255
    33b0:	fe 01       	movw	r30, r28
    33b2:	eb 57       	subi	r30, 0x7B	; 123
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	60 81       	ld	r22, Z
    33b8:	71 81       	ldd	r23, Z+1	; 0x01
    33ba:	82 81       	ldd	r24, Z+2	; 0x02
    33bc:	93 81       	ldd	r25, Z+3	; 0x03
    33be:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	f8 01       	movw	r30, r16
    33c8:	91 83       	std	Z+1, r25	; 0x01
    33ca:	80 83       	st	Z, r24
    33cc:	de 01       	movw	r26, r28
    33ce:	a1 58       	subi	r26, 0x81	; 129
    33d0:	bf 4f       	sbci	r27, 0xFF	; 255
    33d2:	fe 01       	movw	r30, r28
    33d4:	ed 57       	subi	r30, 0x7D	; 125
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	80 81       	ld	r24, Z
    33da:	91 81       	ldd	r25, Z+1	; 0x01
    33dc:	8d 93       	st	X+, r24
    33de:	9c 93       	st	X, r25
    33e0:	fe 01       	movw	r30, r28
    33e2:	e1 58       	subi	r30, 0x81	; 129
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <backroute+0x22c>
    33ee:	fe 01       	movw	r30, r28
    33f0:	e1 58       	subi	r30, 0x81	; 129
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	80 83       	st	Z, r24
			buzzer_off();
    33f8:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <buzzer_off>
			sample_sensor();
    33fc:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
			handle_obst_backward();
    3400:	0e 94 ff 28 	call	0x51fe	; 0x51fe <handle_obst_backward>
	print_sensor(1,9,1);    //Prints Value of White Line Sensor3
	lcd_print(2,1,currentcountx,2);
	lcd_print(2,5,currentcounty,2);
  //print_sensor(2,4,11);	//Prints Value of Front Sharp Sensor
  //print_sensor(2,8,6);	//Prints Value of Front IR Sensor
  while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    3404:	80 91 5a 03 	lds	r24, 0x035A
    3408:	28 2f       	mov	r18, r24
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	80 91 08 02 	lds	r24, 0x0208
    3410:	90 91 09 02 	lds	r25, 0x0209
    3414:	82 17       	cp	r24, r18
    3416:	93 07       	cpc	r25, r19
    3418:	08 f4       	brcc	.+2      	; 0x341c <backroute+0x25e>
    341a:	2b cf       	rjmp	.-426    	; 0x3272 <backroute+0xb4>
    341c:	80 91 5b 03 	lds	r24, 0x035B
    3420:	28 2f       	mov	r18, r24
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	80 91 86 03 	lds	r24, 0x0386
    3428:	90 91 87 03 	lds	r25, 0x0387
    342c:	28 17       	cp	r18, r24
    342e:	39 07       	cpc	r19, r25
    3430:	08 f4       	brcc	.+2      	; 0x3434 <backroute+0x276>
    3432:	1f cf       	rjmp	.-450    	; 0x3272 <backroute+0xb4>
    3434:	80 91 60 03 	lds	r24, 0x0360
    3438:	28 2f       	mov	r18, r24
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	80 91 86 03 	lds	r24, 0x0386
    3440:	90 91 87 03 	lds	r25, 0x0387
    3444:	28 17       	cp	r18, r24
    3446:	39 07       	cpc	r19, r25
    3448:	08 f4       	brcc	.+2      	; 0x344c <backroute+0x28e>
    344a:	13 cf       	rjmp	.-474    	; 0x3272 <backroute+0xb4>
    344c:	80 91 61 03 	lds	r24, 0x0361
    3450:	28 2f       	mov	r18, r24
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	80 91 86 03 	lds	r24, 0x0386
    3458:	90 91 87 03 	lds	r25, 0x0387
    345c:	28 17       	cp	r18, r24
    345e:	39 07       	cpc	r19, r25
    3460:	08 f4       	brcc	.+2      	; 0x3464 <backroute+0x2a6>
    3462:	07 cf       	rjmp	.-498    	; 0x3272 <backroute+0xb4>
    3464:	18 c1       	rjmp	.+560    	; 0x3696 <backroute+0x4d8>
			sample_sensor();
			handle_obst_backward();
		}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
	{
		sample_sensor();
    3466:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
    346a:	c5 c0       	rjmp	.+394    	; 0x35f6 <backroute+0x438>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		
		{
			obstflag=1;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	80 93 5c 03 	sts	0x035C, r24
			stop();
    3472:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			//buzzer_on();
			_delay_ms(delayvalueback);
    3476:	80 91 32 02 	lds	r24, 0x0232
    347a:	90 91 33 02 	lds	r25, 0x0233
    347e:	cc 01       	movw	r24, r24
    3480:	a0 e0       	ldi	r26, 0x00	; 0
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	bc 01       	movw	r22, r24
    3486:	cd 01       	movw	r24, r26
    3488:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	fe 01       	movw	r30, r28
    3492:	e5 58       	subi	r30, 0x85	; 133
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 83       	st	Z, r24
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	a2 83       	std	Z+2, r26	; 0x02
    349c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    349e:	8e 01       	movw	r16, r28
    34a0:	09 58       	subi	r16, 0x89	; 137
    34a2:	1f 4f       	sbci	r17, 0xFF	; 255
    34a4:	fe 01       	movw	r30, r28
    34a6:	e5 58       	subi	r30, 0x85	; 133
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	60 81       	ld	r22, Z
    34ac:	71 81       	ldd	r23, Z+1	; 0x01
    34ae:	82 81       	ldd	r24, Z+2	; 0x02
    34b0:	93 81       	ldd	r25, Z+3	; 0x03
    34b2:	26 e6       	ldi	r18, 0x66	; 102
    34b4:	36 e6       	ldi	r19, 0x66	; 102
    34b6:	46 e6       	ldi	r20, 0x66	; 102
    34b8:	55 e4       	ldi	r21, 0x45	; 69
    34ba:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	f8 01       	movw	r30, r16
    34c4:	80 83       	st	Z, r24
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	a2 83       	std	Z+2, r26	; 0x02
    34ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34cc:	fe 01       	movw	r30, r28
    34ce:	e9 58       	subi	r30, 0x89	; 137
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	60 81       	ld	r22, Z
    34d4:	71 81       	ldd	r23, Z+1	; 0x01
    34d6:	82 81       	ldd	r24, Z+2	; 0x02
    34d8:	93 81       	ldd	r25, Z+3	; 0x03
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e8       	ldi	r20, 0x80	; 128
    34e0:	5f e3       	ldi	r21, 0x3F	; 63
    34e2:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    34e6:	88 23       	and	r24, r24
    34e8:	44 f4       	brge	.+16     	; 0x34fa <backroute+0x33c>
		__ticks = 1;
    34ea:	fe 01       	movw	r30, r28
    34ec:	eb 58       	subi	r30, 0x8B	; 139
    34ee:	ff 4f       	sbci	r31, 0xFF	; 255
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	91 83       	std	Z+1, r25	; 0x01
    34f6:	80 83       	st	Z, r24
    34f8:	64 c0       	rjmp	.+200    	; 0x35c2 <backroute+0x404>
	else if (__tmp > 65535)
    34fa:	fe 01       	movw	r30, r28
    34fc:	e9 58       	subi	r30, 0x89	; 137
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	60 81       	ld	r22, Z
    3502:	71 81       	ldd	r23, Z+1	; 0x01
    3504:	82 81       	ldd	r24, Z+2	; 0x02
    3506:	93 81       	ldd	r25, Z+3	; 0x03
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	3f ef       	ldi	r19, 0xFF	; 255
    350c:	4f e7       	ldi	r20, 0x7F	; 127
    350e:	57 e4       	ldi	r21, 0x47	; 71
    3510:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    3514:	18 16       	cp	r1, r24
    3516:	0c f0       	brlt	.+2      	; 0x351a <backroute+0x35c>
    3518:	43 c0       	rjmp	.+134    	; 0x35a0 <backroute+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351a:	fe 01       	movw	r30, r28
    351c:	e5 58       	subi	r30, 0x85	; 133
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	60 81       	ld	r22, Z
    3522:	71 81       	ldd	r23, Z+1	; 0x01
    3524:	82 81       	ldd	r24, Z+2	; 0x02
    3526:	93 81       	ldd	r25, Z+3	; 0x03
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	40 e2       	ldi	r20, 0x20	; 32
    352e:	51 e4       	ldi	r21, 0x41	; 65
    3530:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	8e 01       	movw	r16, r28
    353a:	0b 58       	subi	r16, 0x8B	; 139
    353c:	1f 4f       	sbci	r17, 0xFF	; 255
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	f8 01       	movw	r30, r16
    354c:	91 83       	std	Z+1, r25	; 0x01
    354e:	80 83       	st	Z, r24
    3550:	1f c0       	rjmp	.+62     	; 0x3590 <backroute+0x3d2>
    3552:	fe 01       	movw	r30, r28
    3554:	ed 58       	subi	r30, 0x8D	; 141
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	80 e7       	ldi	r24, 0x70	; 112
    355a:	91 e0       	ldi	r25, 0x01	; 1
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	80 83       	st	Z, r24
    3560:	fe 01       	movw	r30, r28
    3562:	ed 58       	subi	r30, 0x8D	; 141
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	80 81       	ld	r24, Z
    3568:	91 81       	ldd	r25, Z+1	; 0x01
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	f1 f7       	brne	.-4      	; 0x356a <backroute+0x3ac>
    356e:	fe 01       	movw	r30, r28
    3570:	ed 58       	subi	r30, 0x8D	; 141
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	91 83       	std	Z+1, r25	; 0x01
    3576:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3578:	de 01       	movw	r26, r28
    357a:	ab 58       	subi	r26, 0x8B	; 139
    357c:	bf 4f       	sbci	r27, 0xFF	; 255
    357e:	fe 01       	movw	r30, r28
    3580:	eb 58       	subi	r30, 0x8B	; 139
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	80 81       	ld	r24, Z
    3586:	91 81       	ldd	r25, Z+1	; 0x01
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	11 96       	adiw	r26, 0x01	; 1
    358c:	9c 93       	st	X, r25
    358e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3590:	fe 01       	movw	r30, r28
    3592:	eb 58       	subi	r30, 0x8B	; 139
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	d1 f6       	brne	.-76     	; 0x3552 <backroute+0x394>
    359e:	27 c0       	rjmp	.+78     	; 0x35ee <backroute+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a0:	8e 01       	movw	r16, r28
    35a2:	0b 58       	subi	r16, 0x8B	; 139
    35a4:	1f 4f       	sbci	r17, 0xFF	; 255
    35a6:	fe 01       	movw	r30, r28
    35a8:	e9 58       	subi	r30, 0x89	; 137
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	60 81       	ld	r22, Z
    35ae:	71 81       	ldd	r23, Z+1	; 0x01
    35b0:	82 81       	ldd	r24, Z+2	; 0x02
    35b2:	93 81       	ldd	r25, Z+3	; 0x03
    35b4:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	f8 01       	movw	r30, r16
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	80 83       	st	Z, r24
    35c2:	de 01       	movw	r26, r28
    35c4:	af 58       	subi	r26, 0x8F	; 143
    35c6:	bf 4f       	sbci	r27, 0xFF	; 255
    35c8:	fe 01       	movw	r30, r28
    35ca:	eb 58       	subi	r30, 0x8B	; 139
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 81       	ld	r24, Z
    35d0:	91 81       	ldd	r25, Z+1	; 0x01
    35d2:	8d 93       	st	X+, r24
    35d4:	9c 93       	st	X, r25
    35d6:	fe 01       	movw	r30, r28
    35d8:	ef 58       	subi	r30, 0x8F	; 143
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 81       	ld	r24, Z
    35de:	91 81       	ldd	r25, Z+1	; 0x01
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <backroute+0x422>
    35e4:	fe 01       	movw	r30, r28
    35e6:	ef 58       	subi	r30, 0x8F	; 143
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	91 83       	std	Z+1, r25	; 0x01
    35ec:	80 83       	st	Z, r24
			sample_sensor();
    35ee:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
			handle_obst_backward();
    35f2:	0e 94 ff 28 	call	0x51fe	; 0x51fe <handle_obst_backward>
			handle_obst_backward();
		}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    35f6:	80 91 5a 03 	lds	r24, 0x035A
    35fa:	28 2f       	mov	r18, r24
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	80 91 08 02 	lds	r24, 0x0208
    3602:	90 91 09 02 	lds	r25, 0x0209
    3606:	82 17       	cp	r24, r18
    3608:	93 07       	cpc	r25, r19
    360a:	08 f4       	brcc	.+2      	; 0x360e <backroute+0x450>
    360c:	2f cf       	rjmp	.-418    	; 0x346c <backroute+0x2ae>
    360e:	80 91 5b 03 	lds	r24, 0x035B
    3612:	28 2f       	mov	r18, r24
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	80 91 86 03 	lds	r24, 0x0386
    361a:	90 91 87 03 	lds	r25, 0x0387
    361e:	28 17       	cp	r18, r24
    3620:	39 07       	cpc	r19, r25
    3622:	08 f4       	brcc	.+2      	; 0x3626 <backroute+0x468>
    3624:	23 cf       	rjmp	.-442    	; 0x346c <backroute+0x2ae>
    3626:	80 91 60 03 	lds	r24, 0x0360
    362a:	28 2f       	mov	r18, r24
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	80 91 86 03 	lds	r24, 0x0386
    3632:	90 91 87 03 	lds	r25, 0x0387
    3636:	28 17       	cp	r18, r24
    3638:	39 07       	cpc	r19, r25
    363a:	08 f4       	brcc	.+2      	; 0x363e <backroute+0x480>
    363c:	17 cf       	rjmp	.-466    	; 0x346c <backroute+0x2ae>
    363e:	80 91 61 03 	lds	r24, 0x0361
    3642:	28 2f       	mov	r18, r24
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	80 91 86 03 	lds	r24, 0x0386
    364a:	90 91 87 03 	lds	r25, 0x0387
    364e:	28 17       	cp	r18, r24
    3650:	39 07       	cpc	r19, r25
    3652:	08 f4       	brcc	.+2      	; 0x3656 <backroute+0x498>
    3654:	0b cf       	rjmp	.-490    	; 0x346c <backroute+0x2ae>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		flag=1;
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	80 93 44 03 	sts	0x0344, r24
		last_choice=1;
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	90 93 57 03 	sts	0x0357, r25
    3664:	80 93 56 03 	sts	0x0356, r24
		//flag2=1;
		forward_mm(5);
    3668:	85 e0       	ldi	r24, 0x05	; 5
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		//velocity(120,120);
		back_s=0;
    3670:	10 92 79 03 	sts	0x0379, r1
    3674:	10 92 78 03 	sts	0x0378, r1
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    3678:	83 e0       	ldi	r24, 0x03	; 3
    367a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    367e:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    3682:	82 e0       	ldi	r24, 0x02	; 2
    3684:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3688:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3692:	80 93 47 03 	sts	0x0347, r24
			_delay_ms(delayvalueback);
			buzzer_off();
			sample_sensor();
			handle_obst_backward();
		}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
    3696:	80 91 46 03 	lds	r24, 0x0346
    369a:	80 34       	cpi	r24, 0x40	; 64
    369c:	08 f4       	brcc	.+2      	; 0x36a0 <backroute+0x4e2>
    369e:	29 c1       	rjmp	.+594    	; 0x38f2 <backroute+0x734>
    36a0:	80 91 45 03 	lds	r24, 0x0345
    36a4:	80 34       	cpi	r24, 0x40	; 64
    36a6:	08 f0       	brcs	.+2      	; 0x36aa <backroute+0x4ec>
    36a8:	24 c1       	rjmp	.+584    	; 0x38f2 <backroute+0x734>
    36aa:	80 91 47 03 	lds	r24, 0x0347
    36ae:	80 34       	cpi	r24, 0x40	; 64
    36b0:	08 f0       	brcs	.+2      	; 0x36b4 <backroute+0x4f6>
    36b2:	1f c1       	rjmp	.+574    	; 0x38f2 <backroute+0x734>
    36b4:	80 91 5c 03 	lds	r24, 0x035C
    36b8:	88 23       	and	r24, r24
    36ba:	09 f4       	brne	.+2      	; 0x36be <backroute+0x500>
    36bc:	d4 ce       	rjmp	.-600    	; 0x3466 <backroute+0x2a8>
    36be:	19 c1       	rjmp	.+562    	; 0x38f2 <backroute+0x734>
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
    36c0:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
    36c4:	c5 c0       	rjmp	.+394    	; 0x3850 <backroute+0x692>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		
		{
			obstflag=1;
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	80 93 5c 03 	sts	0x035C, r24
			stop();
    36cc:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			//buzzer_on();
			_delay_ms(delayvalueback);
    36d0:	80 91 32 02 	lds	r24, 0x0232
    36d4:	90 91 33 02 	lds	r25, 0x0233
    36d8:	cc 01       	movw	r24, r24
    36da:	a0 e0       	ldi	r26, 0x00	; 0
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	bc 01       	movw	r22, r24
    36e0:	cd 01       	movw	r24, r26
    36e2:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	fe 01       	movw	r30, r28
    36ec:	e3 59       	subi	r30, 0x93	; 147
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 83       	st	Z, r24
    36f2:	91 83       	std	Z+1, r25	; 0x01
    36f4:	a2 83       	std	Z+2, r26	; 0x02
    36f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f8:	8e 01       	movw	r16, r28
    36fa:	07 59       	subi	r16, 0x97	; 151
    36fc:	1f 4f       	sbci	r17, 0xFF	; 255
    36fe:	fe 01       	movw	r30, r28
    3700:	e3 59       	subi	r30, 0x93	; 147
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	60 81       	ld	r22, Z
    3706:	71 81       	ldd	r23, Z+1	; 0x01
    3708:	82 81       	ldd	r24, Z+2	; 0x02
    370a:	93 81       	ldd	r25, Z+3	; 0x03
    370c:	26 e6       	ldi	r18, 0x66	; 102
    370e:	36 e6       	ldi	r19, 0x66	; 102
    3710:	46 e6       	ldi	r20, 0x66	; 102
    3712:	55 e4       	ldi	r21, 0x45	; 69
    3714:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	f8 01       	movw	r30, r16
    371e:	80 83       	st	Z, r24
    3720:	91 83       	std	Z+1, r25	; 0x01
    3722:	a2 83       	std	Z+2, r26	; 0x02
    3724:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3726:	fe 01       	movw	r30, r28
    3728:	e7 59       	subi	r30, 0x97	; 151
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	60 81       	ld	r22, Z
    372e:	71 81       	ldd	r23, Z+1	; 0x01
    3730:	82 81       	ldd	r24, Z+2	; 0x02
    3732:	93 81       	ldd	r25, Z+3	; 0x03
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	40 e8       	ldi	r20, 0x80	; 128
    373a:	5f e3       	ldi	r21, 0x3F	; 63
    373c:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    3740:	88 23       	and	r24, r24
    3742:	44 f4       	brge	.+16     	; 0x3754 <backroute+0x596>
		__ticks = 1;
    3744:	fe 01       	movw	r30, r28
    3746:	e9 59       	subi	r30, 0x99	; 153
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	80 83       	st	Z, r24
    3752:	64 c0       	rjmp	.+200    	; 0x381c <backroute+0x65e>
	else if (__tmp > 65535)
    3754:	fe 01       	movw	r30, r28
    3756:	e7 59       	subi	r30, 0x97	; 151
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	60 81       	ld	r22, Z
    375c:	71 81       	ldd	r23, Z+1	; 0x01
    375e:	82 81       	ldd	r24, Z+2	; 0x02
    3760:	93 81       	ldd	r25, Z+3	; 0x03
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	3f ef       	ldi	r19, 0xFF	; 255
    3766:	4f e7       	ldi	r20, 0x7F	; 127
    3768:	57 e4       	ldi	r21, 0x47	; 71
    376a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    376e:	18 16       	cp	r1, r24
    3770:	0c f0       	brlt	.+2      	; 0x3774 <backroute+0x5b6>
    3772:	43 c0       	rjmp	.+134    	; 0x37fa <backroute+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3774:	fe 01       	movw	r30, r28
    3776:	e3 59       	subi	r30, 0x93	; 147
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	60 81       	ld	r22, Z
    377c:	71 81       	ldd	r23, Z+1	; 0x01
    377e:	82 81       	ldd	r24, Z+2	; 0x02
    3780:	93 81       	ldd	r25, Z+3	; 0x03
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	40 e2       	ldi	r20, 0x20	; 32
    3788:	51 e4       	ldi	r21, 0x41	; 65
    378a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	8e 01       	movw	r16, r28
    3794:	09 59       	subi	r16, 0x99	; 153
    3796:	1f 4f       	sbci	r17, 0xFF	; 255
    3798:	bc 01       	movw	r22, r24
    379a:	cd 01       	movw	r24, r26
    379c:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	f8 01       	movw	r30, r16
    37a6:	91 83       	std	Z+1, r25	; 0x01
    37a8:	80 83       	st	Z, r24
    37aa:	1f c0       	rjmp	.+62     	; 0x37ea <backroute+0x62c>
    37ac:	fe 01       	movw	r30, r28
    37ae:	eb 59       	subi	r30, 0x9B	; 155
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	80 e7       	ldi	r24, 0x70	; 112
    37b4:	91 e0       	ldi	r25, 0x01	; 1
    37b6:	91 83       	std	Z+1, r25	; 0x01
    37b8:	80 83       	st	Z, r24
    37ba:	fe 01       	movw	r30, r28
    37bc:	eb 59       	subi	r30, 0x9B	; 155
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	80 81       	ld	r24, Z
    37c2:	91 81       	ldd	r25, Z+1	; 0x01
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <backroute+0x606>
    37c8:	fe 01       	movw	r30, r28
    37ca:	eb 59       	subi	r30, 0x9B	; 155
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	91 83       	std	Z+1, r25	; 0x01
    37d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d2:	de 01       	movw	r26, r28
    37d4:	a9 59       	subi	r26, 0x99	; 153
    37d6:	bf 4f       	sbci	r27, 0xFF	; 255
    37d8:	fe 01       	movw	r30, r28
    37da:	e9 59       	subi	r30, 0x99	; 153
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	80 81       	ld	r24, Z
    37e0:	91 81       	ldd	r25, Z+1	; 0x01
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	11 96       	adiw	r26, 0x01	; 1
    37e6:	9c 93       	st	X, r25
    37e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ea:	fe 01       	movw	r30, r28
    37ec:	e9 59       	subi	r30, 0x99	; 153
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	80 81       	ld	r24, Z
    37f2:	91 81       	ldd	r25, Z+1	; 0x01
    37f4:	00 97       	sbiw	r24, 0x00	; 0
    37f6:	d1 f6       	brne	.-76     	; 0x37ac <backroute+0x5ee>
    37f8:	27 c0       	rjmp	.+78     	; 0x3848 <backroute+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37fa:	8e 01       	movw	r16, r28
    37fc:	09 59       	subi	r16, 0x99	; 153
    37fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3800:	fe 01       	movw	r30, r28
    3802:	e7 59       	subi	r30, 0x97	; 151
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	f8 01       	movw	r30, r16
    3818:	91 83       	std	Z+1, r25	; 0x01
    381a:	80 83       	st	Z, r24
    381c:	de 01       	movw	r26, r28
    381e:	ad 59       	subi	r26, 0x9D	; 157
    3820:	bf 4f       	sbci	r27, 0xFF	; 255
    3822:	fe 01       	movw	r30, r28
    3824:	e9 59       	subi	r30, 0x99	; 153
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	80 81       	ld	r24, Z
    382a:	91 81       	ldd	r25, Z+1	; 0x01
    382c:	8d 93       	st	X+, r24
    382e:	9c 93       	st	X, r25
    3830:	fe 01       	movw	r30, r28
    3832:	ed 59       	subi	r30, 0x9D	; 157
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	80 81       	ld	r24, Z
    3838:	91 81       	ldd	r25, Z+1	; 0x01
    383a:	01 97       	sbiw	r24, 0x01	; 1
    383c:	f1 f7       	brne	.-4      	; 0x383a <backroute+0x67c>
    383e:	fe 01       	movw	r30, r28
    3840:	ed 59       	subi	r30, 0x9D	; 157
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	80 83       	st	Z, r24
			sample_sensor();
    3848:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
			handle_obst_backward();
    384c:	0e 94 ff 28 	call	0x51fe	; 0x51fe <handle_obst_backward>
		Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    3850:	80 91 5a 03 	lds	r24, 0x035A
    3854:	28 2f       	mov	r18, r24
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	80 91 08 02 	lds	r24, 0x0208
    385c:	90 91 09 02 	lds	r25, 0x0209
    3860:	82 17       	cp	r24, r18
    3862:	93 07       	cpc	r25, r19
    3864:	08 f4       	brcc	.+2      	; 0x3868 <backroute+0x6aa>
    3866:	2f cf       	rjmp	.-418    	; 0x36c6 <backroute+0x508>
    3868:	80 91 5b 03 	lds	r24, 0x035B
    386c:	28 2f       	mov	r18, r24
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	80 91 86 03 	lds	r24, 0x0386
    3874:	90 91 87 03 	lds	r25, 0x0387
    3878:	28 17       	cp	r18, r24
    387a:	39 07       	cpc	r19, r25
    387c:	08 f4       	brcc	.+2      	; 0x3880 <backroute+0x6c2>
    387e:	23 cf       	rjmp	.-442    	; 0x36c6 <backroute+0x508>
    3880:	80 91 60 03 	lds	r24, 0x0360
    3884:	28 2f       	mov	r18, r24
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	80 91 86 03 	lds	r24, 0x0386
    388c:	90 91 87 03 	lds	r25, 0x0387
    3890:	28 17       	cp	r18, r24
    3892:	39 07       	cpc	r19, r25
    3894:	08 f4       	brcc	.+2      	; 0x3898 <backroute+0x6da>
    3896:	17 cf       	rjmp	.-466    	; 0x36c6 <backroute+0x508>
    3898:	80 91 61 03 	lds	r24, 0x0361
    389c:	28 2f       	mov	r18, r24
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	80 91 86 03 	lds	r24, 0x0386
    38a4:	90 91 87 03 	lds	r25, 0x0387
    38a8:	28 17       	cp	r18, r24
    38aa:	39 07       	cpc	r19, r25
    38ac:	08 f4       	brcc	.+2      	; 0x38b0 <backroute+0x6f2>
    38ae:	0b cf       	rjmp	.-490    	; 0x36c6 <backroute+0x508>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=2;
    38b0:	82 e0       	ldi	r24, 0x02	; 2
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	90 93 57 03 	sts	0x0357, r25
    38b8:	80 93 56 03 	sts	0x0356, r24
		left_degrees(2);
    38bc:	82 e0       	ldi	r24, 0x02	; 2
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
		forward_mm(5);
    38c4:	85 e0       	ldi	r24, 0x05	; 5
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		back_s=0;
    38cc:	10 92 79 03 	sts	0x0379, r1
    38d0:	10 92 78 03 	sts	0x0378, r1
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    38d4:	83 e0       	ldi	r24, 0x03	; 3
    38d6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    38da:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    38de:	82 e0       	ldi	r24, 0x02	; 2
    38e0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    38e4:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    38ee:	80 93 47 03 	sts	0x0347, r24
		back_s=0;
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
    38f2:	80 91 46 03 	lds	r24, 0x0346
    38f6:	80 34       	cpi	r24, 0x40	; 64
    38f8:	08 f4       	brcc	.+2      	; 0x38fc <backroute+0x73e>
    38fa:	29 c1       	rjmp	.+594    	; 0x3b4e <backroute+0x990>
    38fc:	80 91 45 03 	lds	r24, 0x0345
    3900:	80 34       	cpi	r24, 0x40	; 64
    3902:	08 f4       	brcc	.+2      	; 0x3906 <backroute+0x748>
    3904:	24 c1       	rjmp	.+584    	; 0x3b4e <backroute+0x990>
    3906:	80 91 47 03 	lds	r24, 0x0347
    390a:	80 34       	cpi	r24, 0x40	; 64
    390c:	08 f0       	brcs	.+2      	; 0x3910 <backroute+0x752>
    390e:	1f c1       	rjmp	.+574    	; 0x3b4e <backroute+0x990>
    3910:	80 91 5c 03 	lds	r24, 0x035C
    3914:	88 23       	and	r24, r24
    3916:	09 f4       	brne	.+2      	; 0x391a <backroute+0x75c>
    3918:	d3 ce       	rjmp	.-602    	; 0x36c0 <backroute+0x502>
    391a:	19 c1       	rjmp	.+562    	; 0x3b4e <backroute+0x990>
		Right_white_line = ADC_Conversion(1);
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		
		sample_sensor();
    391c:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
    3920:	c5 c0       	rjmp	.+394    	; 0x3aac <backroute+0x8ee>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		
		{
			obstflag=1;
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	80 93 5c 03 	sts	0x035C, r24
			stop();
    3928:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			//buzzer_on();
			_delay_ms(delayvalueback);
    392c:	80 91 32 02 	lds	r24, 0x0232
    3930:	90 91 33 02 	lds	r25, 0x0233
    3934:	cc 01       	movw	r24, r24
    3936:	a0 e0       	ldi	r26, 0x00	; 0
    3938:	b0 e0       	ldi	r27, 0x00	; 0
    393a:	bc 01       	movw	r22, r24
    393c:	cd 01       	movw	r24, r26
    393e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    3942:	dc 01       	movw	r26, r24
    3944:	cb 01       	movw	r24, r22
    3946:	fe 01       	movw	r30, r28
    3948:	e1 5a       	subi	r30, 0xA1	; 161
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	80 83       	st	Z, r24
    394e:	91 83       	std	Z+1, r25	; 0x01
    3950:	a2 83       	std	Z+2, r26	; 0x02
    3952:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3954:	8e 01       	movw	r16, r28
    3956:	05 5a       	subi	r16, 0xA5	; 165
    3958:	1f 4f       	sbci	r17, 0xFF	; 255
    395a:	fe 01       	movw	r30, r28
    395c:	e1 5a       	subi	r30, 0xA1	; 161
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	60 81       	ld	r22, Z
    3962:	71 81       	ldd	r23, Z+1	; 0x01
    3964:	82 81       	ldd	r24, Z+2	; 0x02
    3966:	93 81       	ldd	r25, Z+3	; 0x03
    3968:	26 e6       	ldi	r18, 0x66	; 102
    396a:	36 e6       	ldi	r19, 0x66	; 102
    396c:	46 e6       	ldi	r20, 0x66	; 102
    396e:	55 e4       	ldi	r21, 0x45	; 69
    3970:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	f8 01       	movw	r30, r16
    397a:	80 83       	st	Z, r24
    397c:	91 83       	std	Z+1, r25	; 0x01
    397e:	a2 83       	std	Z+2, r26	; 0x02
    3980:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3982:	fe 01       	movw	r30, r28
    3984:	e5 5a       	subi	r30, 0xA5	; 165
    3986:	ff 4f       	sbci	r31, 0xFF	; 255
    3988:	60 81       	ld	r22, Z
    398a:	71 81       	ldd	r23, Z+1	; 0x01
    398c:	82 81       	ldd	r24, Z+2	; 0x02
    398e:	93 81       	ldd	r25, Z+3	; 0x03
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	40 e8       	ldi	r20, 0x80	; 128
    3996:	5f e3       	ldi	r21, 0x3F	; 63
    3998:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    399c:	88 23       	and	r24, r24
    399e:	44 f4       	brge	.+16     	; 0x39b0 <backroute+0x7f2>
		__ticks = 1;
    39a0:	fe 01       	movw	r30, r28
    39a2:	e7 5a       	subi	r30, 0xA7	; 167
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	91 83       	std	Z+1, r25	; 0x01
    39ac:	80 83       	st	Z, r24
    39ae:	64 c0       	rjmp	.+200    	; 0x3a78 <backroute+0x8ba>
	else if (__tmp > 65535)
    39b0:	fe 01       	movw	r30, r28
    39b2:	e5 5a       	subi	r30, 0xA5	; 165
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	60 81       	ld	r22, Z
    39b8:	71 81       	ldd	r23, Z+1	; 0x01
    39ba:	82 81       	ldd	r24, Z+2	; 0x02
    39bc:	93 81       	ldd	r25, Z+3	; 0x03
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	3f ef       	ldi	r19, 0xFF	; 255
    39c2:	4f e7       	ldi	r20, 0x7F	; 127
    39c4:	57 e4       	ldi	r21, 0x47	; 71
    39c6:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    39ca:	18 16       	cp	r1, r24
    39cc:	0c f0       	brlt	.+2      	; 0x39d0 <backroute+0x812>
    39ce:	43 c0       	rjmp	.+134    	; 0x3a56 <backroute+0x898>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d0:	fe 01       	movw	r30, r28
    39d2:	e1 5a       	subi	r30, 0xA1	; 161
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	60 81       	ld	r22, Z
    39d8:	71 81       	ldd	r23, Z+1	; 0x01
    39da:	82 81       	ldd	r24, Z+2	; 0x02
    39dc:	93 81       	ldd	r25, Z+3	; 0x03
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	40 e2       	ldi	r20, 0x20	; 32
    39e4:	51 e4       	ldi	r21, 0x41	; 65
    39e6:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	8e 01       	movw	r16, r28
    39f0:	07 5a       	subi	r16, 0xA7	; 167
    39f2:	1f 4f       	sbci	r17, 0xFF	; 255
    39f4:	bc 01       	movw	r22, r24
    39f6:	cd 01       	movw	r24, r26
    39f8:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	f8 01       	movw	r30, r16
    3a02:	91 83       	std	Z+1, r25	; 0x01
    3a04:	80 83       	st	Z, r24
    3a06:	1f c0       	rjmp	.+62     	; 0x3a46 <backroute+0x888>
    3a08:	fe 01       	movw	r30, r28
    3a0a:	e9 5a       	subi	r30, 0xA9	; 169
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	80 e7       	ldi	r24, 0x70	; 112
    3a10:	91 e0       	ldi	r25, 0x01	; 1
    3a12:	91 83       	std	Z+1, r25	; 0x01
    3a14:	80 83       	st	Z, r24
    3a16:	fe 01       	movw	r30, r28
    3a18:	e9 5a       	subi	r30, 0xA9	; 169
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	80 81       	ld	r24, Z
    3a1e:	91 81       	ldd	r25, Z+1	; 0x01
    3a20:	01 97       	sbiw	r24, 0x01	; 1
    3a22:	f1 f7       	brne	.-4      	; 0x3a20 <backroute+0x862>
    3a24:	fe 01       	movw	r30, r28
    3a26:	e9 5a       	subi	r30, 0xA9	; 169
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	91 83       	std	Z+1, r25	; 0x01
    3a2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a2e:	de 01       	movw	r26, r28
    3a30:	a7 5a       	subi	r26, 0xA7	; 167
    3a32:	bf 4f       	sbci	r27, 0xFF	; 255
    3a34:	fe 01       	movw	r30, r28
    3a36:	e7 5a       	subi	r30, 0xA7	; 167
    3a38:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3a:	80 81       	ld	r24, Z
    3a3c:	91 81       	ldd	r25, Z+1	; 0x01
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	11 96       	adiw	r26, 0x01	; 1
    3a42:	9c 93       	st	X, r25
    3a44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a46:	fe 01       	movw	r30, r28
    3a48:	e7 5a       	subi	r30, 0xA7	; 167
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	80 81       	ld	r24, Z
    3a4e:	91 81       	ldd	r25, Z+1	; 0x01
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	d1 f6       	brne	.-76     	; 0x3a08 <backroute+0x84a>
    3a54:	27 c0       	rjmp	.+78     	; 0x3aa4 <backroute+0x8e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a56:	8e 01       	movw	r16, r28
    3a58:	07 5a       	subi	r16, 0xA7	; 167
    3a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	e5 5a       	subi	r30, 0xA5	; 165
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	60 81       	ld	r22, Z
    3a64:	71 81       	ldd	r23, Z+1	; 0x01
    3a66:	82 81       	ldd	r24, Z+2	; 0x02
    3a68:	93 81       	ldd	r25, Z+3	; 0x03
    3a6a:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	f8 01       	movw	r30, r16
    3a74:	91 83       	std	Z+1, r25	; 0x01
    3a76:	80 83       	st	Z, r24
    3a78:	de 01       	movw	r26, r28
    3a7a:	ab 5a       	subi	r26, 0xAB	; 171
    3a7c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e7 5a       	subi	r30, 0xA7	; 167
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	80 81       	ld	r24, Z
    3a86:	91 81       	ldd	r25, Z+1	; 0x01
    3a88:	8d 93       	st	X+, r24
    3a8a:	9c 93       	st	X, r25
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	eb 5a       	subi	r30, 0xAB	; 171
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	91 81       	ldd	r25, Z+1	; 0x01
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	f1 f7       	brne	.-4      	; 0x3a96 <backroute+0x8d8>
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	eb 5a       	subi	r30, 0xAB	; 171
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	91 83       	std	Z+1, r25	; 0x01
    3aa2:	80 83       	st	Z, r24
			sample_sensor();
    3aa4:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
			handle_obst_backward();
    3aa8:	0e 94 ff 28 	call	0x51fe	; 0x51fe <handle_obst_backward>
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    3aac:	80 91 5a 03 	lds	r24, 0x035A
    3ab0:	28 2f       	mov	r18, r24
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	80 91 08 02 	lds	r24, 0x0208
    3ab8:	90 91 09 02 	lds	r25, 0x0209
    3abc:	82 17       	cp	r24, r18
    3abe:	93 07       	cpc	r25, r19
    3ac0:	08 f4       	brcc	.+2      	; 0x3ac4 <backroute+0x906>
    3ac2:	2f cf       	rjmp	.-418    	; 0x3922 <backroute+0x764>
    3ac4:	80 91 5b 03 	lds	r24, 0x035B
    3ac8:	28 2f       	mov	r18, r24
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	80 91 86 03 	lds	r24, 0x0386
    3ad0:	90 91 87 03 	lds	r25, 0x0387
    3ad4:	28 17       	cp	r18, r24
    3ad6:	39 07       	cpc	r19, r25
    3ad8:	08 f4       	brcc	.+2      	; 0x3adc <backroute+0x91e>
    3ada:	23 cf       	rjmp	.-442    	; 0x3922 <backroute+0x764>
    3adc:	80 91 60 03 	lds	r24, 0x0360
    3ae0:	28 2f       	mov	r18, r24
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	80 91 86 03 	lds	r24, 0x0386
    3ae8:	90 91 87 03 	lds	r25, 0x0387
    3aec:	28 17       	cp	r18, r24
    3aee:	39 07       	cpc	r19, r25
    3af0:	08 f4       	brcc	.+2      	; 0x3af4 <backroute+0x936>
    3af2:	17 cf       	rjmp	.-466    	; 0x3922 <backroute+0x764>
    3af4:	80 91 61 03 	lds	r24, 0x0361
    3af8:	28 2f       	mov	r18, r24
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	80 91 86 03 	lds	r24, 0x0386
    3b00:	90 91 87 03 	lds	r25, 0x0387
    3b04:	28 17       	cp	r18, r24
    3b06:	39 07       	cpc	r19, r25
    3b08:	08 f4       	brcc	.+2      	; 0x3b0c <backroute+0x94e>
    3b0a:	0b cf       	rjmp	.-490    	; 0x3922 <backroute+0x764>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=3;
    3b0c:	83 e0       	ldi	r24, 0x03	; 3
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	90 93 57 03 	sts	0x0357, r25
    3b14:	80 93 56 03 	sts	0x0356, r24
		right_degrees(2);
    3b18:	82 e0       	ldi	r24, 0x02	; 2
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
		forward_mm(5);
    3b20:	85 e0       	ldi	r24, 0x05	; 5
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		back_s=0;
    3b28:	10 92 79 03 	sts	0x0379, r1
    3b2c:	10 92 78 03 	sts	0x0378, r1
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    3b30:	83 e0       	ldi	r24, 0x03	; 3
    3b32:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3b36:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    3b3a:	82 e0       	ldi	r24, 0x02	; 2
    3b3c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3b40:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3b4a:	80 93 47 03 	sts	0x0347, r24
		back_s=0;
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
    3b4e:	80 91 46 03 	lds	r24, 0x0346
    3b52:	80 34       	cpi	r24, 0x40	; 64
    3b54:	08 f4       	brcc	.+2      	; 0x3b58 <backroute+0x99a>
    3b56:	29 c1       	rjmp	.+594    	; 0x3daa <backroute+0xbec>
    3b58:	80 91 45 03 	lds	r24, 0x0345
    3b5c:	80 34       	cpi	r24, 0x40	; 64
    3b5e:	08 f0       	brcs	.+2      	; 0x3b62 <backroute+0x9a4>
    3b60:	24 c1       	rjmp	.+584    	; 0x3daa <backroute+0xbec>
    3b62:	80 91 47 03 	lds	r24, 0x0347
    3b66:	80 34       	cpi	r24, 0x40	; 64
    3b68:	08 f4       	brcc	.+2      	; 0x3b6c <backroute+0x9ae>
    3b6a:	1f c1       	rjmp	.+574    	; 0x3daa <backroute+0xbec>
    3b6c:	80 91 5c 03 	lds	r24, 0x035C
    3b70:	88 23       	and	r24, r24
    3b72:	09 f4       	brne	.+2      	; 0x3b76 <backroute+0x9b8>
    3b74:	d3 ce       	rjmp	.-602    	; 0x391c <backroute+0x75e>
    3b76:	19 c1       	rjmp	.+562    	; 0x3daa <backroute+0xbec>
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
    3b78:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
    3b7c:	c5 c0       	rjmp	.+394    	; 0x3d08 <backroute+0xb4a>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		
		{
			obstflag=1;
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	80 93 5c 03 	sts	0x035C, r24
			stop();
    3b84:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			//buzzer_on();
			_delay_ms(delayvalueback);
    3b88:	80 91 32 02 	lds	r24, 0x0232
    3b8c:	90 91 33 02 	lds	r25, 0x0233
    3b90:	cc 01       	movw	r24, r24
    3b92:	a0 e0       	ldi	r26, 0x00	; 0
    3b94:	b0 e0       	ldi	r27, 0x00	; 0
    3b96:	bc 01       	movw	r22, r24
    3b98:	cd 01       	movw	r24, r26
    3b9a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	ef 5a       	subi	r30, 0xAF	; 175
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	80 83       	st	Z, r24
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	a2 83       	std	Z+2, r26	; 0x02
    3bae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb0:	8e 01       	movw	r16, r28
    3bb2:	03 5b       	subi	r16, 0xB3	; 179
    3bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	ef 5a       	subi	r30, 0xAF	; 175
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	60 81       	ld	r22, Z
    3bbe:	71 81       	ldd	r23, Z+1	; 0x01
    3bc0:	82 81       	ldd	r24, Z+2	; 0x02
    3bc2:	93 81       	ldd	r25, Z+3	; 0x03
    3bc4:	26 e6       	ldi	r18, 0x66	; 102
    3bc6:	36 e6       	ldi	r19, 0x66	; 102
    3bc8:	46 e6       	ldi	r20, 0x66	; 102
    3bca:	55 e4       	ldi	r21, 0x45	; 69
    3bcc:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	f8 01       	movw	r30, r16
    3bd6:	80 83       	st	Z, r24
    3bd8:	91 83       	std	Z+1, r25	; 0x01
    3bda:	a2 83       	std	Z+2, r26	; 0x02
    3bdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bde:	fe 01       	movw	r30, r28
    3be0:	e3 5b       	subi	r30, 0xB3	; 179
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	60 81       	ld	r22, Z
    3be6:	71 81       	ldd	r23, Z+1	; 0x01
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	93 81       	ldd	r25, Z+3	; 0x03
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e8       	ldi	r20, 0x80	; 128
    3bf2:	5f e3       	ldi	r21, 0x3F	; 63
    3bf4:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    3bf8:	88 23       	and	r24, r24
    3bfa:	44 f4       	brge	.+16     	; 0x3c0c <backroute+0xa4e>
		__ticks = 1;
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	e5 5b       	subi	r30, 0xB5	; 181
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	91 83       	std	Z+1, r25	; 0x01
    3c08:	80 83       	st	Z, r24
    3c0a:	64 c0       	rjmp	.+200    	; 0x3cd4 <backroute+0xb16>
	else if (__tmp > 65535)
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e3 5b       	subi	r30, 0xB3	; 179
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	60 81       	ld	r22, Z
    3c14:	71 81       	ldd	r23, Z+1	; 0x01
    3c16:	82 81       	ldd	r24, Z+2	; 0x02
    3c18:	93 81       	ldd	r25, Z+3	; 0x03
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	3f ef       	ldi	r19, 0xFF	; 255
    3c1e:	4f e7       	ldi	r20, 0x7F	; 127
    3c20:	57 e4       	ldi	r21, 0x47	; 71
    3c22:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    3c26:	18 16       	cp	r1, r24
    3c28:	0c f0       	brlt	.+2      	; 0x3c2c <backroute+0xa6e>
    3c2a:	43 c0       	rjmp	.+134    	; 0x3cb2 <backroute+0xaf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ef 5a       	subi	r30, 0xAF	; 175
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e2       	ldi	r20, 0x20	; 32
    3c40:	51 e4       	ldi	r21, 0x41	; 65
    3c42:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	8e 01       	movw	r16, r28
    3c4c:	05 5b       	subi	r16, 0xB5	; 181
    3c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c50:	bc 01       	movw	r22, r24
    3c52:	cd 01       	movw	r24, r26
    3c54:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	91 83       	std	Z+1, r25	; 0x01
    3c60:	80 83       	st	Z, r24
    3c62:	1f c0       	rjmp	.+62     	; 0x3ca2 <backroute+0xae4>
    3c64:	fe 01       	movw	r30, r28
    3c66:	e7 5b       	subi	r30, 0xB7	; 183
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	80 e7       	ldi	r24, 0x70	; 112
    3c6c:	91 e0       	ldi	r25, 0x01	; 1
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	80 83       	st	Z, r24
    3c72:	fe 01       	movw	r30, r28
    3c74:	e7 5b       	subi	r30, 0xB7	; 183
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	80 81       	ld	r24, Z
    3c7a:	91 81       	ldd	r25, Z+1	; 0x01
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	f1 f7       	brne	.-4      	; 0x3c7c <backroute+0xabe>
    3c80:	fe 01       	movw	r30, r28
    3c82:	e7 5b       	subi	r30, 0xB7	; 183
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8a:	de 01       	movw	r26, r28
    3c8c:	a5 5b       	subi	r26, 0xB5	; 181
    3c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c90:	fe 01       	movw	r30, r28
    3c92:	e5 5b       	subi	r30, 0xB5	; 181
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	80 81       	ld	r24, Z
    3c98:	91 81       	ldd	r25, Z+1	; 0x01
    3c9a:	01 97       	sbiw	r24, 0x01	; 1
    3c9c:	11 96       	adiw	r26, 0x01	; 1
    3c9e:	9c 93       	st	X, r25
    3ca0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	e5 5b       	subi	r30, 0xB5	; 181
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 81       	ld	r24, Z
    3caa:	91 81       	ldd	r25, Z+1	; 0x01
    3cac:	00 97       	sbiw	r24, 0x00	; 0
    3cae:	d1 f6       	brne	.-76     	; 0x3c64 <backroute+0xaa6>
    3cb0:	27 c0       	rjmp	.+78     	; 0x3d00 <backroute+0xb42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb2:	8e 01       	movw	r16, r28
    3cb4:	05 5b       	subi	r16, 0xB5	; 181
    3cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb8:	fe 01       	movw	r30, r28
    3cba:	e3 5b       	subi	r30, 0xB3	; 179
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	60 81       	ld	r22, Z
    3cc0:	71 81       	ldd	r23, Z+1	; 0x01
    3cc2:	82 81       	ldd	r24, Z+2	; 0x02
    3cc4:	93 81       	ldd	r25, Z+3	; 0x03
    3cc6:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    3cca:	dc 01       	movw	r26, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	f8 01       	movw	r30, r16
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	80 83       	st	Z, r24
    3cd4:	de 01       	movw	r26, r28
    3cd6:	a9 5b       	subi	r26, 0xB9	; 185
    3cd8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e5 5b       	subi	r30, 0xB5	; 181
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	80 81       	ld	r24, Z
    3ce2:	91 81       	ldd	r25, Z+1	; 0x01
    3ce4:	8d 93       	st	X+, r24
    3ce6:	9c 93       	st	X, r25
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e9 5b       	subi	r30, 0xB9	; 185
    3cec:	ff 4f       	sbci	r31, 0xFF	; 255
    3cee:	80 81       	ld	r24, Z
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	01 97       	sbiw	r24, 0x01	; 1
    3cf4:	f1 f7       	brne	.-4      	; 0x3cf2 <backroute+0xb34>
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	e9 5b       	subi	r30, 0xB9	; 185
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	91 83       	std	Z+1, r25	; 0x01
    3cfe:	80 83       	st	Z, r24
			sample_sensor();
    3d00:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
			handle_obst_backward();
    3d04:	0e 94 ff 28 	call	0x51fe	; 0x51fe <handle_obst_backward>
		Right_white_line = ADC_Conversion(1);
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    3d08:	80 91 5a 03 	lds	r24, 0x035A
    3d0c:	28 2f       	mov	r18, r24
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	80 91 08 02 	lds	r24, 0x0208
    3d14:	90 91 09 02 	lds	r25, 0x0209
    3d18:	82 17       	cp	r24, r18
    3d1a:	93 07       	cpc	r25, r19
    3d1c:	08 f4       	brcc	.+2      	; 0x3d20 <backroute+0xb62>
    3d1e:	2f cf       	rjmp	.-418    	; 0x3b7e <backroute+0x9c0>
    3d20:	80 91 5b 03 	lds	r24, 0x035B
    3d24:	28 2f       	mov	r18, r24
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	80 91 86 03 	lds	r24, 0x0386
    3d2c:	90 91 87 03 	lds	r25, 0x0387
    3d30:	28 17       	cp	r18, r24
    3d32:	39 07       	cpc	r19, r25
    3d34:	08 f4       	brcc	.+2      	; 0x3d38 <backroute+0xb7a>
    3d36:	23 cf       	rjmp	.-442    	; 0x3b7e <backroute+0x9c0>
    3d38:	80 91 60 03 	lds	r24, 0x0360
    3d3c:	28 2f       	mov	r18, r24
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	80 91 86 03 	lds	r24, 0x0386
    3d44:	90 91 87 03 	lds	r25, 0x0387
    3d48:	28 17       	cp	r18, r24
    3d4a:	39 07       	cpc	r19, r25
    3d4c:	08 f4       	brcc	.+2      	; 0x3d50 <backroute+0xb92>
    3d4e:	17 cf       	rjmp	.-466    	; 0x3b7e <backroute+0x9c0>
    3d50:	80 91 61 03 	lds	r24, 0x0361
    3d54:	28 2f       	mov	r18, r24
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	80 91 86 03 	lds	r24, 0x0386
    3d5c:	90 91 87 03 	lds	r25, 0x0387
    3d60:	28 17       	cp	r18, r24
    3d62:	39 07       	cpc	r19, r25
    3d64:	08 f4       	brcc	.+2      	; 0x3d68 <backroute+0xbaa>
    3d66:	0b cf       	rjmp	.-490    	; 0x3b7e <backroute+0x9c0>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=4;
    3d68:	84 e0       	ldi	r24, 0x04	; 4
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	90 93 57 03 	sts	0x0357, r25
    3d70:	80 93 56 03 	sts	0x0356, r24
		right_degrees(5);
    3d74:	85 e0       	ldi	r24, 0x05	; 5
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
		forward_mm(2);
    3d7c:	82 e0       	ldi	r24, 0x02	; 2
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		back_s=0;
    3d84:	10 92 79 03 	sts	0x0379, r1
    3d88:	10 92 78 03 	sts	0x0378, r1
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    3d8c:	83 e0       	ldi	r24, 0x03	; 3
    3d8e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3d92:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    3d96:	82 e0       	ldi	r24, 0x02	; 2
    3d98:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3d9c:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3da6:	80 93 47 03 	sts	0x0347, r24
		back_s=0;
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
    3daa:	80 91 46 03 	lds	r24, 0x0346
    3dae:	80 34       	cpi	r24, 0x40	; 64
    3db0:	08 f0       	brcs	.+2      	; 0x3db4 <backroute+0xbf6>
    3db2:	fb c0       	rjmp	.+502    	; 0x3faa <backroute+0xdec>
    3db4:	80 91 45 03 	lds	r24, 0x0345
    3db8:	80 34       	cpi	r24, 0x40	; 64
    3dba:	08 f0       	brcs	.+2      	; 0x3dbe <backroute+0xc00>
    3dbc:	f6 c0       	rjmp	.+492    	; 0x3faa <backroute+0xdec>
    3dbe:	80 91 47 03 	lds	r24, 0x0347
    3dc2:	80 34       	cpi	r24, 0x40	; 64
    3dc4:	08 f4       	brcc	.+2      	; 0x3dc8 <backroute+0xc0a>
    3dc6:	f1 c0       	rjmp	.+482    	; 0x3faa <backroute+0xdec>
    3dc8:	80 91 5c 03 	lds	r24, 0x035C
    3dcc:	88 23       	and	r24, r24
    3dce:	09 f4       	brne	.+2      	; 0x3dd2 <backroute+0xc14>
    3dd0:	d3 ce       	rjmp	.-602    	; 0x3b78 <backroute+0x9ba>
    3dd2:	eb c0       	rjmp	.+470    	; 0x3faa <backroute+0xdec>
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
    3dd4:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
    3dd8:	97 c0       	rjmp	.+302    	; 0x3f08 <backroute+0xd4a>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		
		{
			obstflag=1;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	80 93 5c 03 	sts	0x035C, r24
			stop();
    3de0:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			//buzzer_on();
			_delay_ms(delayvalueback);
    3de4:	80 91 32 02 	lds	r24, 0x0232
    3de8:	90 91 33 02 	lds	r25, 0x0233
    3dec:	cc 01       	movw	r24, r24
    3dee:	a0 e0       	ldi	r26, 0x00	; 0
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	fe 01       	movw	r30, r28
    3e00:	ed 5b       	subi	r30, 0xBD	; 189
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	80 83       	st	Z, r24
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	a2 83       	std	Z+2, r26	; 0x02
    3e0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e0c:	8e 01       	movw	r16, r28
    3e0e:	01 5c       	subi	r16, 0xC1	; 193
    3e10:	1f 4f       	sbci	r17, 0xFF	; 255
    3e12:	fe 01       	movw	r30, r28
    3e14:	ed 5b       	subi	r30, 0xBD	; 189
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	60 81       	ld	r22, Z
    3e1a:	71 81       	ldd	r23, Z+1	; 0x01
    3e1c:	82 81       	ldd	r24, Z+2	; 0x02
    3e1e:	93 81       	ldd	r25, Z+3	; 0x03
    3e20:	26 e6       	ldi	r18, 0x66	; 102
    3e22:	36 e6       	ldi	r19, 0x66	; 102
    3e24:	46 e6       	ldi	r20, 0x66	; 102
    3e26:	55 e4       	ldi	r21, 0x45	; 69
    3e28:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	f8 01       	movw	r30, r16
    3e32:	80 83       	st	Z, r24
    3e34:	91 83       	std	Z+1, r25	; 0x01
    3e36:	a2 83       	std	Z+2, r26	; 0x02
    3e38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	ff 96       	adiw	r30, 0x3f	; 63
    3e3e:	60 81       	ld	r22, Z
    3e40:	71 81       	ldd	r23, Z+1	; 0x01
    3e42:	82 81       	ldd	r24, Z+2	; 0x02
    3e44:	93 81       	ldd	r25, Z+3	; 0x03
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	40 e8       	ldi	r20, 0x80	; 128
    3e4c:	5f e3       	ldi	r21, 0x3F	; 63
    3e4e:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    3e52:	88 23       	and	r24, r24
    3e54:	2c f4       	brge	.+10     	; 0x3e60 <backroute+0xca2>
		__ticks = 1;
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	9e af       	std	Y+62, r25	; 0x3e
    3e5c:	8d af       	std	Y+61, r24	; 0x3d
    3e5e:	46 c0       	rjmp	.+140    	; 0x3eec <backroute+0xd2e>
	else if (__tmp > 65535)
    3e60:	fe 01       	movw	r30, r28
    3e62:	ff 96       	adiw	r30, 0x3f	; 63
    3e64:	60 81       	ld	r22, Z
    3e66:	71 81       	ldd	r23, Z+1	; 0x01
    3e68:	82 81       	ldd	r24, Z+2	; 0x02
    3e6a:	93 81       	ldd	r25, Z+3	; 0x03
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	3f ef       	ldi	r19, 0xFF	; 255
    3e70:	4f e7       	ldi	r20, 0x7F	; 127
    3e72:	57 e4       	ldi	r21, 0x47	; 71
    3e74:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    3e78:	18 16       	cp	r1, r24
    3e7a:	64 f5       	brge	.+88     	; 0x3ed4 <backroute+0xd16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	ed 5b       	subi	r30, 0xBD	; 189
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e2       	ldi	r20, 0x20	; 32
    3e90:	51 e4       	ldi	r21, 0x41	; 65
    3e92:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	bc 01       	movw	r22, r24
    3e9c:	cd 01       	movw	r24, r26
    3e9e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	9e af       	std	Y+62, r25	; 0x3e
    3ea8:	8d af       	std	Y+61, r24	; 0x3d
    3eaa:	0f c0       	rjmp	.+30     	; 0x3eca <backroute+0xd0c>
    3eac:	80 e7       	ldi	r24, 0x70	; 112
    3eae:	91 e0       	ldi	r25, 0x01	; 1
    3eb0:	9c af       	std	Y+60, r25	; 0x3c
    3eb2:	8b af       	std	Y+59, r24	; 0x3b
    3eb4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3eb6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3eb8:	01 97       	sbiw	r24, 0x01	; 1
    3eba:	f1 f7       	brne	.-4      	; 0x3eb8 <backroute+0xcfa>
    3ebc:	9c af       	std	Y+60, r25	; 0x3c
    3ebe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ec2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	9e af       	std	Y+62, r25	; 0x3e
    3ec8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eca:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ecc:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ece:	00 97       	sbiw	r24, 0x00	; 0
    3ed0:	69 f7       	brne	.-38     	; 0x3eac <backroute+0xcee>
    3ed2:	16 c0       	rjmp	.+44     	; 0x3f00 <backroute+0xd42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	ff 96       	adiw	r30, 0x3f	; 63
    3ed8:	60 81       	ld	r22, Z
    3eda:	71 81       	ldd	r23, Z+1	; 0x01
    3edc:	82 81       	ldd	r24, Z+2	; 0x02
    3ede:	93 81       	ldd	r25, Z+3	; 0x03
    3ee0:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	9e af       	std	Y+62, r25	; 0x3e
    3eea:	8d af       	std	Y+61, r24	; 0x3d
    3eec:	8d ad       	ldd	r24, Y+61	; 0x3d
    3eee:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ef0:	9a af       	std	Y+58, r25	; 0x3a
    3ef2:	89 af       	std	Y+57, r24	; 0x39
    3ef4:	89 ad       	ldd	r24, Y+57	; 0x39
    3ef6:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ef8:	01 97       	sbiw	r24, 0x01	; 1
    3efa:	f1 f7       	brne	.-4      	; 0x3ef8 <backroute+0xd3a>
    3efc:	9a af       	std	Y+58, r25	; 0x3a
    3efe:	89 af       	std	Y+57, r24	; 0x39
			sample_sensor();
    3f00:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
			handle_obst_backward();
    3f04:	0e 94 ff 28 	call	0x51fe	; 0x51fe <handle_obst_backward>
		Right_white_line = ADC_Conversion(1);
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    3f08:	80 91 5a 03 	lds	r24, 0x035A
    3f0c:	28 2f       	mov	r18, r24
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	80 91 08 02 	lds	r24, 0x0208
    3f14:	90 91 09 02 	lds	r25, 0x0209
    3f18:	82 17       	cp	r24, r18
    3f1a:	93 07       	cpc	r25, r19
    3f1c:	08 f4       	brcc	.+2      	; 0x3f20 <backroute+0xd62>
    3f1e:	5d cf       	rjmp	.-326    	; 0x3dda <backroute+0xc1c>
    3f20:	80 91 5b 03 	lds	r24, 0x035B
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	80 91 86 03 	lds	r24, 0x0386
    3f2c:	90 91 87 03 	lds	r25, 0x0387
    3f30:	28 17       	cp	r18, r24
    3f32:	39 07       	cpc	r19, r25
    3f34:	08 f4       	brcc	.+2      	; 0x3f38 <backroute+0xd7a>
    3f36:	51 cf       	rjmp	.-350    	; 0x3dda <backroute+0xc1c>
    3f38:	80 91 60 03 	lds	r24, 0x0360
    3f3c:	28 2f       	mov	r18, r24
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	80 91 86 03 	lds	r24, 0x0386
    3f44:	90 91 87 03 	lds	r25, 0x0387
    3f48:	28 17       	cp	r18, r24
    3f4a:	39 07       	cpc	r19, r25
    3f4c:	08 f4       	brcc	.+2      	; 0x3f50 <backroute+0xd92>
    3f4e:	45 cf       	rjmp	.-374    	; 0x3dda <backroute+0xc1c>
    3f50:	80 91 61 03 	lds	r24, 0x0361
    3f54:	28 2f       	mov	r18, r24
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	80 91 86 03 	lds	r24, 0x0386
    3f5c:	90 91 87 03 	lds	r25, 0x0387
    3f60:	28 17       	cp	r18, r24
    3f62:	39 07       	cpc	r19, r25
    3f64:	08 f4       	brcc	.+2      	; 0x3f68 <backroute+0xdaa>
    3f66:	39 cf       	rjmp	.-398    	; 0x3dda <backroute+0xc1c>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=5;
    3f68:	85 e0       	ldi	r24, 0x05	; 5
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	90 93 57 03 	sts	0x0357, r25
    3f70:	80 93 56 03 	sts	0x0356, r24
		left_degrees(5);
    3f74:	85 e0       	ldi	r24, 0x05	; 5
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
		forward_mm(2);
    3f7c:	82 e0       	ldi	r24, 0x02	; 2
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		back_s=0;
    3f84:	10 92 79 03 	sts	0x0379, r1
    3f88:	10 92 78 03 	sts	0x0378, r1
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    3f8c:	83 e0       	ldi	r24, 0x03	; 3
    3f8e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3f92:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    3f96:	82 e0       	ldi	r24, 0x02	; 2
    3f98:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3f9c:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    3fa6:	80 93 47 03 	sts	0x0347, r24
		back_s=0;
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
    3faa:	80 91 46 03 	lds	r24, 0x0346
    3fae:	80 34       	cpi	r24, 0x40	; 64
    3fb0:	68 f4       	brcc	.+26     	; 0x3fcc <backroute+0xe0e>
    3fb2:	80 91 45 03 	lds	r24, 0x0345
    3fb6:	80 34       	cpi	r24, 0x40	; 64
    3fb8:	48 f0       	brcs	.+18     	; 0x3fcc <backroute+0xe0e>
    3fba:	80 91 47 03 	lds	r24, 0x0347
    3fbe:	81 34       	cpi	r24, 0x41	; 65
    3fc0:	28 f4       	brcc	.+10     	; 0x3fcc <backroute+0xe0e>
    3fc2:	80 91 5c 03 	lds	r24, 0x035C
    3fc6:	88 23       	and	r24, r24
    3fc8:	09 f4       	brne	.+2      	; 0x3fcc <backroute+0xe0e>
    3fca:	04 cf       	rjmp	.-504    	; 0x3dd4 <backroute+0xc16>
		Right_white_line = ADC_Conversion(1);
	}
	/*Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
  Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
  Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor*/
	if((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (flag==0) && (last_choice!=6) && (last_choice!=9) && (obstflag==0))
    3fcc:	80 91 46 03 	lds	r24, 0x0346
    3fd0:	80 34       	cpi	r24, 0x40	; 64
    3fd2:	08 f4       	brcc	.+2      	; 0x3fd6 <backroute+0xe18>
    3fd4:	02 c2       	rjmp	.+1028   	; 0x43da <backroute+0x121c>
    3fd6:	80 91 45 03 	lds	r24, 0x0345
    3fda:	80 34       	cpi	r24, 0x40	; 64
    3fdc:	08 f4       	brcc	.+2      	; 0x3fe0 <backroute+0xe22>
    3fde:	fd c1       	rjmp	.+1018   	; 0x43da <backroute+0x121c>
    3fe0:	80 91 47 03 	lds	r24, 0x0347
    3fe4:	80 34       	cpi	r24, 0x40	; 64
    3fe6:	08 f4       	brcc	.+2      	; 0x3fea <backroute+0xe2c>
    3fe8:	f8 c1       	rjmp	.+1008   	; 0x43da <backroute+0x121c>
    3fea:	80 91 44 03 	lds	r24, 0x0344
    3fee:	88 23       	and	r24, r24
    3ff0:	09 f0       	breq	.+2      	; 0x3ff4 <backroute+0xe36>
    3ff2:	f3 c1       	rjmp	.+998    	; 0x43da <backroute+0x121c>
    3ff4:	80 91 56 03 	lds	r24, 0x0356
    3ff8:	90 91 57 03 	lds	r25, 0x0357
    3ffc:	86 30       	cpi	r24, 0x06	; 6
    3ffe:	91 05       	cpc	r25, r1
    4000:	09 f4       	brne	.+2      	; 0x4004 <backroute+0xe46>
    4002:	eb c1       	rjmp	.+982    	; 0x43da <backroute+0x121c>
    4004:	80 91 56 03 	lds	r24, 0x0356
    4008:	90 91 57 03 	lds	r25, 0x0357
    400c:	89 30       	cpi	r24, 0x09	; 9
    400e:	91 05       	cpc	r25, r1
    4010:	09 f4       	brne	.+2      	; 0x4014 <backroute+0xe56>
    4012:	e3 c1       	rjmp	.+966    	; 0x43da <backroute+0x121c>
    4014:	80 91 5c 03 	lds	r24, 0x035C
    4018:	88 23       	and	r24, r24
    401a:	09 f0       	breq	.+2      	; 0x401e <backroute+0xe60>
    401c:	de c1       	rjmp	.+956    	; 0x43da <backroute+0x121c>
	{
		last_choice=6;
    401e:	86 e0       	ldi	r24, 0x06	; 6
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	90 93 57 03 	sts	0x0357, r25
    4026:	80 93 56 03 	sts	0x0356, r24
		flag=1;
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	80 93 44 03 	sts	0x0344, r24
		back_s=0;
    4030:	10 92 79 03 	sts	0x0379, r1
    4034:	10 92 78 03 	sts	0x0378, r1
		stop();
    4038:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
		if(flagrightturn==0)
    403c:	80 91 82 03 	lds	r24, 0x0382
    4040:	90 91 83 03 	lds	r25, 0x0383
    4044:	00 97       	sbiw	r24, 0x00	; 0
    4046:	d1 f4       	brne	.+52     	; 0x407c <backroute+0xebe>
		{
			if(dest_backward==1)
    4048:	80 91 58 03 	lds	r24, 0x0358
    404c:	90 91 59 03 	lds	r25, 0x0359
    4050:	81 30       	cpi	r24, 0x01	; 1
    4052:	91 05       	cpc	r25, r1
    4054:	51 f4       	brne	.+20     	; 0x406a <backroute+0xeac>
			{
				currentcounty = currentcounty-1;
    4056:	80 91 76 03 	lds	r24, 0x0376
    405a:	90 91 77 03 	lds	r25, 0x0377
    405e:	01 97       	sbiw	r24, 0x01	; 1
    4060:	90 93 77 03 	sts	0x0377, r25
    4064:	80 93 76 03 	sts	0x0376, r24
    4068:	09 c0       	rjmp	.+18     	; 0x407c <backroute+0xebe>
			}
			else 
			{
				currentcounty = currentcounty+1;
    406a:	80 91 76 03 	lds	r24, 0x0376
    406e:	90 91 77 03 	lds	r25, 0x0377
    4072:	01 96       	adiw	r24, 0x01	; 1
    4074:	90 93 77 03 	sts	0x0377, r25
    4078:	80 93 76 03 	sts	0x0376, r24
			}
		}
		if(flagrightturn==1)
    407c:	80 91 82 03 	lds	r24, 0x0382
    4080:	90 91 83 03 	lds	r25, 0x0383
    4084:	81 30       	cpi	r24, 0x01	; 1
    4086:	91 05       	cpc	r25, r1
    4088:	49 f4       	brne	.+18     	; 0x409c <backroute+0xede>
		{
			currentcountx=currentcountx-1;
    408a:	80 91 74 03 	lds	r24, 0x0374
    408e:	90 91 75 03 	lds	r25, 0x0375
    4092:	01 97       	sbiw	r24, 0x01	; 1
    4094:	90 93 75 03 	sts	0x0375, r25
    4098:	80 93 74 03 	sts	0x0374, r24
		//if(flag2==1)
		//{
		//currentcountx = currentcountx + 1;
		//}
		//flag2=2;
		forward_mm(5);
    409c:	85 e0       	ldi	r24, 0x05	; 5
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		if((currentcounty == des_county) && y_reached==0)
    40a4:	20 91 76 03 	lds	r18, 0x0376
    40a8:	30 91 77 03 	lds	r19, 0x0377
    40ac:	80 91 06 02 	lds	r24, 0x0206
    40b0:	90 91 07 02 	lds	r25, 0x0207
    40b4:	28 17       	cp	r18, r24
    40b6:	39 07       	cpc	r19, r25
    40b8:	09 f0       	breq	.+2      	; 0x40bc <backroute+0xefe>
    40ba:	11 c1       	rjmp	.+546    	; 0x42de <backroute+0x1120>
    40bc:	80 91 7c 03 	lds	r24, 0x037C
    40c0:	90 91 7d 03 	lds	r25, 0x037D
    40c4:	00 97       	sbiw	r24, 0x00	; 0
    40c6:	09 f0       	breq	.+2      	; 0x40ca <backroute+0xf0c>
    40c8:	0a c1       	rjmp	.+532    	; 0x42de <backroute+0x1120>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	aa ef       	ldi	r26, 0xFA	; 250
    40d0:	b3 e4       	ldi	r27, 0x43	; 67
    40d2:	8d ab       	std	Y+53, r24	; 0x35
    40d4:	9e ab       	std	Y+54, r25	; 0x36
    40d6:	af ab       	std	Y+55, r26	; 0x37
    40d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40da:	6d a9       	ldd	r22, Y+53	; 0x35
    40dc:	7e a9       	ldd	r23, Y+54	; 0x36
    40de:	8f a9       	ldd	r24, Y+55	; 0x37
    40e0:	98 ad       	ldd	r25, Y+56	; 0x38
    40e2:	26 e6       	ldi	r18, 0x66	; 102
    40e4:	36 e6       	ldi	r19, 0x66	; 102
    40e6:	46 e6       	ldi	r20, 0x66	; 102
    40e8:	55 e4       	ldi	r21, 0x45	; 69
    40ea:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	89 ab       	std	Y+49, r24	; 0x31
    40f4:	9a ab       	std	Y+50, r25	; 0x32
    40f6:	ab ab       	std	Y+51, r26	; 0x33
    40f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40fa:	69 a9       	ldd	r22, Y+49	; 0x31
    40fc:	7a a9       	ldd	r23, Y+50	; 0x32
    40fe:	8b a9       	ldd	r24, Y+51	; 0x33
    4100:	9c a9       	ldd	r25, Y+52	; 0x34
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e8       	ldi	r20, 0x80	; 128
    4108:	5f e3       	ldi	r21, 0x3F	; 63
    410a:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    410e:	88 23       	and	r24, r24
    4110:	2c f4       	brge	.+10     	; 0x411c <backroute+0xf5e>
		__ticks = 1;
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	98 ab       	std	Y+48, r25	; 0x30
    4118:	8f a7       	std	Y+47, r24	; 0x2f
    411a:	3f c0       	rjmp	.+126    	; 0x419a <backroute+0xfdc>
	else if (__tmp > 65535)
    411c:	69 a9       	ldd	r22, Y+49	; 0x31
    411e:	7a a9       	ldd	r23, Y+50	; 0x32
    4120:	8b a9       	ldd	r24, Y+51	; 0x33
    4122:	9c a9       	ldd	r25, Y+52	; 0x34
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	3f ef       	ldi	r19, 0xFF	; 255
    4128:	4f e7       	ldi	r20, 0x7F	; 127
    412a:	57 e4       	ldi	r21, 0x47	; 71
    412c:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    4130:	18 16       	cp	r1, r24
    4132:	4c f5       	brge	.+82     	; 0x4186 <backroute+0xfc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4134:	6d a9       	ldd	r22, Y+53	; 0x35
    4136:	7e a9       	ldd	r23, Y+54	; 0x36
    4138:	8f a9       	ldd	r24, Y+55	; 0x37
    413a:	98 ad       	ldd	r25, Y+56	; 0x38
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e2       	ldi	r20, 0x20	; 32
    4142:	51 e4       	ldi	r21, 0x41	; 65
    4144:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	bc 01       	movw	r22, r24
    414e:	cd 01       	movw	r24, r26
    4150:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	98 ab       	std	Y+48, r25	; 0x30
    415a:	8f a7       	std	Y+47, r24	; 0x2f
    415c:	0f c0       	rjmp	.+30     	; 0x417c <backroute+0xfbe>
    415e:	80 e7       	ldi	r24, 0x70	; 112
    4160:	91 e0       	ldi	r25, 0x01	; 1
    4162:	9e a7       	std	Y+46, r25	; 0x2e
    4164:	8d a7       	std	Y+45, r24	; 0x2d
    4166:	8d a5       	ldd	r24, Y+45	; 0x2d
    4168:	9e a5       	ldd	r25, Y+46	; 0x2e
    416a:	01 97       	sbiw	r24, 0x01	; 1
    416c:	f1 f7       	brne	.-4      	; 0x416a <backroute+0xfac>
    416e:	9e a7       	std	Y+46, r25	; 0x2e
    4170:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4172:	8f a5       	ldd	r24, Y+47	; 0x2f
    4174:	98 a9       	ldd	r25, Y+48	; 0x30
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	98 ab       	std	Y+48, r25	; 0x30
    417a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417c:	8f a5       	ldd	r24, Y+47	; 0x2f
    417e:	98 a9       	ldd	r25, Y+48	; 0x30
    4180:	00 97       	sbiw	r24, 0x00	; 0
    4182:	69 f7       	brne	.-38     	; 0x415e <backroute+0xfa0>
    4184:	14 c0       	rjmp	.+40     	; 0x41ae <backroute+0xff0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4186:	69 a9       	ldd	r22, Y+49	; 0x31
    4188:	7a a9       	ldd	r23, Y+50	; 0x32
    418a:	8b a9       	ldd	r24, Y+51	; 0x33
    418c:	9c a9       	ldd	r25, Y+52	; 0x34
    418e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	98 ab       	std	Y+48, r25	; 0x30
    4198:	8f a7       	std	Y+47, r24	; 0x2f
    419a:	8f a5       	ldd	r24, Y+47	; 0x2f
    419c:	98 a9       	ldd	r25, Y+48	; 0x30
    419e:	9c a7       	std	Y+44, r25	; 0x2c
    41a0:	8b a7       	std	Y+43, r24	; 0x2b
    41a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    41a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	f1 f7       	brne	.-4      	; 0x41a6 <backroute+0xfe8>
    41aa:	9c a7       	std	Y+44, r25	; 0x2c
    41ac:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(500);
			flagrightturn=1;
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	90 93 83 03 	sts	0x0383, r25
    41b6:	80 93 82 03 	sts	0x0382, r24
			forward_mm(50); //Moves robot forward 100mm
    41ba:	82 e3       	ldi	r24, 0x32	; 50
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
			if(dest_backward==1)
    41c2:	80 91 58 03 	lds	r24, 0x0358
    41c6:	90 91 59 03 	lds	r25, 0x0359
    41ca:	81 30       	cpi	r24, 0x01	; 1
    41cc:	91 05       	cpc	r25, r1
    41ce:	29 f4       	brne	.+10     	; 0x41da <backroute+0x101c>
			{
				right_degrees(90);
    41d0:	8a e5       	ldi	r24, 0x5A	; 90
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
    41d8:	04 c0       	rjmp	.+8      	; 0x41e2 <backroute+0x1024>
			}
			else
			{
				left_degrees(90);
    41da:	8a e5       	ldi	r24, 0x5A	; 90
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	aa ef       	ldi	r26, 0xFA	; 250
    41e8:	b3 e4       	ldi	r27, 0x43	; 67
    41ea:	8f a3       	std	Y+39, r24	; 0x27
    41ec:	98 a7       	std	Y+40, r25	; 0x28
    41ee:	a9 a7       	std	Y+41, r26	; 0x29
    41f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f2:	6f a1       	ldd	r22, Y+39	; 0x27
    41f4:	78 a5       	ldd	r23, Y+40	; 0x28
    41f6:	89 a5       	ldd	r24, Y+41	; 0x29
    41f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    41fa:	26 e6       	ldi	r18, 0x66	; 102
    41fc:	36 e6       	ldi	r19, 0x66	; 102
    41fe:	46 e6       	ldi	r20, 0x66	; 102
    4200:	55 e4       	ldi	r21, 0x45	; 69
    4202:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	8b a3       	std	Y+35, r24	; 0x23
    420c:	9c a3       	std	Y+36, r25	; 0x24
    420e:	ad a3       	std	Y+37, r26	; 0x25
    4210:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4212:	6b a1       	ldd	r22, Y+35	; 0x23
    4214:	7c a1       	ldd	r23, Y+36	; 0x24
    4216:	8d a1       	ldd	r24, Y+37	; 0x25
    4218:	9e a1       	ldd	r25, Y+38	; 0x26
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	30 e0       	ldi	r19, 0x00	; 0
    421e:	40 e8       	ldi	r20, 0x80	; 128
    4220:	5f e3       	ldi	r21, 0x3F	; 63
    4222:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    4226:	88 23       	and	r24, r24
    4228:	2c f4       	brge	.+10     	; 0x4234 <backroute+0x1076>
		__ticks = 1;
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	9a a3       	std	Y+34, r25	; 0x22
    4230:	89 a3       	std	Y+33, r24	; 0x21
    4232:	3f c0       	rjmp	.+126    	; 0x42b2 <backroute+0x10f4>
	else if (__tmp > 65535)
    4234:	6b a1       	ldd	r22, Y+35	; 0x23
    4236:	7c a1       	ldd	r23, Y+36	; 0x24
    4238:	8d a1       	ldd	r24, Y+37	; 0x25
    423a:	9e a1       	ldd	r25, Y+38	; 0x26
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	3f ef       	ldi	r19, 0xFF	; 255
    4240:	4f e7       	ldi	r20, 0x7F	; 127
    4242:	57 e4       	ldi	r21, 0x47	; 71
    4244:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    4248:	18 16       	cp	r1, r24
    424a:	4c f5       	brge	.+82     	; 0x429e <backroute+0x10e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    424c:	6f a1       	ldd	r22, Y+39	; 0x27
    424e:	78 a5       	ldd	r23, Y+40	; 0x28
    4250:	89 a5       	ldd	r24, Y+41	; 0x29
    4252:	9a a5       	ldd	r25, Y+42	; 0x2a
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	40 e2       	ldi	r20, 0x20	; 32
    425a:	51 e4       	ldi	r21, 0x41	; 65
    425c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	bc 01       	movw	r22, r24
    4266:	cd 01       	movw	r24, r26
    4268:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	9a a3       	std	Y+34, r25	; 0x22
    4272:	89 a3       	std	Y+33, r24	; 0x21
    4274:	0f c0       	rjmp	.+30     	; 0x4294 <backroute+0x10d6>
    4276:	80 e7       	ldi	r24, 0x70	; 112
    4278:	91 e0       	ldi	r25, 0x01	; 1
    427a:	98 a3       	std	Y+32, r25	; 0x20
    427c:	8f 8f       	std	Y+31, r24	; 0x1f
    427e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4280:	98 a1       	ldd	r25, Y+32	; 0x20
    4282:	01 97       	sbiw	r24, 0x01	; 1
    4284:	f1 f7       	brne	.-4      	; 0x4282 <backroute+0x10c4>
    4286:	98 a3       	std	Y+32, r25	; 0x20
    4288:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    428a:	89 a1       	ldd	r24, Y+33	; 0x21
    428c:	9a a1       	ldd	r25, Y+34	; 0x22
    428e:	01 97       	sbiw	r24, 0x01	; 1
    4290:	9a a3       	std	Y+34, r25	; 0x22
    4292:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4294:	89 a1       	ldd	r24, Y+33	; 0x21
    4296:	9a a1       	ldd	r25, Y+34	; 0x22
    4298:	00 97       	sbiw	r24, 0x00	; 0
    429a:	69 f7       	brne	.-38     	; 0x4276 <backroute+0x10b8>
    429c:	14 c0       	rjmp	.+40     	; 0x42c6 <backroute+0x1108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    429e:	6b a1       	ldd	r22, Y+35	; 0x23
    42a0:	7c a1       	ldd	r23, Y+36	; 0x24
    42a2:	8d a1       	ldd	r24, Y+37	; 0x25
    42a4:	9e a1       	ldd	r25, Y+38	; 0x26
    42a6:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	9a a3       	std	Y+34, r25	; 0x22
    42b0:	89 a3       	std	Y+33, r24	; 0x21
    42b2:	89 a1       	ldd	r24, Y+33	; 0x21
    42b4:	9a a1       	ldd	r25, Y+34	; 0x22
    42b6:	9e 8f       	std	Y+30, r25	; 0x1e
    42b8:	8d 8f       	std	Y+29, r24	; 0x1d
    42ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42be:	01 97       	sbiw	r24, 0x01	; 1
    42c0:	f1 f7       	brne	.-4      	; 0x42be <backroute+0x1100>
    42c2:	9e 8f       	std	Y+30, r25	; 0x1e
    42c4:	8d 8f       	std	Y+29, r24	; 0x1d
			}

			_delay_ms(500);
			forward();
    42c6:	0e 94 57 0f 	call	0x1eae	; 0x1eae <forward>
			y_reached=1;
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	90 93 7d 03 	sts	0x037D, r25
    42d2:	80 93 7c 03 	sts	0x037C, r24
			forward_mm(20);
    42d6:	84 e1       	ldi	r24, 0x14	; 20
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		}
		if((currentcountx == des_countx))
    42de:	20 91 74 03 	lds	r18, 0x0374
    42e2:	30 91 75 03 	lds	r19, 0x0375
    42e6:	80 91 04 02 	lds	r24, 0x0204
    42ea:	90 91 05 02 	lds	r25, 0x0205
    42ee:	28 17       	cp	r18, r24
    42f0:	39 07       	cpc	r19, r25
    42f2:	09 f0       	breq	.+2      	; 0x42f6 <backroute+0x1138>
    42f4:	72 c0       	rjmp	.+228    	; 0x43da <backroute+0x121c>
    42f6:	80 e0       	ldi	r24, 0x00	; 0
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	aa ef       	ldi	r26, 0xFA	; 250
    42fc:	b3 e4       	ldi	r27, 0x43	; 67
    42fe:	89 8f       	std	Y+25, r24	; 0x19
    4300:	9a 8f       	std	Y+26, r25	; 0x1a
    4302:	ab 8f       	std	Y+27, r26	; 0x1b
    4304:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4306:	69 8d       	ldd	r22, Y+25	; 0x19
    4308:	7a 8d       	ldd	r23, Y+26	; 0x1a
    430a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    430c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    430e:	26 e6       	ldi	r18, 0x66	; 102
    4310:	36 e6       	ldi	r19, 0x66	; 102
    4312:	46 e6       	ldi	r20, 0x66	; 102
    4314:	55 e4       	ldi	r21, 0x45	; 69
    4316:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    431a:	dc 01       	movw	r26, r24
    431c:	cb 01       	movw	r24, r22
    431e:	8d 8b       	std	Y+21, r24	; 0x15
    4320:	9e 8b       	std	Y+22, r25	; 0x16
    4322:	af 8b       	std	Y+23, r26	; 0x17
    4324:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4326:	6d 89       	ldd	r22, Y+21	; 0x15
    4328:	7e 89       	ldd	r23, Y+22	; 0x16
    432a:	8f 89       	ldd	r24, Y+23	; 0x17
    432c:	98 8d       	ldd	r25, Y+24	; 0x18
    432e:	20 e0       	ldi	r18, 0x00	; 0
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	40 e8       	ldi	r20, 0x80	; 128
    4334:	5f e3       	ldi	r21, 0x3F	; 63
    4336:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    433a:	88 23       	and	r24, r24
    433c:	2c f4       	brge	.+10     	; 0x4348 <backroute+0x118a>
		__ticks = 1;
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	9c 8b       	std	Y+20, r25	; 0x14
    4344:	8b 8b       	std	Y+19, r24	; 0x13
    4346:	3f c0       	rjmp	.+126    	; 0x43c6 <backroute+0x1208>
	else if (__tmp > 65535)
    4348:	6d 89       	ldd	r22, Y+21	; 0x15
    434a:	7e 89       	ldd	r23, Y+22	; 0x16
    434c:	8f 89       	ldd	r24, Y+23	; 0x17
    434e:	98 8d       	ldd	r25, Y+24	; 0x18
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	3f ef       	ldi	r19, 0xFF	; 255
    4354:	4f e7       	ldi	r20, 0x7F	; 127
    4356:	57 e4       	ldi	r21, 0x47	; 71
    4358:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    435c:	18 16       	cp	r1, r24
    435e:	4c f5       	brge	.+82     	; 0x43b2 <backroute+0x11f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4360:	69 8d       	ldd	r22, Y+25	; 0x19
    4362:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4366:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4368:	20 e0       	ldi	r18, 0x00	; 0
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	40 e2       	ldi	r20, 0x20	; 32
    436e:	51 e4       	ldi	r21, 0x41	; 65
    4370:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4374:	dc 01       	movw	r26, r24
    4376:	cb 01       	movw	r24, r22
    4378:	bc 01       	movw	r22, r24
    437a:	cd 01       	movw	r24, r26
    437c:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	9c 8b       	std	Y+20, r25	; 0x14
    4386:	8b 8b       	std	Y+19, r24	; 0x13
    4388:	0f c0       	rjmp	.+30     	; 0x43a8 <backroute+0x11ea>
    438a:	80 e7       	ldi	r24, 0x70	; 112
    438c:	91 e0       	ldi	r25, 0x01	; 1
    438e:	9a 8b       	std	Y+18, r25	; 0x12
    4390:	89 8b       	std	Y+17, r24	; 0x11
    4392:	89 89       	ldd	r24, Y+17	; 0x11
    4394:	9a 89       	ldd	r25, Y+18	; 0x12
    4396:	01 97       	sbiw	r24, 0x01	; 1
    4398:	f1 f7       	brne	.-4      	; 0x4396 <backroute+0x11d8>
    439a:	9a 8b       	std	Y+18, r25	; 0x12
    439c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    439e:	8b 89       	ldd	r24, Y+19	; 0x13
    43a0:	9c 89       	ldd	r25, Y+20	; 0x14
    43a2:	01 97       	sbiw	r24, 0x01	; 1
    43a4:	9c 8b       	std	Y+20, r25	; 0x14
    43a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a8:	8b 89       	ldd	r24, Y+19	; 0x13
    43aa:	9c 89       	ldd	r25, Y+20	; 0x14
    43ac:	00 97       	sbiw	r24, 0x00	; 0
    43ae:	69 f7       	brne	.-38     	; 0x438a <backroute+0x11cc>
    43b0:	14 c0       	rjmp	.+40     	; 0x43da <backroute+0x121c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43b2:	6d 89       	ldd	r22, Y+21	; 0x15
    43b4:	7e 89       	ldd	r23, Y+22	; 0x16
    43b6:	8f 89       	ldd	r24, Y+23	; 0x17
    43b8:	98 8d       	ldd	r25, Y+24	; 0x18
    43ba:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    43be:	dc 01       	movw	r26, r24
    43c0:	cb 01       	movw	r24, r22
    43c2:	9c 8b       	std	Y+20, r25	; 0x14
    43c4:	8b 8b       	std	Y+19, r24	; 0x13
    43c6:	8b 89       	ldd	r24, Y+19	; 0x13
    43c8:	9c 89       	ldd	r25, Y+20	; 0x14
    43ca:	98 8b       	std	Y+16, r25	; 0x10
    43cc:	8f 87       	std	Y+15, r24	; 0x0f
    43ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    43d0:	98 89       	ldd	r25, Y+16	; 0x10
    43d2:	01 97       	sbiw	r24, 0x01	; 1
    43d4:	f1 f7       	brne	.-4      	; 0x43d2 <backroute+0x1214>
    43d6:	98 8b       	std	Y+16, r25	; 0x10
    43d8:	8f 87       	std	Y+15, r24	; 0x0f
  {
	flag=1;
	forward();
	velocity(50,130);
  }*/
	if((currentcountx == des_countx) && (currentcounty == des_county) )
    43da:	20 91 74 03 	lds	r18, 0x0374
    43de:	30 91 75 03 	lds	r19, 0x0375
    43e2:	80 91 04 02 	lds	r24, 0x0204
    43e6:	90 91 05 02 	lds	r25, 0x0205
    43ea:	28 17       	cp	r18, r24
    43ec:	39 07       	cpc	r19, r25
    43ee:	b9 f5       	brne	.+110    	; 0x445e <backroute+0x12a0>
    43f0:	20 91 76 03 	lds	r18, 0x0376
    43f4:	30 91 77 03 	lds	r19, 0x0377
    43f8:	80 91 06 02 	lds	r24, 0x0206
    43fc:	90 91 07 02 	lds	r25, 0x0207
    4400:	28 17       	cp	r18, r24
    4402:	39 07       	cpc	r19, r25
    4404:	61 f5       	brne	.+88     	; 0x445e <backroute+0x12a0>
	{
		//forward_mm(50);
		//velocity(0,0);
		//count on y address
		last_choice=0;
    4406:	10 92 57 03 	sts	0x0357, r1
    440a:	10 92 56 03 	sts	0x0356, r1
		forward_mm(50);
    440e:	82 e3       	ldi	r24, 0x32	; 50
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		// right_degrees(180);
		config_done=0;
    4416:	10 92 55 03 	sts	0x0355, r1
    441a:	10 92 54 03 	sts	0x0354, r1
		flag_startreached=1;
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	90 93 6b 03 	sts	0x036B, r25
    4426:	80 93 6a 03 	sts	0x036A, r24


		flagturn=0;
    442a:	10 92 81 03 	sts	0x0381, r1
    442e:	10 92 80 03 	sts	0x0380, r1
		flagrightturn=0;
    4432:	10 92 83 03 	sts	0x0383, r1
    4436:	10 92 82 03 	sts	0x0382, r1
		y_reached=0;
    443a:	10 92 7d 03 	sts	0x037D, r1
    443e:	10 92 7c 03 	sts	0x037C, r1
		back_s=0;
    4442:	10 92 79 03 	sts	0x0379, r1
    4446:	10 92 78 03 	sts	0x0378, r1
		count=100;
    444a:	84 e6       	ldi	r24, 0x64	; 100
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	90 93 03 02 	sts	0x0203, r25
    4452:	80 93 02 02 	sts	0x0202, r24
		dest_backward=0;
    4456:	10 92 59 03 	sts	0x0359, r1
    445a:	10 92 58 03 	sts	0x0358, r1


		//while(1);

	}
	if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && (obstflag==0))
    445e:	80 91 46 03 	lds	r24, 0x0346
    4462:	80 34       	cpi	r24, 0x40	; 64
    4464:	08 f0       	brcs	.+2      	; 0x4468 <backroute+0x12aa>
    4466:	e8 c0       	rjmp	.+464    	; 0x4638 <backroute+0x147a>
    4468:	80 91 45 03 	lds	r24, 0x0345
    446c:	80 34       	cpi	r24, 0x40	; 64
    446e:	08 f0       	brcs	.+2      	; 0x4472 <backroute+0x12b4>
    4470:	e3 c0       	rjmp	.+454    	; 0x4638 <backroute+0x147a>
    4472:	80 91 47 03 	lds	r24, 0x0347
    4476:	80 34       	cpi	r24, 0x40	; 64
    4478:	08 f0       	brcs	.+2      	; 0x447c <backroute+0x12be>
    447a:	de c0       	rjmp	.+444    	; 0x4638 <backroute+0x147a>
    447c:	80 91 5c 03 	lds	r24, 0x035C
    4480:	88 23       	and	r24, r24
    4482:	09 f0       	breq	.+2      	; 0x4486 <backroute+0x12c8>
    4484:	d9 c0       	rjmp	.+434    	; 0x4638 <backroute+0x147a>
	{
		last_choice=8;
    4486:	88 e0       	ldi	r24, 0x08	; 8
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	90 93 57 03 	sts	0x0357, r25
    448e:	80 93 56 03 	sts	0x0356, r24
  				Right_white_line = ADC_Conversion(1);
  				angle_count=angle_count+1;

			}
		}*/
		adjust_path();
    4492:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <adjust_path>
    4496:	d0 c0       	rjmp	.+416    	; 0x4638 <backroute+0x147a>
	}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0)  )
	{
		sample_sensor();
    4498:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
    449c:	84 c0       	rjmp	.+264    	; 0x45a6 <backroute+0x13e8>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		
		{
			obstflag=1;
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	80 93 5c 03 	sts	0x035C, r24
			stop();
    44a4:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			//buzzer_on();
			_delay_ms(delayvalueback);
    44a8:	80 91 32 02 	lds	r24, 0x0232
    44ac:	90 91 33 02 	lds	r25, 0x0233
    44b0:	cc 01       	movw	r24, r24
    44b2:	a0 e0       	ldi	r26, 0x00	; 0
    44b4:	b0 e0       	ldi	r27, 0x00	; 0
    44b6:	bc 01       	movw	r22, r24
    44b8:	cd 01       	movw	r24, r26
    44ba:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	8b 87       	std	Y+11, r24	; 0x0b
    44c4:	9c 87       	std	Y+12, r25	; 0x0c
    44c6:	ad 87       	std	Y+13, r26	; 0x0d
    44c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    44cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    44ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    44d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44d2:	26 e6       	ldi	r18, 0x66	; 102
    44d4:	36 e6       	ldi	r19, 0x66	; 102
    44d6:	46 e6       	ldi	r20, 0x66	; 102
    44d8:	55 e4       	ldi	r21, 0x45	; 69
    44da:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	8f 83       	std	Y+7, r24	; 0x07
    44e4:	98 87       	std	Y+8, r25	; 0x08
    44e6:	a9 87       	std	Y+9, r26	; 0x09
    44e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44ea:	6f 81       	ldd	r22, Y+7	; 0x07
    44ec:	78 85       	ldd	r23, Y+8	; 0x08
    44ee:	89 85       	ldd	r24, Y+9	; 0x09
    44f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e8       	ldi	r20, 0x80	; 128
    44f8:	5f e3       	ldi	r21, 0x3F	; 63
    44fa:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    44fe:	88 23       	and	r24, r24
    4500:	2c f4       	brge	.+10     	; 0x450c <backroute+0x134e>
		__ticks = 1;
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	9e 83       	std	Y+6, r25	; 0x06
    4508:	8d 83       	std	Y+5, r24	; 0x05
    450a:	3f c0       	rjmp	.+126    	; 0x458a <backroute+0x13cc>
	else if (__tmp > 65535)
    450c:	6f 81       	ldd	r22, Y+7	; 0x07
    450e:	78 85       	ldd	r23, Y+8	; 0x08
    4510:	89 85       	ldd	r24, Y+9	; 0x09
    4512:	9a 85       	ldd	r25, Y+10	; 0x0a
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	3f ef       	ldi	r19, 0xFF	; 255
    4518:	4f e7       	ldi	r20, 0x7F	; 127
    451a:	57 e4       	ldi	r21, 0x47	; 71
    451c:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    4520:	18 16       	cp	r1, r24
    4522:	4c f5       	brge	.+82     	; 0x4576 <backroute+0x13b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4524:	6b 85       	ldd	r22, Y+11	; 0x0b
    4526:	7c 85       	ldd	r23, Y+12	; 0x0c
    4528:	8d 85       	ldd	r24, Y+13	; 0x0d
    452a:	9e 85       	ldd	r25, Y+14	; 0x0e
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	40 e2       	ldi	r20, 0x20	; 32
    4532:	51 e4       	ldi	r21, 0x41	; 65
    4534:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	bc 01       	movw	r22, r24
    453e:	cd 01       	movw	r24, r26
    4540:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	9e 83       	std	Y+6, r25	; 0x06
    454a:	8d 83       	std	Y+5, r24	; 0x05
    454c:	0f c0       	rjmp	.+30     	; 0x456c <backroute+0x13ae>
    454e:	80 e7       	ldi	r24, 0x70	; 112
    4550:	91 e0       	ldi	r25, 0x01	; 1
    4552:	9c 83       	std	Y+4, r25	; 0x04
    4554:	8b 83       	std	Y+3, r24	; 0x03
    4556:	8b 81       	ldd	r24, Y+3	; 0x03
    4558:	9c 81       	ldd	r25, Y+4	; 0x04
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	f1 f7       	brne	.-4      	; 0x455a <backroute+0x139c>
    455e:	9c 83       	std	Y+4, r25	; 0x04
    4560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4562:	8d 81       	ldd	r24, Y+5	; 0x05
    4564:	9e 81       	ldd	r25, Y+6	; 0x06
    4566:	01 97       	sbiw	r24, 0x01	; 1
    4568:	9e 83       	std	Y+6, r25	; 0x06
    456a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456c:	8d 81       	ldd	r24, Y+5	; 0x05
    456e:	9e 81       	ldd	r25, Y+6	; 0x06
    4570:	00 97       	sbiw	r24, 0x00	; 0
    4572:	69 f7       	brne	.-38     	; 0x454e <backroute+0x1390>
    4574:	14 c0       	rjmp	.+40     	; 0x459e <backroute+0x13e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4576:	6f 81       	ldd	r22, Y+7	; 0x07
    4578:	78 85       	ldd	r23, Y+8	; 0x08
    457a:	89 85       	ldd	r24, Y+9	; 0x09
    457c:	9a 85       	ldd	r25, Y+10	; 0x0a
    457e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4582:	dc 01       	movw	r26, r24
    4584:	cb 01       	movw	r24, r22
    4586:	9e 83       	std	Y+6, r25	; 0x06
    4588:	8d 83       	std	Y+5, r24	; 0x05
    458a:	8d 81       	ldd	r24, Y+5	; 0x05
    458c:	9e 81       	ldd	r25, Y+6	; 0x06
    458e:	9a 83       	std	Y+2, r25	; 0x02
    4590:	89 83       	std	Y+1, r24	; 0x01
    4592:	89 81       	ldd	r24, Y+1	; 0x01
    4594:	9a 81       	ldd	r25, Y+2	; 0x02
    4596:	01 97       	sbiw	r24, 0x01	; 1
    4598:	f1 f7       	brne	.-4      	; 0x4596 <backroute+0x13d8>
    459a:	9a 83       	std	Y+2, r25	; 0x02
    459c:	89 83       	std	Y+1, r24	; 0x01
			sample_sensor();
    459e:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
			handle_obst_backward();
    45a2:	0e 94 ff 28 	call	0x51fe	; 0x51fe <handle_obst_backward>
		adjust_path();
	}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0)  )
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    45a6:	80 91 5a 03 	lds	r24, 0x035A
    45aa:	28 2f       	mov	r18, r24
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	80 91 08 02 	lds	r24, 0x0208
    45b2:	90 91 09 02 	lds	r25, 0x0209
    45b6:	82 17       	cp	r24, r18
    45b8:	93 07       	cpc	r25, r19
    45ba:	08 f4       	brcc	.+2      	; 0x45be <backroute+0x1400>
    45bc:	70 cf       	rjmp	.-288    	; 0x449e <backroute+0x12e0>
    45be:	80 91 5b 03 	lds	r24, 0x035B
    45c2:	28 2f       	mov	r18, r24
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	80 91 86 03 	lds	r24, 0x0386
    45ca:	90 91 87 03 	lds	r25, 0x0387
    45ce:	28 17       	cp	r18, r24
    45d0:	39 07       	cpc	r19, r25
    45d2:	08 f4       	brcc	.+2      	; 0x45d6 <backroute+0x1418>
    45d4:	64 cf       	rjmp	.-312    	; 0x449e <backroute+0x12e0>
    45d6:	80 91 60 03 	lds	r24, 0x0360
    45da:	28 2f       	mov	r18, r24
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	80 91 86 03 	lds	r24, 0x0386
    45e2:	90 91 87 03 	lds	r25, 0x0387
    45e6:	28 17       	cp	r18, r24
    45e8:	39 07       	cpc	r19, r25
    45ea:	08 f4       	brcc	.+2      	; 0x45ee <backroute+0x1430>
    45ec:	58 cf       	rjmp	.-336    	; 0x449e <backroute+0x12e0>
    45ee:	80 91 61 03 	lds	r24, 0x0361
    45f2:	28 2f       	mov	r18, r24
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	80 91 86 03 	lds	r24, 0x0386
    45fa:	90 91 87 03 	lds	r25, 0x0387
    45fe:	28 17       	cp	r18, r24
    4600:	39 07       	cpc	r19, r25
    4602:	08 f4       	brcc	.+2      	; 0x4606 <backroute+0x1448>
    4604:	4c cf       	rjmp	.-360    	; 0x449e <backroute+0x12e0>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		forward_mm(5);
    4606:	85 e0       	ldi	r24, 0x05	; 5
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		last_choice=9;
    460e:	89 e0       	ldi	r24, 0x09	; 9
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	90 93 57 03 	sts	0x0357, r25
    4616:	80 93 56 03 	sts	0x0356, r24
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    461a:	83 e0       	ldi	r24, 0x03	; 3
    461c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    4620:	80 93 45 03 	sts	0x0345, r24
  Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    4624:	82 e0       	ldi	r24, 0x02	; 2
    4626:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    462a:	80 93 46 03 	sts	0x0346, r24
  Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    4634:	80 93 47 03 	sts	0x0347, r24

			}
		}*/
		adjust_path();
	}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0)  )
    4638:	80 91 46 03 	lds	r24, 0x0346
    463c:	80 34       	cpi	r24, 0x40	; 64
    463e:	d8 f0       	brcs	.+54     	; 0x4676 <backroute+0x14b8>
    4640:	80 91 45 03 	lds	r24, 0x0345
    4644:	80 34       	cpi	r24, 0x40	; 64
    4646:	b8 f0       	brcs	.+46     	; 0x4676 <backroute+0x14b8>
    4648:	80 91 47 03 	lds	r24, 0x0347
    464c:	80 34       	cpi	r24, 0x40	; 64
    464e:	98 f0       	brcs	.+38     	; 0x4676 <backroute+0x14b8>
    4650:	80 91 56 03 	lds	r24, 0x0356
    4654:	90 91 57 03 	lds	r25, 0x0357
    4658:	86 30       	cpi	r24, 0x06	; 6
    465a:	91 05       	cpc	r25, r1
    465c:	39 f0       	breq	.+14     	; 0x466c <backroute+0x14ae>
    465e:	80 91 56 03 	lds	r24, 0x0356
    4662:	90 91 57 03 	lds	r25, 0x0357
    4666:	89 30       	cpi	r24, 0x09	; 9
    4668:	91 05       	cpc	r25, r1
    466a:	29 f4       	brne	.+10     	; 0x4676 <backroute+0x14b8>
    466c:	80 91 5c 03 	lds	r24, 0x035C
    4670:	88 23       	and	r24, r24
    4672:	09 f4       	brne	.+2      	; 0x4676 <backroute+0x14b8>
    4674:	11 cf       	rjmp	.-478    	; 0x4498 <backroute+0x12da>
  Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
  Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor

	}

	if(flag_startreached==1)
    4676:	80 91 6a 03 	lds	r24, 0x036A
    467a:	90 91 6b 03 	lds	r25, 0x036B
    467e:	81 30       	cpi	r24, 0x01	; 1
    4680:	91 05       	cpc	r25, r1
    4682:	11 f4       	brne	.+4      	; 0x4688 <backroute+0x14ca>
	{
  	
	reposition(); 
    4684:	0e 94 52 23 	call	0x46a4	; 0x46a4 <reposition>
	}

	//route(des_countx,des_county,0,0);
	return (1);
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	90 e0       	ldi	r25, 0x00	; 0
}
    468c:	c4 57       	subi	r28, 0x74	; 116
    468e:	df 4f       	sbci	r29, 0xFF	; 255
    4690:	0f b6       	in	r0, 0x3f	; 63
    4692:	f8 94       	cli
    4694:	de bf       	out	0x3e, r29	; 62
    4696:	0f be       	out	0x3f, r0	; 63
    4698:	cd bf       	out	0x3d, r28	; 61
    469a:	cf 91       	pop	r28
    469c:	df 91       	pop	r29
    469e:	1f 91       	pop	r17
    46a0:	0f 91       	pop	r16
    46a2:	08 95       	ret

000046a4 <reposition>:

void reposition()
{
    46a4:	df 93       	push	r29
    46a6:	cf 93       	push	r28
    46a8:	cd b7       	in	r28, 0x3d	; 61
    46aa:	de b7       	in	r29, 0x3e	; 62
    46ac:	6c 97       	sbiw	r28, 0x1c	; 28
    46ae:	0f b6       	in	r0, 0x3f	; 63
    46b0:	f8 94       	cli
    46b2:	de bf       	out	0x3e, r29	; 62
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	cd bf       	out	0x3d, r28	; 61
	forward_mm(10);
    46b8:	8a e0       	ldi	r24, 0x0A	; 10
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>

	left_degrees(90);
    46c0:	8a e5       	ldi	r24, 0x5A	; 90
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>

  	obstflag=0;
    46c8:	10 92 5c 03 	sts	0x035C, r1
  	Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    46cc:	83 e0       	ldi	r24, 0x03	; 3
    46ce:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    46d2:	80 93 45 03 	sts	0x0345, r24
  Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    46d6:	82 e0       	ldi	r24, 0x02	; 2
    46d8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    46dc:	80 93 46 03 	sts	0x0346, r24
  Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    46e6:	80 93 47 03 	sts	0x0347, r24
  sample_sensor();
    46ea:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
  checkobst_backpath();
    46ee:	0e 94 35 12 	call	0x246a	; 0x246a <checkobst_backpath>
    46f2:	07 c0       	rjmp	.+14     	; 0x4702 <reposition+0x5e>

while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 < thresh_Front_IR_Sensor)
		{
			sample_sensor();
    46f4:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
			obstflag=1;
    46f8:	81 e0       	ldi	r24, 0x01	; 1
    46fa:	80 93 5c 03 	sts	0x035C, r24
			stop();
    46fe:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
  Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
  Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
  sample_sensor();
  checkobst_backpath();

while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 < thresh_Front_IR_Sensor)
    4702:	80 91 5a 03 	lds	r24, 0x035A
    4706:	28 2f       	mov	r18, r24
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	80 91 08 02 	lds	r24, 0x0208
    470e:	90 91 09 02 	lds	r25, 0x0209
    4712:	82 17       	cp	r24, r18
    4714:	93 07       	cpc	r25, r19
    4716:	70 f3       	brcs	.-36     	; 0x46f4 <reposition+0x50>
    4718:	80 91 5b 03 	lds	r24, 0x035B
    471c:	28 2f       	mov	r18, r24
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	80 91 86 03 	lds	r24, 0x0386
    4724:	90 91 87 03 	lds	r25, 0x0387
    4728:	28 17       	cp	r18, r24
    472a:	39 07       	cpc	r19, r25
    472c:	18 f3       	brcs	.-58     	; 0x46f4 <reposition+0x50>
    472e:	80 91 60 03 	lds	r24, 0x0360
    4732:	28 2f       	mov	r18, r24
    4734:	30 e0       	ldi	r19, 0x00	; 0
    4736:	80 91 86 03 	lds	r24, 0x0386
    473a:	90 91 87 03 	lds	r25, 0x0387
    473e:	28 17       	cp	r18, r24
    4740:	39 07       	cpc	r19, r25
    4742:	c0 f2       	brcs	.-80     	; 0x46f4 <reposition+0x50>
    4744:	80 91 61 03 	lds	r24, 0x0361
    4748:	28 2f       	mov	r18, r24
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	80 91 86 03 	lds	r24, 0x0386
    4750:	90 91 87 03 	lds	r25, 0x0387
    4754:	28 17       	cp	r18, r24
    4756:	39 07       	cpc	r19, r25
    4758:	68 f2       	brcs	.-102    	; 0x46f4 <reposition+0x50>

  

 while(1)
{
	Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    475a:	83 e0       	ldi	r24, 0x03	; 3
    475c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    4760:	80 93 45 03 	sts	0x0345, r24
  Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    4764:	82 e0       	ldi	r24, 0x02	; 2
    4766:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    476a:	80 93 46 03 	sts	0x0346, r24
  Right_white_line = ADC_Conversion(1); 
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    4774:	80 93 47 03 	sts	0x0347, r24
	sample_sensor();
    4778:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
	obstflag=0;
    477c:	10 92 5c 03 	sts	0x035C, r1
	if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    4780:	80 91 5a 03 	lds	r24, 0x035A
    4784:	28 2f       	mov	r18, r24
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	80 91 08 02 	lds	r24, 0x0208
    478c:	90 91 09 02 	lds	r25, 0x0209
    4790:	82 17       	cp	r24, r18
    4792:	93 07       	cpc	r25, r19
    4794:	08 f1       	brcs	.+66     	; 0x47d8 <reposition+0x134>
    4796:	80 91 5b 03 	lds	r24, 0x035B
    479a:	28 2f       	mov	r18, r24
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	80 91 86 03 	lds	r24, 0x0386
    47a2:	90 91 87 03 	lds	r25, 0x0387
    47a6:	28 17       	cp	r18, r24
    47a8:	39 07       	cpc	r19, r25
    47aa:	b0 f0       	brcs	.+44     	; 0x47d8 <reposition+0x134>
    47ac:	80 91 60 03 	lds	r24, 0x0360
    47b0:	28 2f       	mov	r18, r24
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	80 91 86 03 	lds	r24, 0x0386
    47b8:	90 91 87 03 	lds	r25, 0x0387
    47bc:	28 17       	cp	r18, r24
    47be:	39 07       	cpc	r19, r25
    47c0:	58 f0       	brcs	.+22     	; 0x47d8 <reposition+0x134>
    47c2:	80 91 61 03 	lds	r24, 0x0361
    47c6:	28 2f       	mov	r18, r24
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	80 91 86 03 	lds	r24, 0x0386
    47ce:	90 91 87 03 	lds	r25, 0x0387
    47d2:	28 17       	cp	r18, r24
    47d4:	39 07       	cpc	r19, r25
    47d6:	28 f4       	brcc	.+10     	; 0x47e2 <reposition+0x13e>
		{
			stop();
    47d8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			obstflag=1;
    47dc:	81 e0       	ldi	r24, 0x01	; 1
    47de:	80 93 5c 03 	sts	0x035C, r24
		}

		if((Center_white_line>BLACK_LINE && Left_white_line>BLACK_LINE && Right_white_line>BLACK_LINE) && obstflag ==0)
    47e2:	80 91 46 03 	lds	r24, 0x0346
    47e6:	81 34       	cpi	r24, 0x41	; 65
    47e8:	68 f0       	brcs	.+26     	; 0x4804 <reposition+0x160>
    47ea:	80 91 45 03 	lds	r24, 0x0345
    47ee:	81 34       	cpi	r24, 0x41	; 65
    47f0:	48 f0       	brcs	.+18     	; 0x4804 <reposition+0x160>
    47f2:	80 91 47 03 	lds	r24, 0x0347
    47f6:	81 34       	cpi	r24, 0x41	; 65
    47f8:	28 f0       	brcs	.+10     	; 0x4804 <reposition+0x160>
    47fa:	80 91 5c 03 	lds	r24, 0x035C
    47fe:	88 23       	and	r24, r24
    4800:	09 f4       	brne	.+2      	; 0x4804 <reposition+0x160>
    4802:	7b c0       	rjmp	.+246    	; 0x48fa <reposition+0x256>
		{
		break;
		}

		if(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    4804:	80 91 46 03 	lds	r24, 0x0346
    4808:	80 34       	cpi	r24, 0x40	; 64
    480a:	80 f0       	brcs	.+32     	; 0x482c <reposition+0x188>
    480c:	80 91 45 03 	lds	r24, 0x0345
    4810:	80 34       	cpi	r24, 0x40	; 64
    4812:	60 f0       	brcs	.+24     	; 0x482c <reposition+0x188>
    4814:	80 91 47 03 	lds	r24, 0x0347
    4818:	80 34       	cpi	r24, 0x40	; 64
    481a:	40 f4       	brcc	.+16     	; 0x482c <reposition+0x188>
    481c:	80 91 5c 03 	lds	r24, 0x035C
    4820:	88 23       	and	r24, r24
    4822:	21 f4       	brne	.+8      	; 0x482c <reposition+0x188>
		{
			left_degrees(1);
    4824:	81 e0       	ldi	r24, 0x01	; 1
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE && obstflag ==0)
    482c:	80 91 46 03 	lds	r24, 0x0346
    4830:	80 34       	cpi	r24, 0x40	; 64
    4832:	80 f0       	brcs	.+32     	; 0x4854 <reposition+0x1b0>
    4834:	80 91 45 03 	lds	r24, 0x0345
    4838:	80 34       	cpi	r24, 0x40	; 64
    483a:	60 f4       	brcc	.+24     	; 0x4854 <reposition+0x1b0>
    483c:	80 91 47 03 	lds	r24, 0x0347
    4840:	80 34       	cpi	r24, 0x40	; 64
    4842:	40 f0       	brcs	.+16     	; 0x4854 <reposition+0x1b0>
    4844:	80 91 5c 03 	lds	r24, 0x035C
    4848:	88 23       	and	r24, r24
    484a:	21 f4       	brne	.+8      	; 0x4854 <reposition+0x1b0>
		{
			right_degrees(1);
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    4854:	80 91 46 03 	lds	r24, 0x0346
    4858:	80 34       	cpi	r24, 0x40	; 64
    485a:	80 f0       	brcs	.+32     	; 0x487c <reposition+0x1d8>
    485c:	80 91 45 03 	lds	r24, 0x0345
    4860:	80 34       	cpi	r24, 0x40	; 64
    4862:	60 f4       	brcc	.+24     	; 0x487c <reposition+0x1d8>
    4864:	80 91 47 03 	lds	r24, 0x0347
    4868:	80 34       	cpi	r24, 0x40	; 64
    486a:	40 f4       	brcc	.+16     	; 0x487c <reposition+0x1d8>
    486c:	80 91 5c 03 	lds	r24, 0x035C
    4870:	88 23       	and	r24, r24
    4872:	21 f4       	brne	.+8      	; 0x487c <reposition+0x1d8>
		{
			forward_mm(5);
    4874:	85 e0       	ldi	r24, 0x05	; 5
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
			
		}
		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE && obstflag ==0)
    487c:	80 91 46 03 	lds	r24, 0x0346
    4880:	80 34       	cpi	r24, 0x40	; 64
    4882:	80 f4       	brcc	.+32     	; 0x48a4 <reposition+0x200>
    4884:	80 91 45 03 	lds	r24, 0x0345
    4888:	80 34       	cpi	r24, 0x40	; 64
    488a:	60 f4       	brcc	.+24     	; 0x48a4 <reposition+0x200>
    488c:	80 91 47 03 	lds	r24, 0x0347
    4890:	80 34       	cpi	r24, 0x40	; 64
    4892:	40 f0       	brcs	.+16     	; 0x48a4 <reposition+0x200>
    4894:	80 91 5c 03 	lds	r24, 0x035C
    4898:	88 23       	and	r24, r24
    489a:	21 f4       	brne	.+8      	; 0x48a4 <reposition+0x200>
		{
			right_degrees(2);
    489c:	82 e0       	ldi	r24, 0x02	; 2
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    48a4:	80 91 46 03 	lds	r24, 0x0346
    48a8:	80 34       	cpi	r24, 0x40	; 64
    48aa:	80 f4       	brcc	.+32     	; 0x48cc <reposition+0x228>
    48ac:	80 91 45 03 	lds	r24, 0x0345
    48b0:	80 34       	cpi	r24, 0x40	; 64
    48b2:	60 f0       	brcs	.+24     	; 0x48cc <reposition+0x228>
    48b4:	80 91 47 03 	lds	r24, 0x0347
    48b8:	80 34       	cpi	r24, 0x40	; 64
    48ba:	40 f4       	brcc	.+16     	; 0x48cc <reposition+0x228>
    48bc:	80 91 5c 03 	lds	r24, 0x035C
    48c0:	88 23       	and	r24, r24
    48c2:	21 f4       	brne	.+8      	; 0x48cc <reposition+0x228>
		{
			left_degrees(2);
    48c4:	82 e0       	ldi	r24, 0x02	; 2
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    48cc:	80 91 46 03 	lds	r24, 0x0346
    48d0:	80 34       	cpi	r24, 0x40	; 64
    48d2:	08 f0       	brcs	.+2      	; 0x48d6 <reposition+0x232>
    48d4:	42 cf       	rjmp	.-380    	; 0x475a <reposition+0xb6>
    48d6:	80 91 45 03 	lds	r24, 0x0345
    48da:	80 34       	cpi	r24, 0x40	; 64
    48dc:	08 f0       	brcs	.+2      	; 0x48e0 <reposition+0x23c>
    48de:	3d cf       	rjmp	.-390    	; 0x475a <reposition+0xb6>
    48e0:	80 91 47 03 	lds	r24, 0x0347
    48e4:	80 34       	cpi	r24, 0x40	; 64
    48e6:	08 f0       	brcs	.+2      	; 0x48ea <reposition+0x246>
    48e8:	38 cf       	rjmp	.-400    	; 0x475a <reposition+0xb6>
    48ea:	80 91 5c 03 	lds	r24, 0x035C
    48ee:	88 23       	and	r24, r24
    48f0:	09 f0       	breq	.+2      	; 0x48f4 <reposition+0x250>
    48f2:	33 cf       	rjmp	.-410    	; 0x475a <reposition+0xb6>
		{
			//stop();
			adjust_path();
    48f4:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <adjust_path>
    48f8:	30 cf       	rjmp	.-416    	; 0x475a <reposition+0xb6>
		}
 
}
	
    
    forward_mm(80);
    48fa:	80 e5       	ldi	r24, 0x50	; 80
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
    4902:	80 e0       	ldi	r24, 0x00	; 0
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	a8 ec       	ldi	r26, 0xC8	; 200
    4908:	b2 e4       	ldi	r27, 0x42	; 66
    490a:	89 8f       	std	Y+25, r24	; 0x19
    490c:	9a 8f       	std	Y+26, r25	; 0x1a
    490e:	ab 8f       	std	Y+27, r26	; 0x1b
    4910:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4912:	69 8d       	ldd	r22, Y+25	; 0x19
    4914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    491a:	26 e6       	ldi	r18, 0x66	; 102
    491c:	36 e6       	ldi	r19, 0x66	; 102
    491e:	46 e6       	ldi	r20, 0x66	; 102
    4920:	55 e4       	ldi	r21, 0x45	; 69
    4922:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4926:	dc 01       	movw	r26, r24
    4928:	cb 01       	movw	r24, r22
    492a:	8d 8b       	std	Y+21, r24	; 0x15
    492c:	9e 8b       	std	Y+22, r25	; 0x16
    492e:	af 8b       	std	Y+23, r26	; 0x17
    4930:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4932:	6d 89       	ldd	r22, Y+21	; 0x15
    4934:	7e 89       	ldd	r23, Y+22	; 0x16
    4936:	8f 89       	ldd	r24, Y+23	; 0x17
    4938:	98 8d       	ldd	r25, Y+24	; 0x18
    493a:	20 e0       	ldi	r18, 0x00	; 0
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	40 e8       	ldi	r20, 0x80	; 128
    4940:	5f e3       	ldi	r21, 0x3F	; 63
    4942:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    4946:	88 23       	and	r24, r24
    4948:	2c f4       	brge	.+10     	; 0x4954 <reposition+0x2b0>
		__ticks = 1;
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	9c 8b       	std	Y+20, r25	; 0x14
    4950:	8b 8b       	std	Y+19, r24	; 0x13
    4952:	3f c0       	rjmp	.+126    	; 0x49d2 <reposition+0x32e>
	else if (__tmp > 65535)
    4954:	6d 89       	ldd	r22, Y+21	; 0x15
    4956:	7e 89       	ldd	r23, Y+22	; 0x16
    4958:	8f 89       	ldd	r24, Y+23	; 0x17
    495a:	98 8d       	ldd	r25, Y+24	; 0x18
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	3f ef       	ldi	r19, 0xFF	; 255
    4960:	4f e7       	ldi	r20, 0x7F	; 127
    4962:	57 e4       	ldi	r21, 0x47	; 71
    4964:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    4968:	18 16       	cp	r1, r24
    496a:	4c f5       	brge	.+82     	; 0x49be <reposition+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    496c:	69 8d       	ldd	r22, Y+25	; 0x19
    496e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	40 e2       	ldi	r20, 0x20	; 32
    497a:	51 e4       	ldi	r21, 0x41	; 65
    497c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4980:	dc 01       	movw	r26, r24
    4982:	cb 01       	movw	r24, r22
    4984:	bc 01       	movw	r22, r24
    4986:	cd 01       	movw	r24, r26
    4988:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    498c:	dc 01       	movw	r26, r24
    498e:	cb 01       	movw	r24, r22
    4990:	9c 8b       	std	Y+20, r25	; 0x14
    4992:	8b 8b       	std	Y+19, r24	; 0x13
    4994:	0f c0       	rjmp	.+30     	; 0x49b4 <reposition+0x310>
    4996:	80 e7       	ldi	r24, 0x70	; 112
    4998:	91 e0       	ldi	r25, 0x01	; 1
    499a:	9a 8b       	std	Y+18, r25	; 0x12
    499c:	89 8b       	std	Y+17, r24	; 0x11
    499e:	89 89       	ldd	r24, Y+17	; 0x11
    49a0:	9a 89       	ldd	r25, Y+18	; 0x12
    49a2:	01 97       	sbiw	r24, 0x01	; 1
    49a4:	f1 f7       	brne	.-4      	; 0x49a2 <reposition+0x2fe>
    49a6:	9a 8b       	std	Y+18, r25	; 0x12
    49a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49aa:	8b 89       	ldd	r24, Y+19	; 0x13
    49ac:	9c 89       	ldd	r25, Y+20	; 0x14
    49ae:	01 97       	sbiw	r24, 0x01	; 1
    49b0:	9c 8b       	std	Y+20, r25	; 0x14
    49b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b4:	8b 89       	ldd	r24, Y+19	; 0x13
    49b6:	9c 89       	ldd	r25, Y+20	; 0x14
    49b8:	00 97       	sbiw	r24, 0x00	; 0
    49ba:	69 f7       	brne	.-38     	; 0x4996 <reposition+0x2f2>
    49bc:	14 c0       	rjmp	.+40     	; 0x49e6 <reposition+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49be:	6d 89       	ldd	r22, Y+21	; 0x15
    49c0:	7e 89       	ldd	r23, Y+22	; 0x16
    49c2:	8f 89       	ldd	r24, Y+23	; 0x17
    49c4:	98 8d       	ldd	r25, Y+24	; 0x18
    49c6:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    49ca:	dc 01       	movw	r26, r24
    49cc:	cb 01       	movw	r24, r22
    49ce:	9c 8b       	std	Y+20, r25	; 0x14
    49d0:	8b 8b       	std	Y+19, r24	; 0x13
    49d2:	8b 89       	ldd	r24, Y+19	; 0x13
    49d4:	9c 89       	ldd	r25, Y+20	; 0x14
    49d6:	98 8b       	std	Y+16, r25	; 0x10
    49d8:	8f 87       	std	Y+15, r24	; 0x0f
    49da:	8f 85       	ldd	r24, Y+15	; 0x0f
    49dc:	98 89       	ldd	r25, Y+16	; 0x10
    49de:	01 97       	sbiw	r24, 0x01	; 1
    49e0:	f1 f7       	brne	.-4      	; 0x49de <reposition+0x33a>
    49e2:	98 8b       	std	Y+16, r25	; 0x10
    49e4:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(100);
    left_degrees(90);
    49e6:	8a e5       	ldi	r24, 0x5A	; 90
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
    49ee:	80 e0       	ldi	r24, 0x00	; 0
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	a8 ec       	ldi	r26, 0xC8	; 200
    49f4:	b2 e4       	ldi	r27, 0x42	; 66
    49f6:	8b 87       	std	Y+11, r24	; 0x0b
    49f8:	9c 87       	std	Y+12, r25	; 0x0c
    49fa:	ad 87       	std	Y+13, r26	; 0x0d
    49fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a06:	26 e6       	ldi	r18, 0x66	; 102
    4a08:	36 e6       	ldi	r19, 0x66	; 102
    4a0a:	46 e6       	ldi	r20, 0x66	; 102
    4a0c:	55 e4       	ldi	r21, 0x45	; 69
    4a0e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4a12:	dc 01       	movw	r26, r24
    4a14:	cb 01       	movw	r24, r22
    4a16:	8f 83       	std	Y+7, r24	; 0x07
    4a18:	98 87       	std	Y+8, r25	; 0x08
    4a1a:	a9 87       	std	Y+9, r26	; 0x09
    4a1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a20:	78 85       	ldd	r23, Y+8	; 0x08
    4a22:	89 85       	ldd	r24, Y+9	; 0x09
    4a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a26:	20 e0       	ldi	r18, 0x00	; 0
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	40 e8       	ldi	r20, 0x80	; 128
    4a2c:	5f e3       	ldi	r21, 0x3F	; 63
    4a2e:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    4a32:	88 23       	and	r24, r24
    4a34:	2c f4       	brge	.+10     	; 0x4a40 <reposition+0x39c>
		__ticks = 1;
    4a36:	81 e0       	ldi	r24, 0x01	; 1
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	9e 83       	std	Y+6, r25	; 0x06
    4a3c:	8d 83       	std	Y+5, r24	; 0x05
    4a3e:	3f c0       	rjmp	.+126    	; 0x4abe <reposition+0x41a>
	else if (__tmp > 65535)
    4a40:	6f 81       	ldd	r22, Y+7	; 0x07
    4a42:	78 85       	ldd	r23, Y+8	; 0x08
    4a44:	89 85       	ldd	r24, Y+9	; 0x09
    4a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	3f ef       	ldi	r19, 0xFF	; 255
    4a4c:	4f e7       	ldi	r20, 0x7F	; 127
    4a4e:	57 e4       	ldi	r21, 0x47	; 71
    4a50:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    4a54:	18 16       	cp	r1, r24
    4a56:	4c f5       	brge	.+82     	; 0x4aaa <reposition+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a60:	20 e0       	ldi	r18, 0x00	; 0
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	40 e2       	ldi	r20, 0x20	; 32
    4a66:	51 e4       	ldi	r21, 0x41	; 65
    4a68:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4a6c:	dc 01       	movw	r26, r24
    4a6e:	cb 01       	movw	r24, r22
    4a70:	bc 01       	movw	r22, r24
    4a72:	cd 01       	movw	r24, r26
    4a74:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4a78:	dc 01       	movw	r26, r24
    4a7a:	cb 01       	movw	r24, r22
    4a7c:	9e 83       	std	Y+6, r25	; 0x06
    4a7e:	8d 83       	std	Y+5, r24	; 0x05
    4a80:	0f c0       	rjmp	.+30     	; 0x4aa0 <reposition+0x3fc>
    4a82:	80 e7       	ldi	r24, 0x70	; 112
    4a84:	91 e0       	ldi	r25, 0x01	; 1
    4a86:	9c 83       	std	Y+4, r25	; 0x04
    4a88:	8b 83       	std	Y+3, r24	; 0x03
    4a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a8e:	01 97       	sbiw	r24, 0x01	; 1
    4a90:	f1 f7       	brne	.-4      	; 0x4a8e <reposition+0x3ea>
    4a92:	9c 83       	std	Y+4, r25	; 0x04
    4a94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a96:	8d 81       	ldd	r24, Y+5	; 0x05
    4a98:	9e 81       	ldd	r25, Y+6	; 0x06
    4a9a:	01 97       	sbiw	r24, 0x01	; 1
    4a9c:	9e 83       	std	Y+6, r25	; 0x06
    4a9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    4aa4:	00 97       	sbiw	r24, 0x00	; 0
    4aa6:	69 f7       	brne	.-38     	; 0x4a82 <reposition+0x3de>
    4aa8:	14 c0       	rjmp	.+40     	; 0x4ad2 <reposition+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    4aac:	78 85       	ldd	r23, Y+8	; 0x08
    4aae:	89 85       	ldd	r24, Y+9	; 0x09
    4ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ab2:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	9e 83       	std	Y+6, r25	; 0x06
    4abc:	8d 83       	std	Y+5, r24	; 0x05
    4abe:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ac2:	9a 83       	std	Y+2, r25	; 0x02
    4ac4:	89 83       	std	Y+1, r24	; 0x01
    4ac6:	89 81       	ldd	r24, Y+1	; 0x01
    4ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    4aca:	01 97       	sbiw	r24, 0x01	; 1
    4acc:	f1 f7       	brne	.-4      	; 0x4aca <reposition+0x426>
    4ace:	9a 83       	std	Y+2, r25	; 0x02
    4ad0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    back_mm(15);
    4ad2:	8f e0       	ldi	r24, 0x0F	; 15
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	0e 94 ad 10 	call	0x215a	; 0x215a <back_mm>

      stop();
    4ada:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>

}
    4ade:	6c 96       	adiw	r28, 0x1c	; 28
    4ae0:	0f b6       	in	r0, 0x3f	; 63
    4ae2:	f8 94       	cli
    4ae4:	de bf       	out	0x3e, r29	; 62
    4ae6:	0f be       	out	0x3f, r0	; 63
    4ae8:	cd bf       	out	0x3d, r28	; 61
    4aea:	cf 91       	pop	r28
    4aec:	df 91       	pop	r29
    4aee:	08 95       	ret

00004af0 <main>:
//Main Function

int main(void)
{
    4af0:	0f 93       	push	r16
    4af2:	1f 93       	push	r17
    4af4:	df 93       	push	r29
    4af6:	cf 93       	push	r28
    4af8:	cd b7       	in	r28, 0x3d	; 61
    4afa:	de b7       	in	r29, 0x3e	; 62
    4afc:	c8 54       	subi	r28, 0x48	; 72
    4afe:	d0 40       	sbci	r29, 0x00	; 0
    4b00:	0f b6       	in	r0, 0x3f	; 63
    4b02:	f8 94       	cli
    4b04:	de bf       	out	0x3e, r29	; 62
    4b06:	0f be       	out	0x3f, r0	; 63
    4b08:	cd bf       	out	0x3d, r28	; 61
obstflag=0;
    4b0a:	10 92 5c 03 	sts	0x035C, r1
	while(1)
	{
		init_devices();
    4b0e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <init_devices>
		lcd_set_4bit();
    4b12:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
		lcd_init();
    4b16:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
		flag_startreached=0;
    4b1a:	10 92 6b 03 	sts	0x036B, r1
    4b1e:	10 92 6a 03 	sts	0x036A, r1
		take_left=0;
    4b22:	10 92 5e 03 	sts	0x035E, r1
    4b26:	10 92 5d 03 	sts	0x035D, r1
		back_reroute=0;
    4b2a:	10 92 67 03 	sts	0x0367, r1
    4b2e:	10 92 66 03 	sts	0x0366, r1
		while(config_done!=1);
    4b32:	80 91 54 03 	lds	r24, 0x0354
    4b36:	90 91 55 03 	lds	r25, 0x0355
    4b3a:	81 30       	cpi	r24, 0x01	; 1
    4b3c:	91 05       	cpc	r25, r1
    4b3e:	c9 f7       	brne	.-14     	; 0x4b32 <main+0x42>

		des_countx = x_dest; //desired table no from Zigbee
    4b40:	80 91 a1 03 	lds	r24, 0x03A1
    4b44:	90 91 a2 03 	lds	r25, 0x03A2
    4b48:	90 93 05 02 	sts	0x0205, r25
    4b4c:	80 93 04 02 	sts	0x0204, r24
		des_county = y_dest;
    4b50:	80 91 90 03 	lds	r24, 0x0390
    4b54:	90 91 91 03 	lds	r25, 0x0391
    4b58:	90 93 07 02 	sts	0x0207, r25
    4b5c:	80 93 06 02 	sts	0x0206, r24
		currentcountx=x_coor;
    4b60:	80 91 9b 03 	lds	r24, 0x039B
    4b64:	90 91 9c 03 	lds	r25, 0x039C
    4b68:	90 93 75 03 	sts	0x0375, r25
    4b6c:	80 93 74 03 	sts	0x0374, r24
		currentcounty=y_coor;
    4b70:	80 91 8a 03 	lds	r24, 0x038A
    4b74:	90 91 8b 03 	lds	r25, 0x038B
    4b78:	90 93 77 03 	sts	0x0377, r25
    4b7c:	80 93 76 03 	sts	0x0376, r24
		if(currentcounty>y_dest)
    4b80:	80 91 76 03 	lds	r24, 0x0376
    4b84:	90 91 77 03 	lds	r25, 0x0377
    4b88:	9c 01       	movw	r18, r24
    4b8a:	80 91 90 03 	lds	r24, 0x0390
    4b8e:	90 91 91 03 	lds	r25, 0x0391
    4b92:	82 17       	cp	r24, r18
    4b94:	93 07       	cpc	r25, r19
    4b96:	28 f4       	brcc	.+10     	; 0x4ba2 <main+0xb2>
		{
			take_left=0;
    4b98:	10 92 5e 03 	sts	0x035E, r1
    4b9c:	10 92 5d 03 	sts	0x035D, r1
    4ba0:	06 c0       	rjmp	.+12     	; 0x4bae <main+0xbe>
		}	
		else take_left=1;
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	90 93 5e 03 	sts	0x035E, r25
    4baa:	80 93 5d 03 	sts	0x035D, r24
		uart_sendstr(coordreply);
    4bae:	8e e1       	ldi	r24, 0x1E	; 30
    4bb0:	92 e0       	ldi	r25, 0x02	; 2
    4bb2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <uart_sendstr>
		freebot=1;
    4bb6:	81 e0       	ldi	r24, 0x01	; 1
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	90 93 7f 03 	sts	0x037F, r25
    4bbe:	80 93 7e 03 	sts	0x037E, r24
		while(1)
		{
      freebot=1;
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	90 93 7f 03 	sts	0x037F, r25
    4bca:	80 93 7e 03 	sts	0x037E, r24
      buzzer_off();
    4bce:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <buzzer_off>
			route();
    4bd2:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <route>
			if (flag_reached ==1)
    4bd6:	80 91 68 03 	lds	r24, 0x0368
    4bda:	90 91 69 03 	lds	r25, 0x0369
    4bde:	81 30       	cpi	r24, 0x01	; 1
    4be0:	91 05       	cpc	r25, r1
    4be2:	79 f7       	brne	.-34     	; 0x4bc2 <main+0xd2>
			{
				break;
			}

		}
		if (flag_reached ==1)
    4be4:	80 91 68 03 	lds	r24, 0x0368
    4be8:	90 91 69 03 	lds	r25, 0x0369
    4bec:	81 30       	cpi	r24, 0x01	; 1
    4bee:	91 05       	cpc	r25, r1
    4bf0:	09 f0       	breq	.+2      	; 0x4bf4 <main+0x104>
    4bf2:	8d cf       	rjmp	.-230    	; 0x4b0e <main+0x1e>
		{	
			int count=0;
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	e9 5b       	subi	r30, 0xB9	; 185
    4bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfa:	11 82       	std	Z+1, r1	; 0x01
    4bfc:	10 82       	st	Z, r1
		while(1)
			{
				Left_IR_sensor1 =ADC_Conversion(4);
    4bfe:	84 e0       	ldi	r24, 0x04	; 4
    4c00:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    4c04:	80 93 5f 03 	sts	0x035F, r24
    4c08:	a2 c0       	rjmp	.+324    	; 0x4d4e <main+0x25e>
				//print_sensor(2,6,4);
				while(Left_IR_sensor1 < thresh_weightsensor)
				{
					stop();
    4c0a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
					//print_sensor(2,6,4);
					buzzer_on();
    4c0e:	0e 94 ce 0a 	call	0x159c	; 0x159c <buzzer_on>
    4c12:	fe 01       	movw	r30, r28
    4c14:	ed 5b       	subi	r30, 0xBD	; 189
    4c16:	ff 4f       	sbci	r31, 0xFF	; 255
    4c18:	80 e0       	ldi	r24, 0x00	; 0
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	aa ef       	ldi	r26, 0xFA	; 250
    4c1e:	b3 e4       	ldi	r27, 0x43	; 67
    4c20:	80 83       	st	Z, r24
    4c22:	91 83       	std	Z+1, r25	; 0x01
    4c24:	a2 83       	std	Z+2, r26	; 0x02
    4c26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c28:	8e 01       	movw	r16, r28
    4c2a:	01 5c       	subi	r16, 0xC1	; 193
    4c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c2e:	fe 01       	movw	r30, r28
    4c30:	ed 5b       	subi	r30, 0xBD	; 189
    4c32:	ff 4f       	sbci	r31, 0xFF	; 255
    4c34:	60 81       	ld	r22, Z
    4c36:	71 81       	ldd	r23, Z+1	; 0x01
    4c38:	82 81       	ldd	r24, Z+2	; 0x02
    4c3a:	93 81       	ldd	r25, Z+3	; 0x03
    4c3c:	26 e6       	ldi	r18, 0x66	; 102
    4c3e:	36 e6       	ldi	r19, 0x66	; 102
    4c40:	46 e6       	ldi	r20, 0x66	; 102
    4c42:	55 e4       	ldi	r21, 0x45	; 69
    4c44:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	f8 01       	movw	r30, r16
    4c4e:	80 83       	st	Z, r24
    4c50:	91 83       	std	Z+1, r25	; 0x01
    4c52:	a2 83       	std	Z+2, r26	; 0x02
    4c54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c56:	fe 01       	movw	r30, r28
    4c58:	ff 96       	adiw	r30, 0x3f	; 63
    4c5a:	60 81       	ld	r22, Z
    4c5c:	71 81       	ldd	r23, Z+1	; 0x01
    4c5e:	82 81       	ldd	r24, Z+2	; 0x02
    4c60:	93 81       	ldd	r25, Z+3	; 0x03
    4c62:	20 e0       	ldi	r18, 0x00	; 0
    4c64:	30 e0       	ldi	r19, 0x00	; 0
    4c66:	40 e8       	ldi	r20, 0x80	; 128
    4c68:	5f e3       	ldi	r21, 0x3F	; 63
    4c6a:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    4c6e:	88 23       	and	r24, r24
    4c70:	2c f4       	brge	.+10     	; 0x4c7c <main+0x18c>
		__ticks = 1;
    4c72:	81 e0       	ldi	r24, 0x01	; 1
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	9e af       	std	Y+62, r25	; 0x3e
    4c78:	8d af       	std	Y+61, r24	; 0x3d
    4c7a:	46 c0       	rjmp	.+140    	; 0x4d08 <main+0x218>
	else if (__tmp > 65535)
    4c7c:	fe 01       	movw	r30, r28
    4c7e:	ff 96       	adiw	r30, 0x3f	; 63
    4c80:	60 81       	ld	r22, Z
    4c82:	71 81       	ldd	r23, Z+1	; 0x01
    4c84:	82 81       	ldd	r24, Z+2	; 0x02
    4c86:	93 81       	ldd	r25, Z+3	; 0x03
    4c88:	20 e0       	ldi	r18, 0x00	; 0
    4c8a:	3f ef       	ldi	r19, 0xFF	; 255
    4c8c:	4f e7       	ldi	r20, 0x7F	; 127
    4c8e:	57 e4       	ldi	r21, 0x47	; 71
    4c90:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    4c94:	18 16       	cp	r1, r24
    4c96:	64 f5       	brge	.+88     	; 0x4cf0 <main+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c98:	fe 01       	movw	r30, r28
    4c9a:	ed 5b       	subi	r30, 0xBD	; 189
    4c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9e:	60 81       	ld	r22, Z
    4ca0:	71 81       	ldd	r23, Z+1	; 0x01
    4ca2:	82 81       	ldd	r24, Z+2	; 0x02
    4ca4:	93 81       	ldd	r25, Z+3	; 0x03
    4ca6:	20 e0       	ldi	r18, 0x00	; 0
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	40 e2       	ldi	r20, 0x20	; 32
    4cac:	51 e4       	ldi	r21, 0x41	; 65
    4cae:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4cb2:	dc 01       	movw	r26, r24
    4cb4:	cb 01       	movw	r24, r22
    4cb6:	bc 01       	movw	r22, r24
    4cb8:	cd 01       	movw	r24, r26
    4cba:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4cbe:	dc 01       	movw	r26, r24
    4cc0:	cb 01       	movw	r24, r22
    4cc2:	9e af       	std	Y+62, r25	; 0x3e
    4cc4:	8d af       	std	Y+61, r24	; 0x3d
    4cc6:	0f c0       	rjmp	.+30     	; 0x4ce6 <main+0x1f6>
    4cc8:	80 e7       	ldi	r24, 0x70	; 112
    4cca:	91 e0       	ldi	r25, 0x01	; 1
    4ccc:	9c af       	std	Y+60, r25	; 0x3c
    4cce:	8b af       	std	Y+59, r24	; 0x3b
    4cd0:	8b ad       	ldd	r24, Y+59	; 0x3b
    4cd2:	9c ad       	ldd	r25, Y+60	; 0x3c
    4cd4:	01 97       	sbiw	r24, 0x01	; 1
    4cd6:	f1 f7       	brne	.-4      	; 0x4cd4 <main+0x1e4>
    4cd8:	9c af       	std	Y+60, r25	; 0x3c
    4cda:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    4cde:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ce0:	01 97       	sbiw	r24, 0x01	; 1
    4ce2:	9e af       	std	Y+62, r25	; 0x3e
    4ce4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ce6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ce8:	9e ad       	ldd	r25, Y+62	; 0x3e
    4cea:	00 97       	sbiw	r24, 0x00	; 0
    4cec:	69 f7       	brne	.-38     	; 0x4cc8 <main+0x1d8>
    4cee:	16 c0       	rjmp	.+44     	; 0x4d1c <main+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cf0:	fe 01       	movw	r30, r28
    4cf2:	ff 96       	adiw	r30, 0x3f	; 63
    4cf4:	60 81       	ld	r22, Z
    4cf6:	71 81       	ldd	r23, Z+1	; 0x01
    4cf8:	82 81       	ldd	r24, Z+2	; 0x02
    4cfa:	93 81       	ldd	r25, Z+3	; 0x03
    4cfc:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4d00:	dc 01       	movw	r26, r24
    4d02:	cb 01       	movw	r24, r22
    4d04:	9e af       	std	Y+62, r25	; 0x3e
    4d06:	8d af       	std	Y+61, r24	; 0x3d
    4d08:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d0c:	9a af       	std	Y+58, r25	; 0x3a
    4d0e:	89 af       	std	Y+57, r24	; 0x39
    4d10:	89 ad       	ldd	r24, Y+57	; 0x39
    4d12:	9a ad       	ldd	r25, Y+58	; 0x3a
    4d14:	01 97       	sbiw	r24, 0x01	; 1
    4d16:	f1 f7       	brne	.-4      	; 0x4d14 <main+0x224>
    4d18:	9a af       	std	Y+58, r25	; 0x3a
    4d1a:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(500);
					Left_IR_sensor1 =ADC_Conversion(4);
    4d1c:	84 e0       	ldi	r24, 0x04	; 4
    4d1e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    4d22:	80 93 5f 03 	sts	0x035F, r24
					count=count+1;
    4d26:	de 01       	movw	r26, r28
    4d28:	a9 5b       	subi	r26, 0xB9	; 185
    4d2a:	bf 4f       	sbci	r27, 0xFF	; 255
    4d2c:	fe 01       	movw	r30, r28
    4d2e:	e9 5b       	subi	r30, 0xB9	; 185
    4d30:	ff 4f       	sbci	r31, 0xFF	; 255
    4d32:	80 81       	ld	r24, Z
    4d34:	91 81       	ldd	r25, Z+1	; 0x01
    4d36:	01 96       	adiw	r24, 0x01	; 1
    4d38:	11 96       	adiw	r26, 0x01	; 1
    4d3a:	9c 93       	st	X, r25
    4d3c:	8e 93       	st	-X, r24
					if(count>10)
    4d3e:	fe 01       	movw	r30, r28
    4d40:	e9 5b       	subi	r30, 0xB9	; 185
    4d42:	ff 4f       	sbci	r31, 0xFF	; 255
    4d44:	80 81       	ld	r24, Z
    4d46:	91 81       	ldd	r25, Z+1	; 0x01
    4d48:	8b 30       	cpi	r24, 0x0B	; 11
    4d4a:	91 05       	cpc	r25, r1
    4d4c:	64 f4       	brge	.+24     	; 0x4d66 <main+0x276>
			int count=0;
		while(1)
			{
				Left_IR_sensor1 =ADC_Conversion(4);
				//print_sensor(2,6,4);
				while(Left_IR_sensor1 < thresh_weightsensor)
    4d4e:	80 91 5f 03 	lds	r24, 0x035F
    4d52:	28 2f       	mov	r18, r24
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	80 91 0a 02 	lds	r24, 0x020A
    4d5a:	90 91 0b 02 	lds	r25, 0x020B
    4d5e:	28 17       	cp	r18, r24
    4d60:	39 07       	cpc	r19, r25
    4d62:	08 f4       	brcc	.+2      	; 0x4d66 <main+0x276>
    4d64:	52 cf       	rjmp	.-348    	; 0x4c0a <main+0x11a>
						break;
					}
				    }
			break;
			}
			buzzer_off();
    4d66:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <buzzer_off>
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	aa e7       	ldi	r26, 0x7A	; 122
    4d70:	b4 e4       	ldi	r27, 0x44	; 68
    4d72:	8d ab       	std	Y+53, r24	; 0x35
    4d74:	9e ab       	std	Y+54, r25	; 0x36
    4d76:	af ab       	std	Y+55, r26	; 0x37
    4d78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d7a:	6d a9       	ldd	r22, Y+53	; 0x35
    4d7c:	7e a9       	ldd	r23, Y+54	; 0x36
    4d7e:	8f a9       	ldd	r24, Y+55	; 0x37
    4d80:	98 ad       	ldd	r25, Y+56	; 0x38
    4d82:	26 e6       	ldi	r18, 0x66	; 102
    4d84:	36 e6       	ldi	r19, 0x66	; 102
    4d86:	46 e6       	ldi	r20, 0x66	; 102
    4d88:	55 e4       	ldi	r21, 0x45	; 69
    4d8a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4d8e:	dc 01       	movw	r26, r24
    4d90:	cb 01       	movw	r24, r22
    4d92:	89 ab       	std	Y+49, r24	; 0x31
    4d94:	9a ab       	std	Y+50, r25	; 0x32
    4d96:	ab ab       	std	Y+51, r26	; 0x33
    4d98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4d9a:	69 a9       	ldd	r22, Y+49	; 0x31
    4d9c:	7a a9       	ldd	r23, Y+50	; 0x32
    4d9e:	8b a9       	ldd	r24, Y+51	; 0x33
    4da0:	9c a9       	ldd	r25, Y+52	; 0x34
    4da2:	20 e0       	ldi	r18, 0x00	; 0
    4da4:	30 e0       	ldi	r19, 0x00	; 0
    4da6:	40 e8       	ldi	r20, 0x80	; 128
    4da8:	5f e3       	ldi	r21, 0x3F	; 63
    4daa:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    4dae:	88 23       	and	r24, r24
    4db0:	2c f4       	brge	.+10     	; 0x4dbc <main+0x2cc>
		__ticks = 1;
    4db2:	81 e0       	ldi	r24, 0x01	; 1
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	98 ab       	std	Y+48, r25	; 0x30
    4db8:	8f a7       	std	Y+47, r24	; 0x2f
    4dba:	3f c0       	rjmp	.+126    	; 0x4e3a <main+0x34a>
	else if (__tmp > 65535)
    4dbc:	69 a9       	ldd	r22, Y+49	; 0x31
    4dbe:	7a a9       	ldd	r23, Y+50	; 0x32
    4dc0:	8b a9       	ldd	r24, Y+51	; 0x33
    4dc2:	9c a9       	ldd	r25, Y+52	; 0x34
    4dc4:	20 e0       	ldi	r18, 0x00	; 0
    4dc6:	3f ef       	ldi	r19, 0xFF	; 255
    4dc8:	4f e7       	ldi	r20, 0x7F	; 127
    4dca:	57 e4       	ldi	r21, 0x47	; 71
    4dcc:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    4dd0:	18 16       	cp	r1, r24
    4dd2:	4c f5       	brge	.+82     	; 0x4e26 <main+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd4:	6d a9       	ldd	r22, Y+53	; 0x35
    4dd6:	7e a9       	ldd	r23, Y+54	; 0x36
    4dd8:	8f a9       	ldd	r24, Y+55	; 0x37
    4dda:	98 ad       	ldd	r25, Y+56	; 0x38
    4ddc:	20 e0       	ldi	r18, 0x00	; 0
    4dde:	30 e0       	ldi	r19, 0x00	; 0
    4de0:	40 e2       	ldi	r20, 0x20	; 32
    4de2:	51 e4       	ldi	r21, 0x41	; 65
    4de4:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4de8:	dc 01       	movw	r26, r24
    4dea:	cb 01       	movw	r24, r22
    4dec:	bc 01       	movw	r22, r24
    4dee:	cd 01       	movw	r24, r26
    4df0:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4df4:	dc 01       	movw	r26, r24
    4df6:	cb 01       	movw	r24, r22
    4df8:	98 ab       	std	Y+48, r25	; 0x30
    4dfa:	8f a7       	std	Y+47, r24	; 0x2f
    4dfc:	0f c0       	rjmp	.+30     	; 0x4e1c <main+0x32c>
    4dfe:	80 e7       	ldi	r24, 0x70	; 112
    4e00:	91 e0       	ldi	r25, 0x01	; 1
    4e02:	9e a7       	std	Y+46, r25	; 0x2e
    4e04:	8d a7       	std	Y+45, r24	; 0x2d
    4e06:	8d a5       	ldd	r24, Y+45	; 0x2d
    4e08:	9e a5       	ldd	r25, Y+46	; 0x2e
    4e0a:	01 97       	sbiw	r24, 0x01	; 1
    4e0c:	f1 f7       	brne	.-4      	; 0x4e0a <main+0x31a>
    4e0e:	9e a7       	std	Y+46, r25	; 0x2e
    4e10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e12:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e14:	98 a9       	ldd	r25, Y+48	; 0x30
    4e16:	01 97       	sbiw	r24, 0x01	; 1
    4e18:	98 ab       	std	Y+48, r25	; 0x30
    4e1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e1e:	98 a9       	ldd	r25, Y+48	; 0x30
    4e20:	00 97       	sbiw	r24, 0x00	; 0
    4e22:	69 f7       	brne	.-38     	; 0x4dfe <main+0x30e>
    4e24:	14 c0       	rjmp	.+40     	; 0x4e4e <main+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e26:	69 a9       	ldd	r22, Y+49	; 0x31
    4e28:	7a a9       	ldd	r23, Y+50	; 0x32
    4e2a:	8b a9       	ldd	r24, Y+51	; 0x33
    4e2c:	9c a9       	ldd	r25, Y+52	; 0x34
    4e2e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4e32:	dc 01       	movw	r26, r24
    4e34:	cb 01       	movw	r24, r22
    4e36:	98 ab       	std	Y+48, r25	; 0x30
    4e38:	8f a7       	std	Y+47, r24	; 0x2f
    4e3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e3c:	98 a9       	ldd	r25, Y+48	; 0x30
    4e3e:	9c a7       	std	Y+44, r25	; 0x2c
    4e40:	8b a7       	std	Y+43, r24	; 0x2b
    4e42:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e44:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e46:	01 97       	sbiw	r24, 0x01	; 1
    4e48:	f1 f7       	brne	.-4      	; 0x4e46 <main+0x356>
    4e4a:	9c a7       	std	Y+44, r25	; 0x2c
    4e4c:	8b a7       	std	Y+43, r24	; 0x2b
    4e4e:	80 e0       	ldi	r24, 0x00	; 0
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	aa e7       	ldi	r26, 0x7A	; 122
    4e54:	b4 e4       	ldi	r27, 0x44	; 68
    4e56:	8f a3       	std	Y+39, r24	; 0x27
    4e58:	98 a7       	std	Y+40, r25	; 0x28
    4e5a:	a9 a7       	std	Y+41, r26	; 0x29
    4e5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e5e:	6f a1       	ldd	r22, Y+39	; 0x27
    4e60:	78 a5       	ldd	r23, Y+40	; 0x28
    4e62:	89 a5       	ldd	r24, Y+41	; 0x29
    4e64:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e66:	26 e6       	ldi	r18, 0x66	; 102
    4e68:	36 e6       	ldi	r19, 0x66	; 102
    4e6a:	46 e6       	ldi	r20, 0x66	; 102
    4e6c:	55 e4       	ldi	r21, 0x45	; 69
    4e6e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4e72:	dc 01       	movw	r26, r24
    4e74:	cb 01       	movw	r24, r22
    4e76:	8b a3       	std	Y+35, r24	; 0x23
    4e78:	9c a3       	std	Y+36, r25	; 0x24
    4e7a:	ad a3       	std	Y+37, r26	; 0x25
    4e7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    4e80:	7c a1       	ldd	r23, Y+36	; 0x24
    4e82:	8d a1       	ldd	r24, Y+37	; 0x25
    4e84:	9e a1       	ldd	r25, Y+38	; 0x26
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    4e8a:	40 e8       	ldi	r20, 0x80	; 128
    4e8c:	5f e3       	ldi	r21, 0x3F	; 63
    4e8e:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    4e92:	88 23       	and	r24, r24
    4e94:	2c f4       	brge	.+10     	; 0x4ea0 <main+0x3b0>
		__ticks = 1;
    4e96:	81 e0       	ldi	r24, 0x01	; 1
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	9a a3       	std	Y+34, r25	; 0x22
    4e9c:	89 a3       	std	Y+33, r24	; 0x21
    4e9e:	3f c0       	rjmp	.+126    	; 0x4f1e <main+0x42e>
	else if (__tmp > 65535)
    4ea0:	6b a1       	ldd	r22, Y+35	; 0x23
    4ea2:	7c a1       	ldd	r23, Y+36	; 0x24
    4ea4:	8d a1       	ldd	r24, Y+37	; 0x25
    4ea6:	9e a1       	ldd	r25, Y+38	; 0x26
    4ea8:	20 e0       	ldi	r18, 0x00	; 0
    4eaa:	3f ef       	ldi	r19, 0xFF	; 255
    4eac:	4f e7       	ldi	r20, 0x7F	; 127
    4eae:	57 e4       	ldi	r21, 0x47	; 71
    4eb0:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    4eb4:	18 16       	cp	r1, r24
    4eb6:	4c f5       	brge	.+82     	; 0x4f0a <main+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb8:	6f a1       	ldd	r22, Y+39	; 0x27
    4eba:	78 a5       	ldd	r23, Y+40	; 0x28
    4ebc:	89 a5       	ldd	r24, Y+41	; 0x29
    4ebe:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ec0:	20 e0       	ldi	r18, 0x00	; 0
    4ec2:	30 e0       	ldi	r19, 0x00	; 0
    4ec4:	40 e2       	ldi	r20, 0x20	; 32
    4ec6:	51 e4       	ldi	r21, 0x41	; 65
    4ec8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4ecc:	dc 01       	movw	r26, r24
    4ece:	cb 01       	movw	r24, r22
    4ed0:	bc 01       	movw	r22, r24
    4ed2:	cd 01       	movw	r24, r26
    4ed4:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4ed8:	dc 01       	movw	r26, r24
    4eda:	cb 01       	movw	r24, r22
    4edc:	9a a3       	std	Y+34, r25	; 0x22
    4ede:	89 a3       	std	Y+33, r24	; 0x21
    4ee0:	0f c0       	rjmp	.+30     	; 0x4f00 <main+0x410>
    4ee2:	80 e7       	ldi	r24, 0x70	; 112
    4ee4:	91 e0       	ldi	r25, 0x01	; 1
    4ee6:	98 a3       	std	Y+32, r25	; 0x20
    4ee8:	8f 8f       	std	Y+31, r24	; 0x1f
    4eea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4eec:	98 a1       	ldd	r25, Y+32	; 0x20
    4eee:	01 97       	sbiw	r24, 0x01	; 1
    4ef0:	f1 f7       	brne	.-4      	; 0x4eee <main+0x3fe>
    4ef2:	98 a3       	std	Y+32, r25	; 0x20
    4ef4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ef8:	9a a1       	ldd	r25, Y+34	; 0x22
    4efa:	01 97       	sbiw	r24, 0x01	; 1
    4efc:	9a a3       	std	Y+34, r25	; 0x22
    4efe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f00:	89 a1       	ldd	r24, Y+33	; 0x21
    4f02:	9a a1       	ldd	r25, Y+34	; 0x22
    4f04:	00 97       	sbiw	r24, 0x00	; 0
    4f06:	69 f7       	brne	.-38     	; 0x4ee2 <main+0x3f2>
    4f08:	14 c0       	rjmp	.+40     	; 0x4f32 <main+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    4f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    4f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    4f10:	9e a1       	ldd	r25, Y+38	; 0x26
    4f12:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    4f16:	dc 01       	movw	r26, r24
    4f18:	cb 01       	movw	r24, r22
    4f1a:	9a a3       	std	Y+34, r25	; 0x22
    4f1c:	89 a3       	std	Y+33, r24	; 0x21
    4f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    4f20:	9a a1       	ldd	r25, Y+34	; 0x22
    4f22:	9e 8f       	std	Y+30, r25	; 0x1e
    4f24:	8d 8f       	std	Y+29, r24	; 0x1d
    4f26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f2a:	01 97       	sbiw	r24, 0x01	; 1
    4f2c:	f1 f7       	brne	.-4      	; 0x4f2a <main+0x43a>
    4f2e:	9e 8f       	std	Y+30, r25	; 0x1e
    4f30:	8d 8f       	std	Y+29, r24	; 0x1d
			//buzzer_off();
			_delay_ms(1000);
			//buzzer_on();
			//_delay_ms(1000);
			//buzzer_off();
			lcd_print(2,8,y_dest,1);
    4f32:	20 91 90 03 	lds	r18, 0x0390
    4f36:	30 91 91 03 	lds	r19, 0x0391
    4f3a:	82 e0       	ldi	r24, 0x02	; 2
    4f3c:	68 e0       	ldi	r22, 0x08	; 8
    4f3e:	a9 01       	movw	r20, r18
    4f40:	21 e0       	ldi	r18, 0x01	; 1
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
			lcd_print(2,10,currentcounty,1);
    4f48:	80 91 76 03 	lds	r24, 0x0376
    4f4c:	90 91 77 03 	lds	r25, 0x0377
    4f50:	9c 01       	movw	r18, r24
    4f52:	82 e0       	ldi	r24, 0x02	; 2
    4f54:	6a e0       	ldi	r22, 0x0A	; 10
    4f56:	a9 01       	movw	r20, r18
    4f58:	21 e0       	ldi	r18, 0x01	; 1
    4f5a:	30 e0       	ldi	r19, 0x00	; 0
    4f5c:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
			if(y_dest>=2)
    4f60:	80 91 90 03 	lds	r24, 0x0390
    4f64:	90 91 91 03 	lds	r25, 0x0391
    4f68:	82 30       	cpi	r24, 0x02	; 2
    4f6a:	91 05       	cpc	r25, r1
    4f6c:	30 f1       	brcs	.+76     	; 0x4fba <main+0x4ca>
			{
				left_degrees(90);
    4f6e:	8a e5       	ldi	r24, 0x5A	; 90
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
				des_countx = 0; //desired table no from Zigbee
    4f76:	10 92 05 02 	sts	0x0205, r1
    4f7a:	10 92 04 02 	sts	0x0204, r1
				des_county = 2;
    4f7e:	82 e0       	ldi	r24, 0x02	; 2
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	90 93 07 02 	sts	0x0207, r25
    4f86:	80 93 06 02 	sts	0x0206, r24
				currentcountx=x_dest;
    4f8a:	80 91 a1 03 	lds	r24, 0x03A1
    4f8e:	90 91 a2 03 	lds	r25, 0x03A2
    4f92:	90 93 75 03 	sts	0x0375, r25
    4f96:	80 93 74 03 	sts	0x0374, r24
				currentcounty=y_dest+1;
    4f9a:	80 91 90 03 	lds	r24, 0x0390
    4f9e:	90 91 91 03 	lds	r25, 0x0391
    4fa2:	01 96       	adiw	r24, 0x01	; 1
    4fa4:	90 93 77 03 	sts	0x0377, r25
    4fa8:	80 93 76 03 	sts	0x0376, r24
				dest_backward=1;
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	90 93 59 03 	sts	0x0359, r25
    4fb4:	80 93 58 03 	sts	0x0358, r24
    4fb8:	98 c0       	rjmp	.+304    	; 0x50ea <main+0x5fa>
			}
			else
			{
				right_degrees(90);
    4fba:	8a e5       	ldi	r24, 0x5A	; 90
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
    4fc2:	80 e0       	ldi	r24, 0x00	; 0
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	a8 ec       	ldi	r26, 0xC8	; 200
    4fc8:	b2 e4       	ldi	r27, 0x42	; 66
    4fca:	89 8f       	std	Y+25, r24	; 0x19
    4fcc:	9a 8f       	std	Y+26, r25	; 0x1a
    4fce:	ab 8f       	std	Y+27, r26	; 0x1b
    4fd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fd2:	69 8d       	ldd	r22, Y+25	; 0x19
    4fd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fda:	26 e6       	ldi	r18, 0x66	; 102
    4fdc:	36 e6       	ldi	r19, 0x66	; 102
    4fde:	46 e6       	ldi	r20, 0x66	; 102
    4fe0:	55 e4       	ldi	r21, 0x45	; 69
    4fe2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4fe6:	dc 01       	movw	r26, r24
    4fe8:	cb 01       	movw	r24, r22
    4fea:	8d 8b       	std	Y+21, r24	; 0x15
    4fec:	9e 8b       	std	Y+22, r25	; 0x16
    4fee:	af 8b       	std	Y+23, r26	; 0x17
    4ff0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ff2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ff4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ff6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ff8:	98 8d       	ldd	r25, Y+24	; 0x18
    4ffa:	20 e0       	ldi	r18, 0x00	; 0
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	40 e8       	ldi	r20, 0x80	; 128
    5000:	5f e3       	ldi	r21, 0x3F	; 63
    5002:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    5006:	88 23       	and	r24, r24
    5008:	2c f4       	brge	.+10     	; 0x5014 <main+0x524>
		__ticks = 1;
    500a:	81 e0       	ldi	r24, 0x01	; 1
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	9c 8b       	std	Y+20, r25	; 0x14
    5010:	8b 8b       	std	Y+19, r24	; 0x13
    5012:	3f c0       	rjmp	.+126    	; 0x5092 <main+0x5a2>
	else if (__tmp > 65535)
    5014:	6d 89       	ldd	r22, Y+21	; 0x15
    5016:	7e 89       	ldd	r23, Y+22	; 0x16
    5018:	8f 89       	ldd	r24, Y+23	; 0x17
    501a:	98 8d       	ldd	r25, Y+24	; 0x18
    501c:	20 e0       	ldi	r18, 0x00	; 0
    501e:	3f ef       	ldi	r19, 0xFF	; 255
    5020:	4f e7       	ldi	r20, 0x7F	; 127
    5022:	57 e4       	ldi	r21, 0x47	; 71
    5024:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    5028:	18 16       	cp	r1, r24
    502a:	4c f5       	brge	.+82     	; 0x507e <main+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    502c:	69 8d       	ldd	r22, Y+25	; 0x19
    502e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	40 e2       	ldi	r20, 0x20	; 32
    503a:	51 e4       	ldi	r21, 0x41	; 65
    503c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5040:	dc 01       	movw	r26, r24
    5042:	cb 01       	movw	r24, r22
    5044:	bc 01       	movw	r22, r24
    5046:	cd 01       	movw	r24, r26
    5048:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    504c:	dc 01       	movw	r26, r24
    504e:	cb 01       	movw	r24, r22
    5050:	9c 8b       	std	Y+20, r25	; 0x14
    5052:	8b 8b       	std	Y+19, r24	; 0x13
    5054:	0f c0       	rjmp	.+30     	; 0x5074 <main+0x584>
    5056:	80 e7       	ldi	r24, 0x70	; 112
    5058:	91 e0       	ldi	r25, 0x01	; 1
    505a:	9a 8b       	std	Y+18, r25	; 0x12
    505c:	89 8b       	std	Y+17, r24	; 0x11
    505e:	89 89       	ldd	r24, Y+17	; 0x11
    5060:	9a 89       	ldd	r25, Y+18	; 0x12
    5062:	01 97       	sbiw	r24, 0x01	; 1
    5064:	f1 f7       	brne	.-4      	; 0x5062 <main+0x572>
    5066:	9a 8b       	std	Y+18, r25	; 0x12
    5068:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    506a:	8b 89       	ldd	r24, Y+19	; 0x13
    506c:	9c 89       	ldd	r25, Y+20	; 0x14
    506e:	01 97       	sbiw	r24, 0x01	; 1
    5070:	9c 8b       	std	Y+20, r25	; 0x14
    5072:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5074:	8b 89       	ldd	r24, Y+19	; 0x13
    5076:	9c 89       	ldd	r25, Y+20	; 0x14
    5078:	00 97       	sbiw	r24, 0x00	; 0
    507a:	69 f7       	brne	.-38     	; 0x5056 <main+0x566>
    507c:	14 c0       	rjmp	.+40     	; 0x50a6 <main+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    507e:	6d 89       	ldd	r22, Y+21	; 0x15
    5080:	7e 89       	ldd	r23, Y+22	; 0x16
    5082:	8f 89       	ldd	r24, Y+23	; 0x17
    5084:	98 8d       	ldd	r25, Y+24	; 0x18
    5086:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    508a:	dc 01       	movw	r26, r24
    508c:	cb 01       	movw	r24, r22
    508e:	9c 8b       	std	Y+20, r25	; 0x14
    5090:	8b 8b       	std	Y+19, r24	; 0x13
    5092:	8b 89       	ldd	r24, Y+19	; 0x13
    5094:	9c 89       	ldd	r25, Y+20	; 0x14
    5096:	98 8b       	std	Y+16, r25	; 0x10
    5098:	8f 87       	std	Y+15, r24	; 0x0f
    509a:	8f 85       	ldd	r24, Y+15	; 0x0f
    509c:	98 89       	ldd	r25, Y+16	; 0x10
    509e:	01 97       	sbiw	r24, 0x01	; 1
    50a0:	f1 f7       	brne	.-4      	; 0x509e <main+0x5ae>
    50a2:	98 8b       	std	Y+16, r25	; 0x10
    50a4:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);
				back_mm(50);
    50a6:	82 e3       	ldi	r24, 0x32	; 50
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	0e 94 ad 10 	call	0x215a	; 0x215a <back_mm>
				des_countx = 0; //desired table no from Zigbee
    50ae:	10 92 05 02 	sts	0x0205, r1
    50b2:	10 92 04 02 	sts	0x0204, r1
				des_county = 2;
    50b6:	82 e0       	ldi	r24, 0x02	; 2
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	90 93 07 02 	sts	0x0207, r25
    50be:	80 93 06 02 	sts	0x0206, r24
				currentcountx=x_dest;
    50c2:	80 91 a1 03 	lds	r24, 0x03A1
    50c6:	90 91 a2 03 	lds	r25, 0x03A2
    50ca:	90 93 75 03 	sts	0x0375, r25
    50ce:	80 93 74 03 	sts	0x0374, r24
				currentcounty=y_dest;
    50d2:	80 91 90 03 	lds	r24, 0x0390
    50d6:	90 91 91 03 	lds	r25, 0x0391
    50da:	90 93 77 03 	sts	0x0377, r25
    50de:	80 93 76 03 	sts	0x0376, r24
				dest_backward=0;
    50e2:	10 92 59 03 	sts	0x0359, r1
    50e6:	10 92 58 03 	sts	0x0358, r1
			}
			flag_reached = 0;
    50ea:	10 92 69 03 	sts	0x0369, r1
    50ee:	10 92 68 03 	sts	0x0368, r1
			while(1)
			{
				buzzer_off();
    50f2:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <buzzer_off>
				backroute();
    50f6:	0e 94 df 18 	call	0x31be	; 0x31be <backroute>
				if(flag_startreached==1)
    50fa:	80 91 6a 03 	lds	r24, 0x036A
    50fe:	90 91 6b 03 	lds	r25, 0x036B
    5102:	81 30       	cpi	r24, 0x01	; 1
    5104:	91 05       	cpc	r25, r1
    5106:	a9 f7       	brne	.-22     	; 0x50f2 <main+0x602>
    5108:	80 e0       	ldi	r24, 0x00	; 0
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	aa e7       	ldi	r26, 0x7A	; 122
    510e:	b4 e4       	ldi	r27, 0x44	; 68
    5110:	8b 87       	std	Y+11, r24	; 0x0b
    5112:	9c 87       	std	Y+12, r25	; 0x0c
    5114:	ad 87       	std	Y+13, r26	; 0x0d
    5116:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5118:	6b 85       	ldd	r22, Y+11	; 0x0b
    511a:	7c 85       	ldd	r23, Y+12	; 0x0c
    511c:	8d 85       	ldd	r24, Y+13	; 0x0d
    511e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5120:	26 e6       	ldi	r18, 0x66	; 102
    5122:	36 e6       	ldi	r19, 0x66	; 102
    5124:	46 e6       	ldi	r20, 0x66	; 102
    5126:	55 e4       	ldi	r21, 0x45	; 69
    5128:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    512c:	dc 01       	movw	r26, r24
    512e:	cb 01       	movw	r24, r22
    5130:	8f 83       	std	Y+7, r24	; 0x07
    5132:	98 87       	std	Y+8, r25	; 0x08
    5134:	a9 87       	std	Y+9, r26	; 0x09
    5136:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5138:	6f 81       	ldd	r22, Y+7	; 0x07
    513a:	78 85       	ldd	r23, Y+8	; 0x08
    513c:	89 85       	ldd	r24, Y+9	; 0x09
    513e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5140:	20 e0       	ldi	r18, 0x00	; 0
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	40 e8       	ldi	r20, 0x80	; 128
    5146:	5f e3       	ldi	r21, 0x3F	; 63
    5148:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    514c:	88 23       	and	r24, r24
    514e:	2c f4       	brge	.+10     	; 0x515a <main+0x66a>
		__ticks = 1;
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	9e 83       	std	Y+6, r25	; 0x06
    5156:	8d 83       	std	Y+5, r24	; 0x05
    5158:	3f c0       	rjmp	.+126    	; 0x51d8 <main+0x6e8>
	else if (__tmp > 65535)
    515a:	6f 81       	ldd	r22, Y+7	; 0x07
    515c:	78 85       	ldd	r23, Y+8	; 0x08
    515e:	89 85       	ldd	r24, Y+9	; 0x09
    5160:	9a 85       	ldd	r25, Y+10	; 0x0a
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	3f ef       	ldi	r19, 0xFF	; 255
    5166:	4f e7       	ldi	r20, 0x7F	; 127
    5168:	57 e4       	ldi	r21, 0x47	; 71
    516a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    516e:	18 16       	cp	r1, r24
    5170:	4c f5       	brge	.+82     	; 0x51c4 <main+0x6d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5172:	6b 85       	ldd	r22, Y+11	; 0x0b
    5174:	7c 85       	ldd	r23, Y+12	; 0x0c
    5176:	8d 85       	ldd	r24, Y+13	; 0x0d
    5178:	9e 85       	ldd	r25, Y+14	; 0x0e
    517a:	20 e0       	ldi	r18, 0x00	; 0
    517c:	30 e0       	ldi	r19, 0x00	; 0
    517e:	40 e2       	ldi	r20, 0x20	; 32
    5180:	51 e4       	ldi	r21, 0x41	; 65
    5182:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5186:	dc 01       	movw	r26, r24
    5188:	cb 01       	movw	r24, r22
    518a:	bc 01       	movw	r22, r24
    518c:	cd 01       	movw	r24, r26
    518e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5192:	dc 01       	movw	r26, r24
    5194:	cb 01       	movw	r24, r22
    5196:	9e 83       	std	Y+6, r25	; 0x06
    5198:	8d 83       	std	Y+5, r24	; 0x05
    519a:	0f c0       	rjmp	.+30     	; 0x51ba <main+0x6ca>
    519c:	80 e7       	ldi	r24, 0x70	; 112
    519e:	91 e0       	ldi	r25, 0x01	; 1
    51a0:	9c 83       	std	Y+4, r25	; 0x04
    51a2:	8b 83       	std	Y+3, r24	; 0x03
    51a4:	8b 81       	ldd	r24, Y+3	; 0x03
    51a6:	9c 81       	ldd	r25, Y+4	; 0x04
    51a8:	01 97       	sbiw	r24, 0x01	; 1
    51aa:	f1 f7       	brne	.-4      	; 0x51a8 <main+0x6b8>
    51ac:	9c 83       	std	Y+4, r25	; 0x04
    51ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51b0:	8d 81       	ldd	r24, Y+5	; 0x05
    51b2:	9e 81       	ldd	r25, Y+6	; 0x06
    51b4:	01 97       	sbiw	r24, 0x01	; 1
    51b6:	9e 83       	std	Y+6, r25	; 0x06
    51b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ba:	8d 81       	ldd	r24, Y+5	; 0x05
    51bc:	9e 81       	ldd	r25, Y+6	; 0x06
    51be:	00 97       	sbiw	r24, 0x00	; 0
    51c0:	69 f7       	brne	.-38     	; 0x519c <main+0x6ac>
    51c2:	14 c0       	rjmp	.+40     	; 0x51ec <main+0x6fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51c4:	6f 81       	ldd	r22, Y+7	; 0x07
    51c6:	78 85       	ldd	r23, Y+8	; 0x08
    51c8:	89 85       	ldd	r24, Y+9	; 0x09
    51ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    51cc:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    51d0:	dc 01       	movw	r26, r24
    51d2:	cb 01       	movw	r24, r22
    51d4:	9e 83       	std	Y+6, r25	; 0x06
    51d6:	8d 83       	std	Y+5, r24	; 0x05
    51d8:	8d 81       	ldd	r24, Y+5	; 0x05
    51da:	9e 81       	ldd	r25, Y+6	; 0x06
    51dc:	9a 83       	std	Y+2, r25	; 0x02
    51de:	89 83       	std	Y+1, r24	; 0x01
    51e0:	89 81       	ldd	r24, Y+1	; 0x01
    51e2:	9a 81       	ldd	r25, Y+2	; 0x02
    51e4:	01 97       	sbiw	r24, 0x01	; 1
    51e6:	f1 f7       	brne	.-4      	; 0x51e4 <main+0x6f4>
    51e8:	9a 83       	std	Y+2, r25	; 0x02
    51ea:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(1000);
					start=0;
    51ec:	10 92 4b 03 	sts	0x034B, r1
    51f0:	10 92 4a 03 	sts	0x034A, r1
					freebot=0;
    51f4:	10 92 7f 03 	sts	0x037F, r1
    51f8:	10 92 7e 03 	sts	0x037E, r1
    51fc:	88 cc       	rjmp	.-1776   	; 0x4b0e <main+0x1e>

000051fe <handle_obst_backward>:
	return;
}
}*/

void handle_obst_backward()
{
    51fe:	0f 93       	push	r16
    5200:	1f 93       	push	r17
    5202:	df 93       	push	r29
    5204:	cf 93       	push	r28
    5206:	cd b7       	in	r28, 0x3d	; 61
    5208:	de b7       	in	r29, 0x3e	; 62
    520a:	c0 57       	subi	r28, 0x70	; 112
    520c:	d0 40       	sbci	r29, 0x00	; 0
    520e:	0f b6       	in	r0, 0x3f	; 63
    5210:	f8 94       	cli
    5212:	de bf       	out	0x3e, r29	; 62
    5214:	0f be       	out	0x3f, r0	; 63
    5216:	cd bf       	out	0x3d, r28	; 61
if((y_reached == 0) && currentcounty>2)
    5218:	80 91 7c 03 	lds	r24, 0x037C
    521c:	90 91 7d 03 	lds	r25, 0x037D
    5220:	00 97       	sbiw	r24, 0x00	; 0
    5222:	09 f0       	breq	.+2      	; 0x5226 <handle_obst_backward+0x28>
    5224:	49 c1       	rjmp	.+658    	; 0x54b8 <handle_obst_backward+0x2ba>
    5226:	80 91 76 03 	lds	r24, 0x0376
    522a:	90 91 77 03 	lds	r25, 0x0377
    522e:	83 30       	cpi	r24, 0x03	; 3
    5230:	91 05       	cpc	r25, r1
    5232:	0c f4       	brge	.+2      	; 0x5236 <handle_obst_backward+0x38>
    5234:	41 c1       	rjmp	.+642    	; 0x54b8 <handle_obst_backward+0x2ba>
{
	//for(i=0;i<BOT_DELAY_BACKWARDY;i++)
	//{
		lcd_print(2,3,9,1);
    5236:	82 e0       	ldi	r24, 0x02	; 2
    5238:	63 e0       	ldi	r22, 0x03	; 3
    523a:	49 e0       	ldi	r20, 0x09	; 9
    523c:	50 e0       	ldi	r21, 0x00	; 0
    523e:	21 e0       	ldi	r18, 0x01	; 1
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    5246:	fe 01       	movw	r30, r28
    5248:	e3 59       	subi	r30, 0x93	; 147
    524a:	ff 4f       	sbci	r31, 0xFF	; 255
    524c:	80 e0       	ldi	r24, 0x00	; 0
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	aa ef       	ldi	r26, 0xFA	; 250
    5252:	b4 e4       	ldi	r27, 0x44	; 68
    5254:	80 83       	st	Z, r24
    5256:	91 83       	std	Z+1, r25	; 0x01
    5258:	a2 83       	std	Z+2, r26	; 0x02
    525a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    525c:	8e 01       	movw	r16, r28
    525e:	07 59       	subi	r16, 0x97	; 151
    5260:	1f 4f       	sbci	r17, 0xFF	; 255
    5262:	fe 01       	movw	r30, r28
    5264:	e3 59       	subi	r30, 0x93	; 147
    5266:	ff 4f       	sbci	r31, 0xFF	; 255
    5268:	60 81       	ld	r22, Z
    526a:	71 81       	ldd	r23, Z+1	; 0x01
    526c:	82 81       	ldd	r24, Z+2	; 0x02
    526e:	93 81       	ldd	r25, Z+3	; 0x03
    5270:	26 e6       	ldi	r18, 0x66	; 102
    5272:	36 e6       	ldi	r19, 0x66	; 102
    5274:	46 e6       	ldi	r20, 0x66	; 102
    5276:	55 e4       	ldi	r21, 0x45	; 69
    5278:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    527c:	dc 01       	movw	r26, r24
    527e:	cb 01       	movw	r24, r22
    5280:	f8 01       	movw	r30, r16
    5282:	80 83       	st	Z, r24
    5284:	91 83       	std	Z+1, r25	; 0x01
    5286:	a2 83       	std	Z+2, r26	; 0x02
    5288:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    528a:	fe 01       	movw	r30, r28
    528c:	e7 59       	subi	r30, 0x97	; 151
    528e:	ff 4f       	sbci	r31, 0xFF	; 255
    5290:	60 81       	ld	r22, Z
    5292:	71 81       	ldd	r23, Z+1	; 0x01
    5294:	82 81       	ldd	r24, Z+2	; 0x02
    5296:	93 81       	ldd	r25, Z+3	; 0x03
    5298:	20 e0       	ldi	r18, 0x00	; 0
    529a:	30 e0       	ldi	r19, 0x00	; 0
    529c:	40 e8       	ldi	r20, 0x80	; 128
    529e:	5f e3       	ldi	r21, 0x3F	; 63
    52a0:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    52a4:	88 23       	and	r24, r24
    52a6:	44 f4       	brge	.+16     	; 0x52b8 <handle_obst_backward+0xba>
		__ticks = 1;
    52a8:	fe 01       	movw	r30, r28
    52aa:	e9 59       	subi	r30, 0x99	; 153
    52ac:	ff 4f       	sbci	r31, 0xFF	; 255
    52ae:	81 e0       	ldi	r24, 0x01	; 1
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	91 83       	std	Z+1, r25	; 0x01
    52b4:	80 83       	st	Z, r24
    52b6:	64 c0       	rjmp	.+200    	; 0x5380 <handle_obst_backward+0x182>
	else if (__tmp > 65535)
    52b8:	fe 01       	movw	r30, r28
    52ba:	e7 59       	subi	r30, 0x97	; 151
    52bc:	ff 4f       	sbci	r31, 0xFF	; 255
    52be:	60 81       	ld	r22, Z
    52c0:	71 81       	ldd	r23, Z+1	; 0x01
    52c2:	82 81       	ldd	r24, Z+2	; 0x02
    52c4:	93 81       	ldd	r25, Z+3	; 0x03
    52c6:	20 e0       	ldi	r18, 0x00	; 0
    52c8:	3f ef       	ldi	r19, 0xFF	; 255
    52ca:	4f e7       	ldi	r20, 0x7F	; 127
    52cc:	57 e4       	ldi	r21, 0x47	; 71
    52ce:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    52d2:	18 16       	cp	r1, r24
    52d4:	0c f0       	brlt	.+2      	; 0x52d8 <handle_obst_backward+0xda>
    52d6:	43 c0       	rjmp	.+134    	; 0x535e <handle_obst_backward+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52d8:	fe 01       	movw	r30, r28
    52da:	e3 59       	subi	r30, 0x93	; 147
    52dc:	ff 4f       	sbci	r31, 0xFF	; 255
    52de:	60 81       	ld	r22, Z
    52e0:	71 81       	ldd	r23, Z+1	; 0x01
    52e2:	82 81       	ldd	r24, Z+2	; 0x02
    52e4:	93 81       	ldd	r25, Z+3	; 0x03
    52e6:	20 e0       	ldi	r18, 0x00	; 0
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	40 e2       	ldi	r20, 0x20	; 32
    52ec:	51 e4       	ldi	r21, 0x41	; 65
    52ee:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    52f2:	dc 01       	movw	r26, r24
    52f4:	cb 01       	movw	r24, r22
    52f6:	8e 01       	movw	r16, r28
    52f8:	09 59       	subi	r16, 0x99	; 153
    52fa:	1f 4f       	sbci	r17, 0xFF	; 255
    52fc:	bc 01       	movw	r22, r24
    52fe:	cd 01       	movw	r24, r26
    5300:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5304:	dc 01       	movw	r26, r24
    5306:	cb 01       	movw	r24, r22
    5308:	f8 01       	movw	r30, r16
    530a:	91 83       	std	Z+1, r25	; 0x01
    530c:	80 83       	st	Z, r24
    530e:	1f c0       	rjmp	.+62     	; 0x534e <handle_obst_backward+0x150>
    5310:	fe 01       	movw	r30, r28
    5312:	eb 59       	subi	r30, 0x9B	; 155
    5314:	ff 4f       	sbci	r31, 0xFF	; 255
    5316:	80 e7       	ldi	r24, 0x70	; 112
    5318:	91 e0       	ldi	r25, 0x01	; 1
    531a:	91 83       	std	Z+1, r25	; 0x01
    531c:	80 83       	st	Z, r24
    531e:	fe 01       	movw	r30, r28
    5320:	eb 59       	subi	r30, 0x9B	; 155
    5322:	ff 4f       	sbci	r31, 0xFF	; 255
    5324:	80 81       	ld	r24, Z
    5326:	91 81       	ldd	r25, Z+1	; 0x01
    5328:	01 97       	sbiw	r24, 0x01	; 1
    532a:	f1 f7       	brne	.-4      	; 0x5328 <handle_obst_backward+0x12a>
    532c:	fe 01       	movw	r30, r28
    532e:	eb 59       	subi	r30, 0x9B	; 155
    5330:	ff 4f       	sbci	r31, 0xFF	; 255
    5332:	91 83       	std	Z+1, r25	; 0x01
    5334:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5336:	de 01       	movw	r26, r28
    5338:	a9 59       	subi	r26, 0x99	; 153
    533a:	bf 4f       	sbci	r27, 0xFF	; 255
    533c:	fe 01       	movw	r30, r28
    533e:	e9 59       	subi	r30, 0x99	; 153
    5340:	ff 4f       	sbci	r31, 0xFF	; 255
    5342:	80 81       	ld	r24, Z
    5344:	91 81       	ldd	r25, Z+1	; 0x01
    5346:	01 97       	sbiw	r24, 0x01	; 1
    5348:	11 96       	adiw	r26, 0x01	; 1
    534a:	9c 93       	st	X, r25
    534c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    534e:	fe 01       	movw	r30, r28
    5350:	e9 59       	subi	r30, 0x99	; 153
    5352:	ff 4f       	sbci	r31, 0xFF	; 255
    5354:	80 81       	ld	r24, Z
    5356:	91 81       	ldd	r25, Z+1	; 0x01
    5358:	00 97       	sbiw	r24, 0x00	; 0
    535a:	d1 f6       	brne	.-76     	; 0x5310 <handle_obst_backward+0x112>
    535c:	27 c0       	rjmp	.+78     	; 0x53ac <handle_obst_backward+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    535e:	8e 01       	movw	r16, r28
    5360:	09 59       	subi	r16, 0x99	; 153
    5362:	1f 4f       	sbci	r17, 0xFF	; 255
    5364:	fe 01       	movw	r30, r28
    5366:	e7 59       	subi	r30, 0x97	; 151
    5368:	ff 4f       	sbci	r31, 0xFF	; 255
    536a:	60 81       	ld	r22, Z
    536c:	71 81       	ldd	r23, Z+1	; 0x01
    536e:	82 81       	ldd	r24, Z+2	; 0x02
    5370:	93 81       	ldd	r25, Z+3	; 0x03
    5372:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5376:	dc 01       	movw	r26, r24
    5378:	cb 01       	movw	r24, r22
    537a:	f8 01       	movw	r30, r16
    537c:	91 83       	std	Z+1, r25	; 0x01
    537e:	80 83       	st	Z, r24
    5380:	de 01       	movw	r26, r28
    5382:	ad 59       	subi	r26, 0x9D	; 157
    5384:	bf 4f       	sbci	r27, 0xFF	; 255
    5386:	fe 01       	movw	r30, r28
    5388:	e9 59       	subi	r30, 0x99	; 153
    538a:	ff 4f       	sbci	r31, 0xFF	; 255
    538c:	80 81       	ld	r24, Z
    538e:	91 81       	ldd	r25, Z+1	; 0x01
    5390:	8d 93       	st	X+, r24
    5392:	9c 93       	st	X, r25
    5394:	fe 01       	movw	r30, r28
    5396:	ed 59       	subi	r30, 0x9D	; 157
    5398:	ff 4f       	sbci	r31, 0xFF	; 255
    539a:	80 81       	ld	r24, Z
    539c:	91 81       	ldd	r25, Z+1	; 0x01
    539e:	01 97       	sbiw	r24, 0x01	; 1
    53a0:	f1 f7       	brne	.-4      	; 0x539e <handle_obst_backward+0x1a0>
    53a2:	fe 01       	movw	r30, r28
    53a4:	ed 59       	subi	r30, 0x9D	; 157
    53a6:	ff 4f       	sbci	r31, 0xFF	; 255
    53a8:	91 83       	std	Z+1, r25	; 0x01
    53aa:	80 83       	st	Z, r24
		_delay_ms(2000);
		sample_sensor();
    53ac:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
		if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
    53b0:	80 91 5a 03 	lds	r24, 0x035A
    53b4:	28 2f       	mov	r18, r24
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	80 91 08 02 	lds	r24, 0x0208
    53bc:	90 91 09 02 	lds	r25, 0x0209
    53c0:	82 17       	cp	r24, r18
    53c2:	93 07       	cpc	r25, r19
    53c4:	10 f1       	brcs	.+68     	; 0x540a <handle_obst_backward+0x20c>
    53c6:	80 91 5b 03 	lds	r24, 0x035B
    53ca:	28 2f       	mov	r18, r24
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	80 91 86 03 	lds	r24, 0x0386
    53d2:	90 91 87 03 	lds	r25, 0x0387
    53d6:	28 17       	cp	r18, r24
    53d8:	39 07       	cpc	r19, r25
    53da:	b8 f0       	brcs	.+46     	; 0x540a <handle_obst_backward+0x20c>
    53dc:	80 91 60 03 	lds	r24, 0x0360
    53e0:	28 2f       	mov	r18, r24
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	80 91 86 03 	lds	r24, 0x0386
    53e8:	90 91 87 03 	lds	r25, 0x0387
    53ec:	28 17       	cp	r18, r24
    53ee:	39 07       	cpc	r19, r25
    53f0:	60 f0       	brcs	.+24     	; 0x540a <handle_obst_backward+0x20c>
    53f2:	80 91 61 03 	lds	r24, 0x0361
    53f6:	28 2f       	mov	r18, r24
    53f8:	30 e0       	ldi	r19, 0x00	; 0
    53fa:	80 91 86 03 	lds	r24, 0x0386
    53fe:	90 91 87 03 	lds	r25, 0x0387
    5402:	28 17       	cp	r18, r24
    5404:	39 07       	cpc	r19, r25
    5406:	08 f0       	brcs	.+2      	; 0x540a <handle_obst_backward+0x20c>
    5408:	fe c5       	rjmp	.+3068   	; 0x6006 <handle_obst_backward+0xe08>
		{
			return;
		}
		sample_sensor();
    540a:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
	//}
	right_degrees(180);
    540e:	84 eb       	ldi	r24, 0xB4	; 180
    5410:	90 e0       	ldi	r25, 0x00	; 0
    5412:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
	back_mm(30);
    5416:	8e e1       	ldi	r24, 0x1E	; 30
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	0e 94 ad 10 	call	0x215a	; 0x215a <back_mm>
	sample_sensor();
    541e:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
	//if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
	//{
		grid_forward();
    5422:	0e 94 0f 30 	call	0x601e	; 0x601e <grid_forward>
		//_delay_ms(5000);
		left_degrees(90);
    5426:	8a e5       	ldi	r24, 0x5A	; 90
    5428:	90 e0       	ldi	r25, 0x00	; 0
    542a:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
		lcd_print(2,1,currentcountx,2);
    542e:	80 91 74 03 	lds	r24, 0x0374
    5432:	90 91 75 03 	lds	r25, 0x0375
    5436:	9c 01       	movw	r18, r24
    5438:	82 e0       	ldi	r24, 0x02	; 2
    543a:	61 e0       	ldi	r22, 0x01	; 1
    543c:	a9 01       	movw	r20, r18
    543e:	22 e0       	ldi	r18, 0x02	; 2
    5440:	30 e0       	ldi	r19, 0x00	; 0
    5442:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    5446:	17 c0       	rjmp	.+46     	; 0x5476 <handle_obst_backward+0x278>
		//_delay_ms(5000);
		while(currentcountx!=1)
		{
			grid_forward();
    5448:	0e 94 0f 30 	call	0x601e	; 0x601e <grid_forward>
			//_delay_ms(5000);
			currentcountx=currentcountx-1;
    544c:	80 91 74 03 	lds	r24, 0x0374
    5450:	90 91 75 03 	lds	r25, 0x0375
    5454:	01 97       	sbiw	r24, 0x01	; 1
    5456:	90 93 75 03 	sts	0x0375, r25
    545a:	80 93 74 03 	sts	0x0374, r24
			lcd_print(2,1,currentcountx,2);
    545e:	80 91 74 03 	lds	r24, 0x0374
    5462:	90 91 75 03 	lds	r25, 0x0375
    5466:	9c 01       	movw	r18, r24
    5468:	82 e0       	ldi	r24, 0x02	; 2
    546a:	61 e0       	ldi	r22, 0x01	; 1
    546c:	a9 01       	movw	r20, r18
    546e:	22 e0       	ldi	r18, 0x02	; 2
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		grid_forward();
		//_delay_ms(5000);
		left_degrees(90);
		lcd_print(2,1,currentcountx,2);
		//_delay_ms(5000);
		while(currentcountx!=1)
    5476:	80 91 74 03 	lds	r24, 0x0374
    547a:	90 91 75 03 	lds	r25, 0x0375
    547e:	81 30       	cpi	r24, 0x01	; 1
    5480:	91 05       	cpc	r25, r1
    5482:	11 f7       	brne	.-60     	; 0x5448 <handle_obst_backward+0x24a>
			grid_forward();
			//_delay_ms(5000);
			currentcountx=currentcountx-1;
			lcd_print(2,1,currentcountx,2);
		}
		back_reroute=1;
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	90 93 67 03 	sts	0x0367, r25
    548c:	80 93 66 03 	sts	0x0366, r24
		if((Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE))
    5490:	80 91 46 03 	lds	r24, 0x0346
    5494:	80 34       	cpi	r24, 0x40	; 64
    5496:	68 f0       	brcs	.+26     	; 0x54b2 <handle_obst_backward+0x2b4>
    5498:	80 91 45 03 	lds	r24, 0x0345
    549c:	80 34       	cpi	r24, 0x40	; 64
    549e:	48 f0       	brcs	.+18     	; 0x54b2 <handle_obst_backward+0x2b4>
    54a0:	80 91 47 03 	lds	r24, 0x0347
    54a4:	80 34       	cpi	r24, 0x40	; 64
    54a6:	28 f0       	brcs	.+10     	; 0x54b2 <handle_obst_backward+0x2b4>
		{
			left_degrees(90);
    54a8:	8a e5       	ldi	r24, 0x5A	; 90
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
    54b0:	aa c5       	rjmp	.+2900   	; 0x6006 <handle_obst_backward+0xe08>
		}
		else buzzer_on();
    54b2:	0e 94 ce 0a 	call	0x159c	; 0x159c <buzzer_on>
    54b6:	a7 c5       	rjmp	.+2894   	; 0x6006 <handle_obst_backward+0xe08>
		
	//}
	
}	
else if((y_reached == 0) && currentcounty<1)
    54b8:	80 91 7c 03 	lds	r24, 0x037C
    54bc:	90 91 7d 03 	lds	r25, 0x037D
    54c0:	00 97       	sbiw	r24, 0x00	; 0
    54c2:	09 f0       	breq	.+2      	; 0x54c6 <handle_obst_backward+0x2c8>
    54c4:	69 c1       	rjmp	.+722    	; 0x5798 <handle_obst_backward+0x59a>
    54c6:	80 91 76 03 	lds	r24, 0x0376
    54ca:	90 91 77 03 	lds	r25, 0x0377
    54ce:	18 16       	cp	r1, r24
    54d0:	19 06       	cpc	r1, r25
    54d2:	0c f4       	brge	.+2      	; 0x54d6 <handle_obst_backward+0x2d8>
    54d4:	61 c1       	rjmp	.+706    	; 0x5798 <handle_obst_backward+0x59a>
{
	//for(i=0;i<BOT_DELAY_BACKWARDY;i++)
	//{
		lcd_print(2,3,9,1);
    54d6:	82 e0       	ldi	r24, 0x02	; 2
    54d8:	63 e0       	ldi	r22, 0x03	; 3
    54da:	49 e0       	ldi	r20, 0x09	; 9
    54dc:	50 e0       	ldi	r21, 0x00	; 0
    54de:	21 e0       	ldi	r18, 0x01	; 1
    54e0:	30 e0       	ldi	r19, 0x00	; 0
    54e2:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    54e6:	fe 01       	movw	r30, r28
    54e8:	e1 5a       	subi	r30, 0xA1	; 161
    54ea:	ff 4f       	sbci	r31, 0xFF	; 255
    54ec:	80 e0       	ldi	r24, 0x00	; 0
    54ee:	90 e0       	ldi	r25, 0x00	; 0
    54f0:	aa ef       	ldi	r26, 0xFA	; 250
    54f2:	b4 e4       	ldi	r27, 0x44	; 68
    54f4:	80 83       	st	Z, r24
    54f6:	91 83       	std	Z+1, r25	; 0x01
    54f8:	a2 83       	std	Z+2, r26	; 0x02
    54fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54fc:	8e 01       	movw	r16, r28
    54fe:	05 5a       	subi	r16, 0xA5	; 165
    5500:	1f 4f       	sbci	r17, 0xFF	; 255
    5502:	fe 01       	movw	r30, r28
    5504:	e1 5a       	subi	r30, 0xA1	; 161
    5506:	ff 4f       	sbci	r31, 0xFF	; 255
    5508:	60 81       	ld	r22, Z
    550a:	71 81       	ldd	r23, Z+1	; 0x01
    550c:	82 81       	ldd	r24, Z+2	; 0x02
    550e:	93 81       	ldd	r25, Z+3	; 0x03
    5510:	26 e6       	ldi	r18, 0x66	; 102
    5512:	36 e6       	ldi	r19, 0x66	; 102
    5514:	46 e6       	ldi	r20, 0x66	; 102
    5516:	55 e4       	ldi	r21, 0x45	; 69
    5518:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    551c:	dc 01       	movw	r26, r24
    551e:	cb 01       	movw	r24, r22
    5520:	f8 01       	movw	r30, r16
    5522:	80 83       	st	Z, r24
    5524:	91 83       	std	Z+1, r25	; 0x01
    5526:	a2 83       	std	Z+2, r26	; 0x02
    5528:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    552a:	fe 01       	movw	r30, r28
    552c:	e5 5a       	subi	r30, 0xA5	; 165
    552e:	ff 4f       	sbci	r31, 0xFF	; 255
    5530:	60 81       	ld	r22, Z
    5532:	71 81       	ldd	r23, Z+1	; 0x01
    5534:	82 81       	ldd	r24, Z+2	; 0x02
    5536:	93 81       	ldd	r25, Z+3	; 0x03
    5538:	20 e0       	ldi	r18, 0x00	; 0
    553a:	30 e0       	ldi	r19, 0x00	; 0
    553c:	40 e8       	ldi	r20, 0x80	; 128
    553e:	5f e3       	ldi	r21, 0x3F	; 63
    5540:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    5544:	88 23       	and	r24, r24
    5546:	44 f4       	brge	.+16     	; 0x5558 <handle_obst_backward+0x35a>
		__ticks = 1;
    5548:	fe 01       	movw	r30, r28
    554a:	e7 5a       	subi	r30, 0xA7	; 167
    554c:	ff 4f       	sbci	r31, 0xFF	; 255
    554e:	81 e0       	ldi	r24, 0x01	; 1
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	91 83       	std	Z+1, r25	; 0x01
    5554:	80 83       	st	Z, r24
    5556:	64 c0       	rjmp	.+200    	; 0x5620 <handle_obst_backward+0x422>
	else if (__tmp > 65535)
    5558:	fe 01       	movw	r30, r28
    555a:	e5 5a       	subi	r30, 0xA5	; 165
    555c:	ff 4f       	sbci	r31, 0xFF	; 255
    555e:	60 81       	ld	r22, Z
    5560:	71 81       	ldd	r23, Z+1	; 0x01
    5562:	82 81       	ldd	r24, Z+2	; 0x02
    5564:	93 81       	ldd	r25, Z+3	; 0x03
    5566:	20 e0       	ldi	r18, 0x00	; 0
    5568:	3f ef       	ldi	r19, 0xFF	; 255
    556a:	4f e7       	ldi	r20, 0x7F	; 127
    556c:	57 e4       	ldi	r21, 0x47	; 71
    556e:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    5572:	18 16       	cp	r1, r24
    5574:	0c f0       	brlt	.+2      	; 0x5578 <handle_obst_backward+0x37a>
    5576:	43 c0       	rjmp	.+134    	; 0x55fe <handle_obst_backward+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5578:	fe 01       	movw	r30, r28
    557a:	e1 5a       	subi	r30, 0xA1	; 161
    557c:	ff 4f       	sbci	r31, 0xFF	; 255
    557e:	60 81       	ld	r22, Z
    5580:	71 81       	ldd	r23, Z+1	; 0x01
    5582:	82 81       	ldd	r24, Z+2	; 0x02
    5584:	93 81       	ldd	r25, Z+3	; 0x03
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	40 e2       	ldi	r20, 0x20	; 32
    558c:	51 e4       	ldi	r21, 0x41	; 65
    558e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5592:	dc 01       	movw	r26, r24
    5594:	cb 01       	movw	r24, r22
    5596:	8e 01       	movw	r16, r28
    5598:	07 5a       	subi	r16, 0xA7	; 167
    559a:	1f 4f       	sbci	r17, 0xFF	; 255
    559c:	bc 01       	movw	r22, r24
    559e:	cd 01       	movw	r24, r26
    55a0:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	f8 01       	movw	r30, r16
    55aa:	91 83       	std	Z+1, r25	; 0x01
    55ac:	80 83       	st	Z, r24
    55ae:	1f c0       	rjmp	.+62     	; 0x55ee <handle_obst_backward+0x3f0>
    55b0:	fe 01       	movw	r30, r28
    55b2:	e9 5a       	subi	r30, 0xA9	; 169
    55b4:	ff 4f       	sbci	r31, 0xFF	; 255
    55b6:	80 e7       	ldi	r24, 0x70	; 112
    55b8:	91 e0       	ldi	r25, 0x01	; 1
    55ba:	91 83       	std	Z+1, r25	; 0x01
    55bc:	80 83       	st	Z, r24
    55be:	fe 01       	movw	r30, r28
    55c0:	e9 5a       	subi	r30, 0xA9	; 169
    55c2:	ff 4f       	sbci	r31, 0xFF	; 255
    55c4:	80 81       	ld	r24, Z
    55c6:	91 81       	ldd	r25, Z+1	; 0x01
    55c8:	01 97       	sbiw	r24, 0x01	; 1
    55ca:	f1 f7       	brne	.-4      	; 0x55c8 <handle_obst_backward+0x3ca>
    55cc:	fe 01       	movw	r30, r28
    55ce:	e9 5a       	subi	r30, 0xA9	; 169
    55d0:	ff 4f       	sbci	r31, 0xFF	; 255
    55d2:	91 83       	std	Z+1, r25	; 0x01
    55d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55d6:	de 01       	movw	r26, r28
    55d8:	a7 5a       	subi	r26, 0xA7	; 167
    55da:	bf 4f       	sbci	r27, 0xFF	; 255
    55dc:	fe 01       	movw	r30, r28
    55de:	e7 5a       	subi	r30, 0xA7	; 167
    55e0:	ff 4f       	sbci	r31, 0xFF	; 255
    55e2:	80 81       	ld	r24, Z
    55e4:	91 81       	ldd	r25, Z+1	; 0x01
    55e6:	01 97       	sbiw	r24, 0x01	; 1
    55e8:	11 96       	adiw	r26, 0x01	; 1
    55ea:	9c 93       	st	X, r25
    55ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55ee:	fe 01       	movw	r30, r28
    55f0:	e7 5a       	subi	r30, 0xA7	; 167
    55f2:	ff 4f       	sbci	r31, 0xFF	; 255
    55f4:	80 81       	ld	r24, Z
    55f6:	91 81       	ldd	r25, Z+1	; 0x01
    55f8:	00 97       	sbiw	r24, 0x00	; 0
    55fa:	d1 f6       	brne	.-76     	; 0x55b0 <handle_obst_backward+0x3b2>
    55fc:	27 c0       	rjmp	.+78     	; 0x564c <handle_obst_backward+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55fe:	8e 01       	movw	r16, r28
    5600:	07 5a       	subi	r16, 0xA7	; 167
    5602:	1f 4f       	sbci	r17, 0xFF	; 255
    5604:	fe 01       	movw	r30, r28
    5606:	e5 5a       	subi	r30, 0xA5	; 165
    5608:	ff 4f       	sbci	r31, 0xFF	; 255
    560a:	60 81       	ld	r22, Z
    560c:	71 81       	ldd	r23, Z+1	; 0x01
    560e:	82 81       	ldd	r24, Z+2	; 0x02
    5610:	93 81       	ldd	r25, Z+3	; 0x03
    5612:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5616:	dc 01       	movw	r26, r24
    5618:	cb 01       	movw	r24, r22
    561a:	f8 01       	movw	r30, r16
    561c:	91 83       	std	Z+1, r25	; 0x01
    561e:	80 83       	st	Z, r24
    5620:	de 01       	movw	r26, r28
    5622:	ab 5a       	subi	r26, 0xAB	; 171
    5624:	bf 4f       	sbci	r27, 0xFF	; 255
    5626:	fe 01       	movw	r30, r28
    5628:	e7 5a       	subi	r30, 0xA7	; 167
    562a:	ff 4f       	sbci	r31, 0xFF	; 255
    562c:	80 81       	ld	r24, Z
    562e:	91 81       	ldd	r25, Z+1	; 0x01
    5630:	8d 93       	st	X+, r24
    5632:	9c 93       	st	X, r25
    5634:	fe 01       	movw	r30, r28
    5636:	eb 5a       	subi	r30, 0xAB	; 171
    5638:	ff 4f       	sbci	r31, 0xFF	; 255
    563a:	80 81       	ld	r24, Z
    563c:	91 81       	ldd	r25, Z+1	; 0x01
    563e:	01 97       	sbiw	r24, 0x01	; 1
    5640:	f1 f7       	brne	.-4      	; 0x563e <handle_obst_backward+0x440>
    5642:	fe 01       	movw	r30, r28
    5644:	eb 5a       	subi	r30, 0xAB	; 171
    5646:	ff 4f       	sbci	r31, 0xFF	; 255
    5648:	91 83       	std	Z+1, r25	; 0x01
    564a:	80 83       	st	Z, r24
		_delay_ms(2000);
		sample_sensor();
    564c:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
		if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
    5650:	80 91 5a 03 	lds	r24, 0x035A
    5654:	28 2f       	mov	r18, r24
    5656:	30 e0       	ldi	r19, 0x00	; 0
    5658:	80 91 08 02 	lds	r24, 0x0208
    565c:	90 91 09 02 	lds	r25, 0x0209
    5660:	82 17       	cp	r24, r18
    5662:	93 07       	cpc	r25, r19
    5664:	10 f1       	brcs	.+68     	; 0x56aa <handle_obst_backward+0x4ac>
    5666:	80 91 5b 03 	lds	r24, 0x035B
    566a:	28 2f       	mov	r18, r24
    566c:	30 e0       	ldi	r19, 0x00	; 0
    566e:	80 91 86 03 	lds	r24, 0x0386
    5672:	90 91 87 03 	lds	r25, 0x0387
    5676:	28 17       	cp	r18, r24
    5678:	39 07       	cpc	r19, r25
    567a:	b8 f0       	brcs	.+46     	; 0x56aa <handle_obst_backward+0x4ac>
    567c:	80 91 60 03 	lds	r24, 0x0360
    5680:	28 2f       	mov	r18, r24
    5682:	30 e0       	ldi	r19, 0x00	; 0
    5684:	80 91 86 03 	lds	r24, 0x0386
    5688:	90 91 87 03 	lds	r25, 0x0387
    568c:	28 17       	cp	r18, r24
    568e:	39 07       	cpc	r19, r25
    5690:	60 f0       	brcs	.+24     	; 0x56aa <handle_obst_backward+0x4ac>
    5692:	80 91 61 03 	lds	r24, 0x0361
    5696:	28 2f       	mov	r18, r24
    5698:	30 e0       	ldi	r19, 0x00	; 0
    569a:	80 91 86 03 	lds	r24, 0x0386
    569e:	90 91 87 03 	lds	r25, 0x0387
    56a2:	28 17       	cp	r18, r24
    56a4:	39 07       	cpc	r19, r25
    56a6:	08 f0       	brcs	.+2      	; 0x56aa <handle_obst_backward+0x4ac>
    56a8:	ae c4       	rjmp	.+2396   	; 0x6006 <handle_obst_backward+0xe08>
		{
			return;
		}
		sample_sensor();
    56aa:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>


	right_degrees(180);
    56ae:	84 eb       	ldi	r24, 0xB4	; 180
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
	back_mm(30);
    56b6:	8e e1       	ldi	r24, 0x1E	; 30
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	0e 94 ad 10 	call	0x215a	; 0x215a <back_mm>
	sample_sensor();
    56be:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
	//if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
	//{
		grid_forward();
    56c2:	0e 94 0f 30 	call	0x601e	; 0x601e <grid_forward>
		//_delay_ms(5000);
		right_degrees(90);
    56c6:	8a e5       	ldi	r24, 0x5A	; 90
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
		lcd_print(2,1,currentcountx,2);
    56ce:	80 91 74 03 	lds	r24, 0x0374
    56d2:	90 91 75 03 	lds	r25, 0x0375
    56d6:	9c 01       	movw	r18, r24
    56d8:	82 e0       	ldi	r24, 0x02	; 2
    56da:	61 e0       	ldi	r22, 0x01	; 1
    56dc:	a9 01       	movw	r20, r18
    56de:	22 e0       	ldi	r18, 0x02	; 2
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    56e6:	37 c0       	rjmp	.+110    	; 0x5756 <handle_obst_backward+0x558>
		//_delay_ms(5000);
		while(currentcountx!=1)
		{
			grid_forward();
    56e8:	0e 94 0f 30 	call	0x601e	; 0x601e <grid_forward>
			Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    56ec:	83 e0       	ldi	r24, 0x03	; 3
    56ee:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    56f2:	80 93 45 03 	sts	0x0345, r24
			Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    56f6:	82 e0       	ldi	r24, 0x02	; 2
    56f8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    56fc:	80 93 46 03 	sts	0x0346, r24
			Right_white_line = ADC_Conversion(1);
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    5706:	80 93 47 03 	sts	0x0347, r24
    570a:	04 c0       	rjmp	.+8      	; 0x5714 <handle_obst_backward+0x516>
			while(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE)
			{
				forward_mm(5);
    570c:	85 e0       	ldi	r24, 0x05	; 5
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
		{
			grid_forward();
			Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
			Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
			Right_white_line = ADC_Conversion(1);
			while(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE)
    5714:	80 91 46 03 	lds	r24, 0x0346
    5718:	80 34       	cpi	r24, 0x40	; 64
    571a:	40 f0       	brcs	.+16     	; 0x572c <handle_obst_backward+0x52e>
    571c:	80 91 45 03 	lds	r24, 0x0345
    5720:	80 34       	cpi	r24, 0x40	; 64
    5722:	20 f0       	brcs	.+8      	; 0x572c <handle_obst_backward+0x52e>
    5724:	80 91 47 03 	lds	r24, 0x0347
    5728:	80 34       	cpi	r24, 0x40	; 64
    572a:	80 f7       	brcc	.-32     	; 0x570c <handle_obst_backward+0x50e>
			{
				forward_mm(5);
			}
			//_delay_ms(5000);
			currentcountx=currentcountx-1;
    572c:	80 91 74 03 	lds	r24, 0x0374
    5730:	90 91 75 03 	lds	r25, 0x0375
    5734:	01 97       	sbiw	r24, 0x01	; 1
    5736:	90 93 75 03 	sts	0x0375, r25
    573a:	80 93 74 03 	sts	0x0374, r24
			lcd_print(2,1,currentcountx,2);
    573e:	80 91 74 03 	lds	r24, 0x0374
    5742:	90 91 75 03 	lds	r25, 0x0375
    5746:	9c 01       	movw	r18, r24
    5748:	82 e0       	ldi	r24, 0x02	; 2
    574a:	61 e0       	ldi	r22, 0x01	; 1
    574c:	a9 01       	movw	r20, r18
    574e:	22 e0       	ldi	r18, 0x02	; 2
    5750:	30 e0       	ldi	r19, 0x00	; 0
    5752:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		grid_forward();
		//_delay_ms(5000);
		right_degrees(90);
		lcd_print(2,1,currentcountx,2);
		//_delay_ms(5000);
		while(currentcountx!=1)
    5756:	80 91 74 03 	lds	r24, 0x0374
    575a:	90 91 75 03 	lds	r25, 0x0375
    575e:	81 30       	cpi	r24, 0x01	; 1
    5760:	91 05       	cpc	r25, r1
    5762:	11 f6       	brne	.-124    	; 0x56e8 <handle_obst_backward+0x4ea>
			}
			//_delay_ms(5000);
			currentcountx=currentcountx-1;
			lcd_print(2,1,currentcountx,2);
		}
		back_reroute=1;
    5764:	81 e0       	ldi	r24, 0x01	; 1
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	90 93 67 03 	sts	0x0367, r25
    576c:	80 93 66 03 	sts	0x0366, r24
		if((Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE))
    5770:	80 91 46 03 	lds	r24, 0x0346
    5774:	80 34       	cpi	r24, 0x40	; 64
    5776:	68 f0       	brcs	.+26     	; 0x5792 <handle_obst_backward+0x594>
    5778:	80 91 45 03 	lds	r24, 0x0345
    577c:	80 34       	cpi	r24, 0x40	; 64
    577e:	48 f0       	brcs	.+18     	; 0x5792 <handle_obst_backward+0x594>
    5780:	80 91 47 03 	lds	r24, 0x0347
    5784:	80 34       	cpi	r24, 0x40	; 64
    5786:	28 f0       	brcs	.+10     	; 0x5792 <handle_obst_backward+0x594>
		{
			right_degrees(90);
    5788:	8a e5       	ldi	r24, 0x5A	; 90
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
    5790:	3a c4       	rjmp	.+2164   	; 0x6006 <handle_obst_backward+0xe08>
		}
		else buzzer_on();
    5792:	0e 94 ce 0a 	call	0x159c	; 0x159c <buzzer_on>
    5796:	37 c4       	rjmp	.+2158   	; 0x6006 <handle_obst_backward+0xe08>
		
	//}
	
}
else if((y_reached == 0) && currentcounty<2 && currentcounty==1 && back_reroute == 1)
    5798:	80 91 7c 03 	lds	r24, 0x037C
    579c:	90 91 7d 03 	lds	r25, 0x037D
    57a0:	00 97       	sbiw	r24, 0x00	; 0
    57a2:	09 f0       	breq	.+2      	; 0x57a6 <handle_obst_backward+0x5a8>
    57a4:	49 c2       	rjmp	.+1170   	; 0x5c38 <handle_obst_backward+0xa3a>
    57a6:	80 91 76 03 	lds	r24, 0x0376
    57aa:	90 91 77 03 	lds	r25, 0x0377
    57ae:	82 30       	cpi	r24, 0x02	; 2
    57b0:	91 05       	cpc	r25, r1
    57b2:	0c f0       	brlt	.+2      	; 0x57b6 <handle_obst_backward+0x5b8>
    57b4:	41 c2       	rjmp	.+1154   	; 0x5c38 <handle_obst_backward+0xa3a>
    57b6:	80 91 76 03 	lds	r24, 0x0376
    57ba:	90 91 77 03 	lds	r25, 0x0377
    57be:	81 30       	cpi	r24, 0x01	; 1
    57c0:	91 05       	cpc	r25, r1
    57c2:	09 f0       	breq	.+2      	; 0x57c6 <handle_obst_backward+0x5c8>
    57c4:	39 c2       	rjmp	.+1138   	; 0x5c38 <handle_obst_backward+0xa3a>
    57c6:	80 91 66 03 	lds	r24, 0x0366
    57ca:	90 91 67 03 	lds	r25, 0x0367
    57ce:	81 30       	cpi	r24, 0x01	; 1
    57d0:	91 05       	cpc	r25, r1
    57d2:	09 f0       	breq	.+2      	; 0x57d6 <handle_obst_backward+0x5d8>
    57d4:	31 c2       	rjmp	.+1122   	; 0x5c38 <handle_obst_backward+0xa3a>
{
	lcd_print(2,3,9,1);
    57d6:	82 e0       	ldi	r24, 0x02	; 2
    57d8:	63 e0       	ldi	r22, 0x03	; 3
    57da:	49 e0       	ldi	r20, 0x09	; 9
    57dc:	50 e0       	ldi	r21, 0x00	; 0
    57de:	21 e0       	ldi	r18, 0x01	; 1
    57e0:	30 e0       	ldi	r19, 0x00	; 0
    57e2:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    57e6:	fe 01       	movw	r30, r28
    57e8:	ef 5a       	subi	r30, 0xAF	; 175
    57ea:	ff 4f       	sbci	r31, 0xFF	; 255
    57ec:	80 e0       	ldi	r24, 0x00	; 0
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	aa ef       	ldi	r26, 0xFA	; 250
    57f2:	b4 e4       	ldi	r27, 0x44	; 68
    57f4:	80 83       	st	Z, r24
    57f6:	91 83       	std	Z+1, r25	; 0x01
    57f8:	a2 83       	std	Z+2, r26	; 0x02
    57fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57fc:	8e 01       	movw	r16, r28
    57fe:	03 5b       	subi	r16, 0xB3	; 179
    5800:	1f 4f       	sbci	r17, 0xFF	; 255
    5802:	fe 01       	movw	r30, r28
    5804:	ef 5a       	subi	r30, 0xAF	; 175
    5806:	ff 4f       	sbci	r31, 0xFF	; 255
    5808:	60 81       	ld	r22, Z
    580a:	71 81       	ldd	r23, Z+1	; 0x01
    580c:	82 81       	ldd	r24, Z+2	; 0x02
    580e:	93 81       	ldd	r25, Z+3	; 0x03
    5810:	26 e6       	ldi	r18, 0x66	; 102
    5812:	36 e6       	ldi	r19, 0x66	; 102
    5814:	46 e6       	ldi	r20, 0x66	; 102
    5816:	55 e4       	ldi	r21, 0x45	; 69
    5818:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    581c:	dc 01       	movw	r26, r24
    581e:	cb 01       	movw	r24, r22
    5820:	f8 01       	movw	r30, r16
    5822:	80 83       	st	Z, r24
    5824:	91 83       	std	Z+1, r25	; 0x01
    5826:	a2 83       	std	Z+2, r26	; 0x02
    5828:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    582a:	fe 01       	movw	r30, r28
    582c:	e3 5b       	subi	r30, 0xB3	; 179
    582e:	ff 4f       	sbci	r31, 0xFF	; 255
    5830:	60 81       	ld	r22, Z
    5832:	71 81       	ldd	r23, Z+1	; 0x01
    5834:	82 81       	ldd	r24, Z+2	; 0x02
    5836:	93 81       	ldd	r25, Z+3	; 0x03
    5838:	20 e0       	ldi	r18, 0x00	; 0
    583a:	30 e0       	ldi	r19, 0x00	; 0
    583c:	40 e8       	ldi	r20, 0x80	; 128
    583e:	5f e3       	ldi	r21, 0x3F	; 63
    5840:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    5844:	88 23       	and	r24, r24
    5846:	44 f4       	brge	.+16     	; 0x5858 <handle_obst_backward+0x65a>
		__ticks = 1;
    5848:	fe 01       	movw	r30, r28
    584a:	e5 5b       	subi	r30, 0xB5	; 181
    584c:	ff 4f       	sbci	r31, 0xFF	; 255
    584e:	81 e0       	ldi	r24, 0x01	; 1
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	91 83       	std	Z+1, r25	; 0x01
    5854:	80 83       	st	Z, r24
    5856:	64 c0       	rjmp	.+200    	; 0x5920 <handle_obst_backward+0x722>
	else if (__tmp > 65535)
    5858:	fe 01       	movw	r30, r28
    585a:	e3 5b       	subi	r30, 0xB3	; 179
    585c:	ff 4f       	sbci	r31, 0xFF	; 255
    585e:	60 81       	ld	r22, Z
    5860:	71 81       	ldd	r23, Z+1	; 0x01
    5862:	82 81       	ldd	r24, Z+2	; 0x02
    5864:	93 81       	ldd	r25, Z+3	; 0x03
    5866:	20 e0       	ldi	r18, 0x00	; 0
    5868:	3f ef       	ldi	r19, 0xFF	; 255
    586a:	4f e7       	ldi	r20, 0x7F	; 127
    586c:	57 e4       	ldi	r21, 0x47	; 71
    586e:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    5872:	18 16       	cp	r1, r24
    5874:	0c f0       	brlt	.+2      	; 0x5878 <handle_obst_backward+0x67a>
    5876:	43 c0       	rjmp	.+134    	; 0x58fe <handle_obst_backward+0x700>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5878:	fe 01       	movw	r30, r28
    587a:	ef 5a       	subi	r30, 0xAF	; 175
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
    587e:	60 81       	ld	r22, Z
    5880:	71 81       	ldd	r23, Z+1	; 0x01
    5882:	82 81       	ldd	r24, Z+2	; 0x02
    5884:	93 81       	ldd	r25, Z+3	; 0x03
    5886:	20 e0       	ldi	r18, 0x00	; 0
    5888:	30 e0       	ldi	r19, 0x00	; 0
    588a:	40 e2       	ldi	r20, 0x20	; 32
    588c:	51 e4       	ldi	r21, 0x41	; 65
    588e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5892:	dc 01       	movw	r26, r24
    5894:	cb 01       	movw	r24, r22
    5896:	8e 01       	movw	r16, r28
    5898:	05 5b       	subi	r16, 0xB5	; 181
    589a:	1f 4f       	sbci	r17, 0xFF	; 255
    589c:	bc 01       	movw	r22, r24
    589e:	cd 01       	movw	r24, r26
    58a0:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    58a4:	dc 01       	movw	r26, r24
    58a6:	cb 01       	movw	r24, r22
    58a8:	f8 01       	movw	r30, r16
    58aa:	91 83       	std	Z+1, r25	; 0x01
    58ac:	80 83       	st	Z, r24
    58ae:	1f c0       	rjmp	.+62     	; 0x58ee <handle_obst_backward+0x6f0>
    58b0:	fe 01       	movw	r30, r28
    58b2:	e7 5b       	subi	r30, 0xB7	; 183
    58b4:	ff 4f       	sbci	r31, 0xFF	; 255
    58b6:	80 e7       	ldi	r24, 0x70	; 112
    58b8:	91 e0       	ldi	r25, 0x01	; 1
    58ba:	91 83       	std	Z+1, r25	; 0x01
    58bc:	80 83       	st	Z, r24
    58be:	fe 01       	movw	r30, r28
    58c0:	e7 5b       	subi	r30, 0xB7	; 183
    58c2:	ff 4f       	sbci	r31, 0xFF	; 255
    58c4:	80 81       	ld	r24, Z
    58c6:	91 81       	ldd	r25, Z+1	; 0x01
    58c8:	01 97       	sbiw	r24, 0x01	; 1
    58ca:	f1 f7       	brne	.-4      	; 0x58c8 <handle_obst_backward+0x6ca>
    58cc:	fe 01       	movw	r30, r28
    58ce:	e7 5b       	subi	r30, 0xB7	; 183
    58d0:	ff 4f       	sbci	r31, 0xFF	; 255
    58d2:	91 83       	std	Z+1, r25	; 0x01
    58d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d6:	de 01       	movw	r26, r28
    58d8:	a5 5b       	subi	r26, 0xB5	; 181
    58da:	bf 4f       	sbci	r27, 0xFF	; 255
    58dc:	fe 01       	movw	r30, r28
    58de:	e5 5b       	subi	r30, 0xB5	; 181
    58e0:	ff 4f       	sbci	r31, 0xFF	; 255
    58e2:	80 81       	ld	r24, Z
    58e4:	91 81       	ldd	r25, Z+1	; 0x01
    58e6:	01 97       	sbiw	r24, 0x01	; 1
    58e8:	11 96       	adiw	r26, 0x01	; 1
    58ea:	9c 93       	st	X, r25
    58ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58ee:	fe 01       	movw	r30, r28
    58f0:	e5 5b       	subi	r30, 0xB5	; 181
    58f2:	ff 4f       	sbci	r31, 0xFF	; 255
    58f4:	80 81       	ld	r24, Z
    58f6:	91 81       	ldd	r25, Z+1	; 0x01
    58f8:	00 97       	sbiw	r24, 0x00	; 0
    58fa:	d1 f6       	brne	.-76     	; 0x58b0 <handle_obst_backward+0x6b2>
    58fc:	27 c0       	rjmp	.+78     	; 0x594c <handle_obst_backward+0x74e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58fe:	8e 01       	movw	r16, r28
    5900:	05 5b       	subi	r16, 0xB5	; 181
    5902:	1f 4f       	sbci	r17, 0xFF	; 255
    5904:	fe 01       	movw	r30, r28
    5906:	e3 5b       	subi	r30, 0xB3	; 179
    5908:	ff 4f       	sbci	r31, 0xFF	; 255
    590a:	60 81       	ld	r22, Z
    590c:	71 81       	ldd	r23, Z+1	; 0x01
    590e:	82 81       	ldd	r24, Z+2	; 0x02
    5910:	93 81       	ldd	r25, Z+3	; 0x03
    5912:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5916:	dc 01       	movw	r26, r24
    5918:	cb 01       	movw	r24, r22
    591a:	f8 01       	movw	r30, r16
    591c:	91 83       	std	Z+1, r25	; 0x01
    591e:	80 83       	st	Z, r24
    5920:	de 01       	movw	r26, r28
    5922:	a9 5b       	subi	r26, 0xB9	; 185
    5924:	bf 4f       	sbci	r27, 0xFF	; 255
    5926:	fe 01       	movw	r30, r28
    5928:	e5 5b       	subi	r30, 0xB5	; 181
    592a:	ff 4f       	sbci	r31, 0xFF	; 255
    592c:	80 81       	ld	r24, Z
    592e:	91 81       	ldd	r25, Z+1	; 0x01
    5930:	8d 93       	st	X+, r24
    5932:	9c 93       	st	X, r25
    5934:	fe 01       	movw	r30, r28
    5936:	e9 5b       	subi	r30, 0xB9	; 185
    5938:	ff 4f       	sbci	r31, 0xFF	; 255
    593a:	80 81       	ld	r24, Z
    593c:	91 81       	ldd	r25, Z+1	; 0x01
    593e:	01 97       	sbiw	r24, 0x01	; 1
    5940:	f1 f7       	brne	.-4      	; 0x593e <handle_obst_backward+0x740>
    5942:	fe 01       	movw	r30, r28
    5944:	e9 5b       	subi	r30, 0xB9	; 185
    5946:	ff 4f       	sbci	r31, 0xFF	; 255
    5948:	91 83       	std	Z+1, r25	; 0x01
    594a:	80 83       	st	Z, r24
		_delay_ms(2000);
		sample_sensor();
    594c:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
		if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
    5950:	80 91 5a 03 	lds	r24, 0x035A
    5954:	28 2f       	mov	r18, r24
    5956:	30 e0       	ldi	r19, 0x00	; 0
    5958:	80 91 08 02 	lds	r24, 0x0208
    595c:	90 91 09 02 	lds	r25, 0x0209
    5960:	82 17       	cp	r24, r18
    5962:	93 07       	cpc	r25, r19
    5964:	10 f1       	brcs	.+68     	; 0x59aa <handle_obst_backward+0x7ac>
    5966:	80 91 5b 03 	lds	r24, 0x035B
    596a:	28 2f       	mov	r18, r24
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	80 91 86 03 	lds	r24, 0x0386
    5972:	90 91 87 03 	lds	r25, 0x0387
    5976:	28 17       	cp	r18, r24
    5978:	39 07       	cpc	r19, r25
    597a:	b8 f0       	brcs	.+46     	; 0x59aa <handle_obst_backward+0x7ac>
    597c:	80 91 60 03 	lds	r24, 0x0360
    5980:	28 2f       	mov	r18, r24
    5982:	30 e0       	ldi	r19, 0x00	; 0
    5984:	80 91 86 03 	lds	r24, 0x0386
    5988:	90 91 87 03 	lds	r25, 0x0387
    598c:	28 17       	cp	r18, r24
    598e:	39 07       	cpc	r19, r25
    5990:	60 f0       	brcs	.+24     	; 0x59aa <handle_obst_backward+0x7ac>
    5992:	80 91 61 03 	lds	r24, 0x0361
    5996:	28 2f       	mov	r18, r24
    5998:	30 e0       	ldi	r19, 0x00	; 0
    599a:	80 91 86 03 	lds	r24, 0x0386
    599e:	90 91 87 03 	lds	r25, 0x0387
    59a2:	28 17       	cp	r18, r24
    59a4:	39 07       	cpc	r19, r25
    59a6:	08 f0       	brcs	.+2      	; 0x59aa <handle_obst_backward+0x7ac>
    59a8:	2e c3       	rjmp	.+1628   	; 0x6006 <handle_obst_backward+0xe08>
		{
			return;
		}
		back_mm(60);
    59aa:	8c e3       	ldi	r24, 0x3C	; 60
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	0e 94 ad 10 	call	0x215a	; 0x215a <back_mm>
		stop();
    59b2:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
		_delay_ms(delayvalueback);
    59b6:	80 91 32 02 	lds	r24, 0x0232
    59ba:	90 91 33 02 	lds	r25, 0x0233
    59be:	cc 01       	movw	r24, r24
    59c0:	a0 e0       	ldi	r26, 0x00	; 0
    59c2:	b0 e0       	ldi	r27, 0x00	; 0
    59c4:	bc 01       	movw	r22, r24
    59c6:	cd 01       	movw	r24, r26
    59c8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    59cc:	dc 01       	movw	r26, r24
    59ce:	cb 01       	movw	r24, r22
    59d0:	fe 01       	movw	r30, r28
    59d2:	ed 5b       	subi	r30, 0xBD	; 189
    59d4:	ff 4f       	sbci	r31, 0xFF	; 255
    59d6:	80 83       	st	Z, r24
    59d8:	91 83       	std	Z+1, r25	; 0x01
    59da:	a2 83       	std	Z+2, r26	; 0x02
    59dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59de:	8e 01       	movw	r16, r28
    59e0:	01 5c       	subi	r16, 0xC1	; 193
    59e2:	1f 4f       	sbci	r17, 0xFF	; 255
    59e4:	fe 01       	movw	r30, r28
    59e6:	ed 5b       	subi	r30, 0xBD	; 189
    59e8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ea:	60 81       	ld	r22, Z
    59ec:	71 81       	ldd	r23, Z+1	; 0x01
    59ee:	82 81       	ldd	r24, Z+2	; 0x02
    59f0:	93 81       	ldd	r25, Z+3	; 0x03
    59f2:	26 e6       	ldi	r18, 0x66	; 102
    59f4:	36 e6       	ldi	r19, 0x66	; 102
    59f6:	46 e6       	ldi	r20, 0x66	; 102
    59f8:	55 e4       	ldi	r21, 0x45	; 69
    59fa:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    59fe:	dc 01       	movw	r26, r24
    5a00:	cb 01       	movw	r24, r22
    5a02:	f8 01       	movw	r30, r16
    5a04:	80 83       	st	Z, r24
    5a06:	91 83       	std	Z+1, r25	; 0x01
    5a08:	a2 83       	std	Z+2, r26	; 0x02
    5a0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a0c:	fe 01       	movw	r30, r28
    5a0e:	ff 96       	adiw	r30, 0x3f	; 63
    5a10:	60 81       	ld	r22, Z
    5a12:	71 81       	ldd	r23, Z+1	; 0x01
    5a14:	82 81       	ldd	r24, Z+2	; 0x02
    5a16:	93 81       	ldd	r25, Z+3	; 0x03
    5a18:	20 e0       	ldi	r18, 0x00	; 0
    5a1a:	30 e0       	ldi	r19, 0x00	; 0
    5a1c:	40 e8       	ldi	r20, 0x80	; 128
    5a1e:	5f e3       	ldi	r21, 0x3F	; 63
    5a20:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    5a24:	88 23       	and	r24, r24
    5a26:	2c f4       	brge	.+10     	; 0x5a32 <handle_obst_backward+0x834>
		__ticks = 1;
    5a28:	81 e0       	ldi	r24, 0x01	; 1
    5a2a:	90 e0       	ldi	r25, 0x00	; 0
    5a2c:	9e af       	std	Y+62, r25	; 0x3e
    5a2e:	8d af       	std	Y+61, r24	; 0x3d
    5a30:	46 c0       	rjmp	.+140    	; 0x5abe <handle_obst_backward+0x8c0>
	else if (__tmp > 65535)
    5a32:	fe 01       	movw	r30, r28
    5a34:	ff 96       	adiw	r30, 0x3f	; 63
    5a36:	60 81       	ld	r22, Z
    5a38:	71 81       	ldd	r23, Z+1	; 0x01
    5a3a:	82 81       	ldd	r24, Z+2	; 0x02
    5a3c:	93 81       	ldd	r25, Z+3	; 0x03
    5a3e:	20 e0       	ldi	r18, 0x00	; 0
    5a40:	3f ef       	ldi	r19, 0xFF	; 255
    5a42:	4f e7       	ldi	r20, 0x7F	; 127
    5a44:	57 e4       	ldi	r21, 0x47	; 71
    5a46:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    5a4a:	18 16       	cp	r1, r24
    5a4c:	64 f5       	brge	.+88     	; 0x5aa6 <handle_obst_backward+0x8a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a4e:	fe 01       	movw	r30, r28
    5a50:	ed 5b       	subi	r30, 0xBD	; 189
    5a52:	ff 4f       	sbci	r31, 0xFF	; 255
    5a54:	60 81       	ld	r22, Z
    5a56:	71 81       	ldd	r23, Z+1	; 0x01
    5a58:	82 81       	ldd	r24, Z+2	; 0x02
    5a5a:	93 81       	ldd	r25, Z+3	; 0x03
    5a5c:	20 e0       	ldi	r18, 0x00	; 0
    5a5e:	30 e0       	ldi	r19, 0x00	; 0
    5a60:	40 e2       	ldi	r20, 0x20	; 32
    5a62:	51 e4       	ldi	r21, 0x41	; 65
    5a64:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5a68:	dc 01       	movw	r26, r24
    5a6a:	cb 01       	movw	r24, r22
    5a6c:	bc 01       	movw	r22, r24
    5a6e:	cd 01       	movw	r24, r26
    5a70:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5a74:	dc 01       	movw	r26, r24
    5a76:	cb 01       	movw	r24, r22
    5a78:	9e af       	std	Y+62, r25	; 0x3e
    5a7a:	8d af       	std	Y+61, r24	; 0x3d
    5a7c:	0f c0       	rjmp	.+30     	; 0x5a9c <handle_obst_backward+0x89e>
    5a7e:	80 e7       	ldi	r24, 0x70	; 112
    5a80:	91 e0       	ldi	r25, 0x01	; 1
    5a82:	9c af       	std	Y+60, r25	; 0x3c
    5a84:	8b af       	std	Y+59, r24	; 0x3b
    5a86:	8b ad       	ldd	r24, Y+59	; 0x3b
    5a88:	9c ad       	ldd	r25, Y+60	; 0x3c
    5a8a:	01 97       	sbiw	r24, 0x01	; 1
    5a8c:	f1 f7       	brne	.-4      	; 0x5a8a <handle_obst_backward+0x88c>
    5a8e:	9c af       	std	Y+60, r25	; 0x3c
    5a90:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a92:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a94:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a96:	01 97       	sbiw	r24, 0x01	; 1
    5a98:	9e af       	std	Y+62, r25	; 0x3e
    5a9a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5aa0:	00 97       	sbiw	r24, 0x00	; 0
    5aa2:	69 f7       	brne	.-38     	; 0x5a7e <handle_obst_backward+0x880>
    5aa4:	16 c0       	rjmp	.+44     	; 0x5ad2 <handle_obst_backward+0x8d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5aa6:	fe 01       	movw	r30, r28
    5aa8:	ff 96       	adiw	r30, 0x3f	; 63
    5aaa:	60 81       	ld	r22, Z
    5aac:	71 81       	ldd	r23, Z+1	; 0x01
    5aae:	82 81       	ldd	r24, Z+2	; 0x02
    5ab0:	93 81       	ldd	r25, Z+3	; 0x03
    5ab2:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5ab6:	dc 01       	movw	r26, r24
    5ab8:	cb 01       	movw	r24, r22
    5aba:	9e af       	std	Y+62, r25	; 0x3e
    5abc:	8d af       	std	Y+61, r24	; 0x3d
    5abe:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ac0:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ac2:	9a af       	std	Y+58, r25	; 0x3a
    5ac4:	89 af       	std	Y+57, r24	; 0x39
    5ac6:	89 ad       	ldd	r24, Y+57	; 0x39
    5ac8:	9a ad       	ldd	r25, Y+58	; 0x3a
    5aca:	01 97       	sbiw	r24, 0x01	; 1
    5acc:	f1 f7       	brne	.-4      	; 0x5aca <handle_obst_backward+0x8cc>
    5ace:	9a af       	std	Y+58, r25	; 0x3a
    5ad0:	89 af       	std	Y+57, r24	; 0x39
		sample_sensor();
    5ad2:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
    5ad6:	7f c0       	rjmp	.+254    	; 0x5bd6 <handle_obst_backward+0x9d8>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			
			stop();
    5ad8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			_delay_ms(delayvalueback);
    5adc:	80 91 32 02 	lds	r24, 0x0232
    5ae0:	90 91 33 02 	lds	r25, 0x0233
    5ae4:	cc 01       	movw	r24, r24
    5ae6:	a0 e0       	ldi	r26, 0x00	; 0
    5ae8:	b0 e0       	ldi	r27, 0x00	; 0
    5aea:	bc 01       	movw	r22, r24
    5aec:	cd 01       	movw	r24, r26
    5aee:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    5af2:	dc 01       	movw	r26, r24
    5af4:	cb 01       	movw	r24, r22
    5af6:	8d ab       	std	Y+53, r24	; 0x35
    5af8:	9e ab       	std	Y+54, r25	; 0x36
    5afa:	af ab       	std	Y+55, r26	; 0x37
    5afc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5afe:	6d a9       	ldd	r22, Y+53	; 0x35
    5b00:	7e a9       	ldd	r23, Y+54	; 0x36
    5b02:	8f a9       	ldd	r24, Y+55	; 0x37
    5b04:	98 ad       	ldd	r25, Y+56	; 0x38
    5b06:	26 e6       	ldi	r18, 0x66	; 102
    5b08:	36 e6       	ldi	r19, 0x66	; 102
    5b0a:	46 e6       	ldi	r20, 0x66	; 102
    5b0c:	55 e4       	ldi	r21, 0x45	; 69
    5b0e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5b12:	dc 01       	movw	r26, r24
    5b14:	cb 01       	movw	r24, r22
    5b16:	89 ab       	std	Y+49, r24	; 0x31
    5b18:	9a ab       	std	Y+50, r25	; 0x32
    5b1a:	ab ab       	std	Y+51, r26	; 0x33
    5b1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    5b20:	7a a9       	ldd	r23, Y+50	; 0x32
    5b22:	8b a9       	ldd	r24, Y+51	; 0x33
    5b24:	9c a9       	ldd	r25, Y+52	; 0x34
    5b26:	20 e0       	ldi	r18, 0x00	; 0
    5b28:	30 e0       	ldi	r19, 0x00	; 0
    5b2a:	40 e8       	ldi	r20, 0x80	; 128
    5b2c:	5f e3       	ldi	r21, 0x3F	; 63
    5b2e:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    5b32:	88 23       	and	r24, r24
    5b34:	2c f4       	brge	.+10     	; 0x5b40 <handle_obst_backward+0x942>
		__ticks = 1;
    5b36:	81 e0       	ldi	r24, 0x01	; 1
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	98 ab       	std	Y+48, r25	; 0x30
    5b3c:	8f a7       	std	Y+47, r24	; 0x2f
    5b3e:	3f c0       	rjmp	.+126    	; 0x5bbe <handle_obst_backward+0x9c0>
	else if (__tmp > 65535)
    5b40:	69 a9       	ldd	r22, Y+49	; 0x31
    5b42:	7a a9       	ldd	r23, Y+50	; 0x32
    5b44:	8b a9       	ldd	r24, Y+51	; 0x33
    5b46:	9c a9       	ldd	r25, Y+52	; 0x34
    5b48:	20 e0       	ldi	r18, 0x00	; 0
    5b4a:	3f ef       	ldi	r19, 0xFF	; 255
    5b4c:	4f e7       	ldi	r20, 0x7F	; 127
    5b4e:	57 e4       	ldi	r21, 0x47	; 71
    5b50:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    5b54:	18 16       	cp	r1, r24
    5b56:	4c f5       	brge	.+82     	; 0x5baa <handle_obst_backward+0x9ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b58:	6d a9       	ldd	r22, Y+53	; 0x35
    5b5a:	7e a9       	ldd	r23, Y+54	; 0x36
    5b5c:	8f a9       	ldd	r24, Y+55	; 0x37
    5b5e:	98 ad       	ldd	r25, Y+56	; 0x38
    5b60:	20 e0       	ldi	r18, 0x00	; 0
    5b62:	30 e0       	ldi	r19, 0x00	; 0
    5b64:	40 e2       	ldi	r20, 0x20	; 32
    5b66:	51 e4       	ldi	r21, 0x41	; 65
    5b68:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5b6c:	dc 01       	movw	r26, r24
    5b6e:	cb 01       	movw	r24, r22
    5b70:	bc 01       	movw	r22, r24
    5b72:	cd 01       	movw	r24, r26
    5b74:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5b78:	dc 01       	movw	r26, r24
    5b7a:	cb 01       	movw	r24, r22
    5b7c:	98 ab       	std	Y+48, r25	; 0x30
    5b7e:	8f a7       	std	Y+47, r24	; 0x2f
    5b80:	0f c0       	rjmp	.+30     	; 0x5ba0 <handle_obst_backward+0x9a2>
    5b82:	80 e7       	ldi	r24, 0x70	; 112
    5b84:	91 e0       	ldi	r25, 0x01	; 1
    5b86:	9e a7       	std	Y+46, r25	; 0x2e
    5b88:	8d a7       	std	Y+45, r24	; 0x2d
    5b8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    5b8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    5b8e:	01 97       	sbiw	r24, 0x01	; 1
    5b90:	f1 f7       	brne	.-4      	; 0x5b8e <handle_obst_backward+0x990>
    5b92:	9e a7       	std	Y+46, r25	; 0x2e
    5b94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b96:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b98:	98 a9       	ldd	r25, Y+48	; 0x30
    5b9a:	01 97       	sbiw	r24, 0x01	; 1
    5b9c:	98 ab       	std	Y+48, r25	; 0x30
    5b9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ba0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ba2:	98 a9       	ldd	r25, Y+48	; 0x30
    5ba4:	00 97       	sbiw	r24, 0x00	; 0
    5ba6:	69 f7       	brne	.-38     	; 0x5b82 <handle_obst_backward+0x984>
    5ba8:	14 c0       	rjmp	.+40     	; 0x5bd2 <handle_obst_backward+0x9d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5baa:	69 a9       	ldd	r22, Y+49	; 0x31
    5bac:	7a a9       	ldd	r23, Y+50	; 0x32
    5bae:	8b a9       	ldd	r24, Y+51	; 0x33
    5bb0:	9c a9       	ldd	r25, Y+52	; 0x34
    5bb2:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5bb6:	dc 01       	movw	r26, r24
    5bb8:	cb 01       	movw	r24, r22
    5bba:	98 ab       	std	Y+48, r25	; 0x30
    5bbc:	8f a7       	std	Y+47, r24	; 0x2f
    5bbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bc0:	98 a9       	ldd	r25, Y+48	; 0x30
    5bc2:	9c a7       	std	Y+44, r25	; 0x2c
    5bc4:	8b a7       	std	Y+43, r24	; 0x2b
    5bc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    5bc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    5bca:	01 97       	sbiw	r24, 0x01	; 1
    5bcc:	f1 f7       	brne	.-4      	; 0x5bca <handle_obst_backward+0x9cc>
    5bce:	9c a7       	std	Y+44, r25	; 0x2c
    5bd0:	8b a7       	std	Y+43, r24	; 0x2b
			sample_sensor();
    5bd2:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
		}
		back_mm(60);
		stop();
		_delay_ms(delayvalueback);
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    5bd6:	80 91 5a 03 	lds	r24, 0x035A
    5bda:	28 2f       	mov	r18, r24
    5bdc:	30 e0       	ldi	r19, 0x00	; 0
    5bde:	80 91 08 02 	lds	r24, 0x0208
    5be2:	90 91 09 02 	lds	r25, 0x0209
    5be6:	82 17       	cp	r24, r18
    5be8:	93 07       	cpc	r25, r19
    5bea:	08 f4       	brcc	.+2      	; 0x5bee <handle_obst_backward+0x9f0>
    5bec:	75 cf       	rjmp	.-278    	; 0x5ad8 <handle_obst_backward+0x8da>
    5bee:	80 91 5b 03 	lds	r24, 0x035B
    5bf2:	28 2f       	mov	r18, r24
    5bf4:	30 e0       	ldi	r19, 0x00	; 0
    5bf6:	80 91 86 03 	lds	r24, 0x0386
    5bfa:	90 91 87 03 	lds	r25, 0x0387
    5bfe:	28 17       	cp	r18, r24
    5c00:	39 07       	cpc	r19, r25
    5c02:	08 f4       	brcc	.+2      	; 0x5c06 <handle_obst_backward+0xa08>
    5c04:	69 cf       	rjmp	.-302    	; 0x5ad8 <handle_obst_backward+0x8da>
    5c06:	80 91 60 03 	lds	r24, 0x0360
    5c0a:	28 2f       	mov	r18, r24
    5c0c:	30 e0       	ldi	r19, 0x00	; 0
    5c0e:	80 91 86 03 	lds	r24, 0x0386
    5c12:	90 91 87 03 	lds	r25, 0x0387
    5c16:	28 17       	cp	r18, r24
    5c18:	39 07       	cpc	r19, r25
    5c1a:	08 f4       	brcc	.+2      	; 0x5c1e <handle_obst_backward+0xa20>
    5c1c:	5d cf       	rjmp	.-326    	; 0x5ad8 <handle_obst_backward+0x8da>
    5c1e:	80 91 61 03 	lds	r24, 0x0361
    5c22:	28 2f       	mov	r18, r24
    5c24:	30 e0       	ldi	r19, 0x00	; 0
    5c26:	80 91 86 03 	lds	r24, 0x0386
    5c2a:	90 91 87 03 	lds	r25, 0x0387
    5c2e:	28 17       	cp	r18, r24
    5c30:	39 07       	cpc	r19, r25
    5c32:	08 f4       	brcc	.+2      	; 0x5c36 <handle_obst_backward+0xa38>
    5c34:	51 cf       	rjmp	.-350    	; 0x5ad8 <handle_obst_backward+0x8da>
    5c36:	e7 c1       	rjmp	.+974    	; 0x6006 <handle_obst_backward+0xe08>
			stop();
			_delay_ms(delayvalueback);
			sample_sensor();
		}
}
else if(currentcountx>2 && currentcounty>=2)
    5c38:	80 91 74 03 	lds	r24, 0x0374
    5c3c:	90 91 75 03 	lds	r25, 0x0375
    5c40:	83 30       	cpi	r24, 0x03	; 3
    5c42:	91 05       	cpc	r25, r1
    5c44:	0c f4       	brge	.+2      	; 0x5c48 <handle_obst_backward+0xa4a>
    5c46:	dd c1       	rjmp	.+954    	; 0x6002 <handle_obst_backward+0xe04>
    5c48:	80 91 76 03 	lds	r24, 0x0376
    5c4c:	90 91 77 03 	lds	r25, 0x0377
    5c50:	82 30       	cpi	r24, 0x02	; 2
    5c52:	91 05       	cpc	r25, r1
    5c54:	0c f4       	brge	.+2      	; 0x5c58 <handle_obst_backward+0xa5a>
    5c56:	d5 c1       	rjmp	.+938    	; 0x6002 <handle_obst_backward+0xe04>
    5c58:	80 e0       	ldi	r24, 0x00	; 0
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	aa ef       	ldi	r26, 0xFA	; 250
    5c5e:	b4 e4       	ldi	r27, 0x44	; 68
    5c60:	8f a3       	std	Y+39, r24	; 0x27
    5c62:	98 a7       	std	Y+40, r25	; 0x28
    5c64:	a9 a7       	std	Y+41, r26	; 0x29
    5c66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c68:	6f a1       	ldd	r22, Y+39	; 0x27
    5c6a:	78 a5       	ldd	r23, Y+40	; 0x28
    5c6c:	89 a5       	ldd	r24, Y+41	; 0x29
    5c6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c70:	26 e6       	ldi	r18, 0x66	; 102
    5c72:	36 e6       	ldi	r19, 0x66	; 102
    5c74:	46 e6       	ldi	r20, 0x66	; 102
    5c76:	55 e4       	ldi	r21, 0x45	; 69
    5c78:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5c7c:	dc 01       	movw	r26, r24
    5c7e:	cb 01       	movw	r24, r22
    5c80:	8b a3       	std	Y+35, r24	; 0x23
    5c82:	9c a3       	std	Y+36, r25	; 0x24
    5c84:	ad a3       	std	Y+37, r26	; 0x25
    5c86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5c88:	6b a1       	ldd	r22, Y+35	; 0x23
    5c8a:	7c a1       	ldd	r23, Y+36	; 0x24
    5c8c:	8d a1       	ldd	r24, Y+37	; 0x25
    5c8e:	9e a1       	ldd	r25, Y+38	; 0x26
    5c90:	20 e0       	ldi	r18, 0x00	; 0
    5c92:	30 e0       	ldi	r19, 0x00	; 0
    5c94:	40 e8       	ldi	r20, 0x80	; 128
    5c96:	5f e3       	ldi	r21, 0x3F	; 63
    5c98:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    5c9c:	88 23       	and	r24, r24
    5c9e:	2c f4       	brge	.+10     	; 0x5caa <handle_obst_backward+0xaac>
		__ticks = 1;
    5ca0:	81 e0       	ldi	r24, 0x01	; 1
    5ca2:	90 e0       	ldi	r25, 0x00	; 0
    5ca4:	9a a3       	std	Y+34, r25	; 0x22
    5ca6:	89 a3       	std	Y+33, r24	; 0x21
    5ca8:	3f c0       	rjmp	.+126    	; 0x5d28 <handle_obst_backward+0xb2a>
	else if (__tmp > 65535)
    5caa:	6b a1       	ldd	r22, Y+35	; 0x23
    5cac:	7c a1       	ldd	r23, Y+36	; 0x24
    5cae:	8d a1       	ldd	r24, Y+37	; 0x25
    5cb0:	9e a1       	ldd	r25, Y+38	; 0x26
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	3f ef       	ldi	r19, 0xFF	; 255
    5cb6:	4f e7       	ldi	r20, 0x7F	; 127
    5cb8:	57 e4       	ldi	r21, 0x47	; 71
    5cba:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    5cbe:	18 16       	cp	r1, r24
    5cc0:	4c f5       	brge	.+82     	; 0x5d14 <handle_obst_backward+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cc2:	6f a1       	ldd	r22, Y+39	; 0x27
    5cc4:	78 a5       	ldd	r23, Y+40	; 0x28
    5cc6:	89 a5       	ldd	r24, Y+41	; 0x29
    5cc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    5cca:	20 e0       	ldi	r18, 0x00	; 0
    5ccc:	30 e0       	ldi	r19, 0x00	; 0
    5cce:	40 e2       	ldi	r20, 0x20	; 32
    5cd0:	51 e4       	ldi	r21, 0x41	; 65
    5cd2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5cd6:	dc 01       	movw	r26, r24
    5cd8:	cb 01       	movw	r24, r22
    5cda:	bc 01       	movw	r22, r24
    5cdc:	cd 01       	movw	r24, r26
    5cde:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5ce2:	dc 01       	movw	r26, r24
    5ce4:	cb 01       	movw	r24, r22
    5ce6:	9a a3       	std	Y+34, r25	; 0x22
    5ce8:	89 a3       	std	Y+33, r24	; 0x21
    5cea:	0f c0       	rjmp	.+30     	; 0x5d0a <handle_obst_backward+0xb0c>
    5cec:	80 e7       	ldi	r24, 0x70	; 112
    5cee:	91 e0       	ldi	r25, 0x01	; 1
    5cf0:	98 a3       	std	Y+32, r25	; 0x20
    5cf2:	8f 8f       	std	Y+31, r24	; 0x1f
    5cf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5cf6:	98 a1       	ldd	r25, Y+32	; 0x20
    5cf8:	01 97       	sbiw	r24, 0x01	; 1
    5cfa:	f1 f7       	brne	.-4      	; 0x5cf8 <handle_obst_backward+0xafa>
    5cfc:	98 a3       	std	Y+32, r25	; 0x20
    5cfe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d00:	89 a1       	ldd	r24, Y+33	; 0x21
    5d02:	9a a1       	ldd	r25, Y+34	; 0x22
    5d04:	01 97       	sbiw	r24, 0x01	; 1
    5d06:	9a a3       	std	Y+34, r25	; 0x22
    5d08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    5d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    5d0e:	00 97       	sbiw	r24, 0x00	; 0
    5d10:	69 f7       	brne	.-38     	; 0x5cec <handle_obst_backward+0xaee>
    5d12:	14 c0       	rjmp	.+40     	; 0x5d3c <handle_obst_backward+0xb3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d14:	6b a1       	ldd	r22, Y+35	; 0x23
    5d16:	7c a1       	ldd	r23, Y+36	; 0x24
    5d18:	8d a1       	ldd	r24, Y+37	; 0x25
    5d1a:	9e a1       	ldd	r25, Y+38	; 0x26
    5d1c:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5d20:	dc 01       	movw	r26, r24
    5d22:	cb 01       	movw	r24, r22
    5d24:	9a a3       	std	Y+34, r25	; 0x22
    5d26:	89 a3       	std	Y+33, r24	; 0x21
    5d28:	89 a1       	ldd	r24, Y+33	; 0x21
    5d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    5d2c:	9e 8f       	std	Y+30, r25	; 0x1e
    5d2e:	8d 8f       	std	Y+29, r24	; 0x1d
    5d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d34:	01 97       	sbiw	r24, 0x01	; 1
    5d36:	f1 f7       	brne	.-4      	; 0x5d34 <handle_obst_backward+0xb36>
    5d38:	9e 8f       	std	Y+30, r25	; 0x1e
    5d3a:	8d 8f       	std	Y+29, r24	; 0x1d
{
	_delay_ms(2000);
		sample_sensor();
    5d3c:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
		if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
    5d40:	80 91 5a 03 	lds	r24, 0x035A
    5d44:	28 2f       	mov	r18, r24
    5d46:	30 e0       	ldi	r19, 0x00	; 0
    5d48:	80 91 08 02 	lds	r24, 0x0208
    5d4c:	90 91 09 02 	lds	r25, 0x0209
    5d50:	82 17       	cp	r24, r18
    5d52:	93 07       	cpc	r25, r19
    5d54:	10 f1       	brcs	.+68     	; 0x5d9a <handle_obst_backward+0xb9c>
    5d56:	80 91 5b 03 	lds	r24, 0x035B
    5d5a:	28 2f       	mov	r18, r24
    5d5c:	30 e0       	ldi	r19, 0x00	; 0
    5d5e:	80 91 86 03 	lds	r24, 0x0386
    5d62:	90 91 87 03 	lds	r25, 0x0387
    5d66:	28 17       	cp	r18, r24
    5d68:	39 07       	cpc	r19, r25
    5d6a:	b8 f0       	brcs	.+46     	; 0x5d9a <handle_obst_backward+0xb9c>
    5d6c:	80 91 60 03 	lds	r24, 0x0360
    5d70:	28 2f       	mov	r18, r24
    5d72:	30 e0       	ldi	r19, 0x00	; 0
    5d74:	80 91 86 03 	lds	r24, 0x0386
    5d78:	90 91 87 03 	lds	r25, 0x0387
    5d7c:	28 17       	cp	r18, r24
    5d7e:	39 07       	cpc	r19, r25
    5d80:	60 f0       	brcs	.+24     	; 0x5d9a <handle_obst_backward+0xb9c>
    5d82:	80 91 61 03 	lds	r24, 0x0361
    5d86:	28 2f       	mov	r18, r24
    5d88:	30 e0       	ldi	r19, 0x00	; 0
    5d8a:	80 91 86 03 	lds	r24, 0x0386
    5d8e:	90 91 87 03 	lds	r25, 0x0387
    5d92:	28 17       	cp	r18, r24
    5d94:	39 07       	cpc	r19, r25
    5d96:	08 f0       	brcs	.+2      	; 0x5d9a <handle_obst_backward+0xb9c>
    5d98:	36 c1       	rjmp	.+620    	; 0x6006 <handle_obst_backward+0xe08>
		{
			return;
		}
		back_mm(60);
    5d9a:	8c e3       	ldi	r24, 0x3C	; 60
    5d9c:	90 e0       	ldi	r25, 0x00	; 0
    5d9e:	0e 94 ad 10 	call	0x215a	; 0x215a <back_mm>
		stop();
    5da2:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
		_delay_ms(delayvalueback);
    5da6:	80 91 32 02 	lds	r24, 0x0232
    5daa:	90 91 33 02 	lds	r25, 0x0233
    5dae:	cc 01       	movw	r24, r24
    5db0:	a0 e0       	ldi	r26, 0x00	; 0
    5db2:	b0 e0       	ldi	r27, 0x00	; 0
    5db4:	bc 01       	movw	r22, r24
    5db6:	cd 01       	movw	r24, r26
    5db8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    5dbc:	dc 01       	movw	r26, r24
    5dbe:	cb 01       	movw	r24, r22
    5dc0:	89 8f       	std	Y+25, r24	; 0x19
    5dc2:	9a 8f       	std	Y+26, r25	; 0x1a
    5dc4:	ab 8f       	std	Y+27, r26	; 0x1b
    5dc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dc8:	69 8d       	ldd	r22, Y+25	; 0x19
    5dca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5dcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5dce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5dd0:	26 e6       	ldi	r18, 0x66	; 102
    5dd2:	36 e6       	ldi	r19, 0x66	; 102
    5dd4:	46 e6       	ldi	r20, 0x66	; 102
    5dd6:	55 e4       	ldi	r21, 0x45	; 69
    5dd8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5ddc:	dc 01       	movw	r26, r24
    5dde:	cb 01       	movw	r24, r22
    5de0:	8d 8b       	std	Y+21, r24	; 0x15
    5de2:	9e 8b       	std	Y+22, r25	; 0x16
    5de4:	af 8b       	std	Y+23, r26	; 0x17
    5de6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5de8:	6d 89       	ldd	r22, Y+21	; 0x15
    5dea:	7e 89       	ldd	r23, Y+22	; 0x16
    5dec:	8f 89       	ldd	r24, Y+23	; 0x17
    5dee:	98 8d       	ldd	r25, Y+24	; 0x18
    5df0:	20 e0       	ldi	r18, 0x00	; 0
    5df2:	30 e0       	ldi	r19, 0x00	; 0
    5df4:	40 e8       	ldi	r20, 0x80	; 128
    5df6:	5f e3       	ldi	r21, 0x3F	; 63
    5df8:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    5dfc:	88 23       	and	r24, r24
    5dfe:	2c f4       	brge	.+10     	; 0x5e0a <handle_obst_backward+0xc0c>
		__ticks = 1;
    5e00:	81 e0       	ldi	r24, 0x01	; 1
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	9c 8b       	std	Y+20, r25	; 0x14
    5e06:	8b 8b       	std	Y+19, r24	; 0x13
    5e08:	3f c0       	rjmp	.+126    	; 0x5e88 <handle_obst_backward+0xc8a>
	else if (__tmp > 65535)
    5e0a:	6d 89       	ldd	r22, Y+21	; 0x15
    5e0c:	7e 89       	ldd	r23, Y+22	; 0x16
    5e0e:	8f 89       	ldd	r24, Y+23	; 0x17
    5e10:	98 8d       	ldd	r25, Y+24	; 0x18
    5e12:	20 e0       	ldi	r18, 0x00	; 0
    5e14:	3f ef       	ldi	r19, 0xFF	; 255
    5e16:	4f e7       	ldi	r20, 0x7F	; 127
    5e18:	57 e4       	ldi	r21, 0x47	; 71
    5e1a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    5e1e:	18 16       	cp	r1, r24
    5e20:	4c f5       	brge	.+82     	; 0x5e74 <handle_obst_backward+0xc76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e22:	69 8d       	ldd	r22, Y+25	; 0x19
    5e24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5e26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e2a:	20 e0       	ldi	r18, 0x00	; 0
    5e2c:	30 e0       	ldi	r19, 0x00	; 0
    5e2e:	40 e2       	ldi	r20, 0x20	; 32
    5e30:	51 e4       	ldi	r21, 0x41	; 65
    5e32:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5e36:	dc 01       	movw	r26, r24
    5e38:	cb 01       	movw	r24, r22
    5e3a:	bc 01       	movw	r22, r24
    5e3c:	cd 01       	movw	r24, r26
    5e3e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5e42:	dc 01       	movw	r26, r24
    5e44:	cb 01       	movw	r24, r22
    5e46:	9c 8b       	std	Y+20, r25	; 0x14
    5e48:	8b 8b       	std	Y+19, r24	; 0x13
    5e4a:	0f c0       	rjmp	.+30     	; 0x5e6a <handle_obst_backward+0xc6c>
    5e4c:	80 e7       	ldi	r24, 0x70	; 112
    5e4e:	91 e0       	ldi	r25, 0x01	; 1
    5e50:	9a 8b       	std	Y+18, r25	; 0x12
    5e52:	89 8b       	std	Y+17, r24	; 0x11
    5e54:	89 89       	ldd	r24, Y+17	; 0x11
    5e56:	9a 89       	ldd	r25, Y+18	; 0x12
    5e58:	01 97       	sbiw	r24, 0x01	; 1
    5e5a:	f1 f7       	brne	.-4      	; 0x5e58 <handle_obst_backward+0xc5a>
    5e5c:	9a 8b       	std	Y+18, r25	; 0x12
    5e5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e60:	8b 89       	ldd	r24, Y+19	; 0x13
    5e62:	9c 89       	ldd	r25, Y+20	; 0x14
    5e64:	01 97       	sbiw	r24, 0x01	; 1
    5e66:	9c 8b       	std	Y+20, r25	; 0x14
    5e68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    5e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    5e6e:	00 97       	sbiw	r24, 0x00	; 0
    5e70:	69 f7       	brne	.-38     	; 0x5e4c <handle_obst_backward+0xc4e>
    5e72:	14 c0       	rjmp	.+40     	; 0x5e9c <handle_obst_backward+0xc9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e74:	6d 89       	ldd	r22, Y+21	; 0x15
    5e76:	7e 89       	ldd	r23, Y+22	; 0x16
    5e78:	8f 89       	ldd	r24, Y+23	; 0x17
    5e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    5e7c:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5e80:	dc 01       	movw	r26, r24
    5e82:	cb 01       	movw	r24, r22
    5e84:	9c 8b       	std	Y+20, r25	; 0x14
    5e86:	8b 8b       	std	Y+19, r24	; 0x13
    5e88:	8b 89       	ldd	r24, Y+19	; 0x13
    5e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    5e8c:	98 8b       	std	Y+16, r25	; 0x10
    5e8e:	8f 87       	std	Y+15, r24	; 0x0f
    5e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e92:	98 89       	ldd	r25, Y+16	; 0x10
    5e94:	01 97       	sbiw	r24, 0x01	; 1
    5e96:	f1 f7       	brne	.-4      	; 0x5e94 <handle_obst_backward+0xc96>
    5e98:	98 8b       	std	Y+16, r25	; 0x10
    5e9a:	8f 87       	std	Y+15, r24	; 0x0f
		sample_sensor();
    5e9c:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
    5ea0:	7f c0       	rjmp	.+254    	; 0x5fa0 <handle_obst_backward+0xda2>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			
			stop();
    5ea2:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			_delay_ms(delayvalueback);
    5ea6:	80 91 32 02 	lds	r24, 0x0232
    5eaa:	90 91 33 02 	lds	r25, 0x0233
    5eae:	cc 01       	movw	r24, r24
    5eb0:	a0 e0       	ldi	r26, 0x00	; 0
    5eb2:	b0 e0       	ldi	r27, 0x00	; 0
    5eb4:	bc 01       	movw	r22, r24
    5eb6:	cd 01       	movw	r24, r26
    5eb8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <__floatunsisf>
    5ebc:	dc 01       	movw	r26, r24
    5ebe:	cb 01       	movw	r24, r22
    5ec0:	8b 87       	std	Y+11, r24	; 0x0b
    5ec2:	9c 87       	std	Y+12, r25	; 0x0c
    5ec4:	ad 87       	std	Y+13, r26	; 0x0d
    5ec6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ed0:	26 e6       	ldi	r18, 0x66	; 102
    5ed2:	36 e6       	ldi	r19, 0x66	; 102
    5ed4:	46 e6       	ldi	r20, 0x66	; 102
    5ed6:	55 e4       	ldi	r21, 0x45	; 69
    5ed8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5edc:	dc 01       	movw	r26, r24
    5ede:	cb 01       	movw	r24, r22
    5ee0:	8f 83       	std	Y+7, r24	; 0x07
    5ee2:	98 87       	std	Y+8, r25	; 0x08
    5ee4:	a9 87       	std	Y+9, r26	; 0x09
    5ee6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    5eea:	78 85       	ldd	r23, Y+8	; 0x08
    5eec:	89 85       	ldd	r24, Y+9	; 0x09
    5eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ef0:	20 e0       	ldi	r18, 0x00	; 0
    5ef2:	30 e0       	ldi	r19, 0x00	; 0
    5ef4:	40 e8       	ldi	r20, 0x80	; 128
    5ef6:	5f e3       	ldi	r21, 0x3F	; 63
    5ef8:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__ltsf2>
    5efc:	88 23       	and	r24, r24
    5efe:	2c f4       	brge	.+10     	; 0x5f0a <handle_obst_backward+0xd0c>
		__ticks = 1;
    5f00:	81 e0       	ldi	r24, 0x01	; 1
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	9e 83       	std	Y+6, r25	; 0x06
    5f06:	8d 83       	std	Y+5, r24	; 0x05
    5f08:	3f c0       	rjmp	.+126    	; 0x5f88 <handle_obst_backward+0xd8a>
	else if (__tmp > 65535)
    5f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    5f0c:	78 85       	ldd	r23, Y+8	; 0x08
    5f0e:	89 85       	ldd	r24, Y+9	; 0x09
    5f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f12:	20 e0       	ldi	r18, 0x00	; 0
    5f14:	3f ef       	ldi	r19, 0xFF	; 255
    5f16:	4f e7       	ldi	r20, 0x7F	; 127
    5f18:	57 e4       	ldi	r21, 0x47	; 71
    5f1a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__gtsf2>
    5f1e:	18 16       	cp	r1, r24
    5f20:	4c f5       	brge	.+82     	; 0x5f74 <handle_obst_backward+0xd76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f2a:	20 e0       	ldi	r18, 0x00	; 0
    5f2c:	30 e0       	ldi	r19, 0x00	; 0
    5f2e:	40 e2       	ldi	r20, 0x20	; 32
    5f30:	51 e4       	ldi	r21, 0x41	; 65
    5f32:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5f36:	dc 01       	movw	r26, r24
    5f38:	cb 01       	movw	r24, r22
    5f3a:	bc 01       	movw	r22, r24
    5f3c:	cd 01       	movw	r24, r26
    5f3e:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5f42:	dc 01       	movw	r26, r24
    5f44:	cb 01       	movw	r24, r22
    5f46:	9e 83       	std	Y+6, r25	; 0x06
    5f48:	8d 83       	std	Y+5, r24	; 0x05
    5f4a:	0f c0       	rjmp	.+30     	; 0x5f6a <handle_obst_backward+0xd6c>
    5f4c:	80 e7       	ldi	r24, 0x70	; 112
    5f4e:	91 e0       	ldi	r25, 0x01	; 1
    5f50:	9c 83       	std	Y+4, r25	; 0x04
    5f52:	8b 83       	std	Y+3, r24	; 0x03
    5f54:	8b 81       	ldd	r24, Y+3	; 0x03
    5f56:	9c 81       	ldd	r25, Y+4	; 0x04
    5f58:	01 97       	sbiw	r24, 0x01	; 1
    5f5a:	f1 f7       	brne	.-4      	; 0x5f58 <handle_obst_backward+0xd5a>
    5f5c:	9c 83       	std	Y+4, r25	; 0x04
    5f5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f60:	8d 81       	ldd	r24, Y+5	; 0x05
    5f62:	9e 81       	ldd	r25, Y+6	; 0x06
    5f64:	01 97       	sbiw	r24, 0x01	; 1
    5f66:	9e 83       	std	Y+6, r25	; 0x06
    5f68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    5f6e:	00 97       	sbiw	r24, 0x00	; 0
    5f70:	69 f7       	brne	.-38     	; 0x5f4c <handle_obst_backward+0xd4e>
    5f72:	14 c0       	rjmp	.+40     	; 0x5f9c <handle_obst_backward+0xd9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f74:	6f 81       	ldd	r22, Y+7	; 0x07
    5f76:	78 85       	ldd	r23, Y+8	; 0x08
    5f78:	89 85       	ldd	r24, Y+9	; 0x09
    5f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f7c:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixunssfsi>
    5f80:	dc 01       	movw	r26, r24
    5f82:	cb 01       	movw	r24, r22
    5f84:	9e 83       	std	Y+6, r25	; 0x06
    5f86:	8d 83       	std	Y+5, r24	; 0x05
    5f88:	8d 81       	ldd	r24, Y+5	; 0x05
    5f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    5f8c:	9a 83       	std	Y+2, r25	; 0x02
    5f8e:	89 83       	std	Y+1, r24	; 0x01
    5f90:	89 81       	ldd	r24, Y+1	; 0x01
    5f92:	9a 81       	ldd	r25, Y+2	; 0x02
    5f94:	01 97       	sbiw	r24, 0x01	; 1
    5f96:	f1 f7       	brne	.-4      	; 0x5f94 <handle_obst_backward+0xd96>
    5f98:	9a 83       	std	Y+2, r25	; 0x02
    5f9a:	89 83       	std	Y+1, r24	; 0x01
			sample_sensor();
    5f9c:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
		}
		back_mm(60);
		stop();
		_delay_ms(delayvalueback);
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    5fa0:	80 91 5a 03 	lds	r24, 0x035A
    5fa4:	28 2f       	mov	r18, r24
    5fa6:	30 e0       	ldi	r19, 0x00	; 0
    5fa8:	80 91 08 02 	lds	r24, 0x0208
    5fac:	90 91 09 02 	lds	r25, 0x0209
    5fb0:	82 17       	cp	r24, r18
    5fb2:	93 07       	cpc	r25, r19
    5fb4:	08 f4       	brcc	.+2      	; 0x5fb8 <handle_obst_backward+0xdba>
    5fb6:	75 cf       	rjmp	.-278    	; 0x5ea2 <handle_obst_backward+0xca4>
    5fb8:	80 91 5b 03 	lds	r24, 0x035B
    5fbc:	28 2f       	mov	r18, r24
    5fbe:	30 e0       	ldi	r19, 0x00	; 0
    5fc0:	80 91 86 03 	lds	r24, 0x0386
    5fc4:	90 91 87 03 	lds	r25, 0x0387
    5fc8:	28 17       	cp	r18, r24
    5fca:	39 07       	cpc	r19, r25
    5fcc:	08 f4       	brcc	.+2      	; 0x5fd0 <handle_obst_backward+0xdd2>
    5fce:	69 cf       	rjmp	.-302    	; 0x5ea2 <handle_obst_backward+0xca4>
    5fd0:	80 91 60 03 	lds	r24, 0x0360
    5fd4:	28 2f       	mov	r18, r24
    5fd6:	30 e0       	ldi	r19, 0x00	; 0
    5fd8:	80 91 86 03 	lds	r24, 0x0386
    5fdc:	90 91 87 03 	lds	r25, 0x0387
    5fe0:	28 17       	cp	r18, r24
    5fe2:	39 07       	cpc	r19, r25
    5fe4:	08 f4       	brcc	.+2      	; 0x5fe8 <handle_obst_backward+0xdea>
    5fe6:	5d cf       	rjmp	.-326    	; 0x5ea2 <handle_obst_backward+0xca4>
    5fe8:	80 91 61 03 	lds	r24, 0x0361
    5fec:	28 2f       	mov	r18, r24
    5fee:	30 e0       	ldi	r19, 0x00	; 0
    5ff0:	80 91 86 03 	lds	r24, 0x0386
    5ff4:	90 91 87 03 	lds	r25, 0x0387
    5ff8:	28 17       	cp	r18, r24
    5ffa:	39 07       	cpc	r19, r25
    5ffc:	08 f4       	brcc	.+2      	; 0x6000 <handle_obst_backward+0xe02>
    5ffe:	51 cf       	rjmp	.-350    	; 0x5ea2 <handle_obst_backward+0xca4>
    6000:	02 c0       	rjmp	.+4      	; 0x6006 <handle_obst_backward+0xe08>
		}
}
else 
{	
	
		checkobst_backpath();
    6002:	0e 94 35 12 	call	0x246a	; 0x246a <checkobst_backpath>
}
}
    6006:	c0 59       	subi	r28, 0x90	; 144
    6008:	df 4f       	sbci	r29, 0xFF	; 255
    600a:	0f b6       	in	r0, 0x3f	; 63
    600c:	f8 94       	cli
    600e:	de bf       	out	0x3e, r29	; 62
    6010:	0f be       	out	0x3f, r0	; 63
    6012:	cd bf       	out	0x3d, r28	; 61
    6014:	cf 91       	pop	r28
    6016:	df 91       	pop	r29
    6018:	1f 91       	pop	r17
    601a:	0f 91       	pop	r16
    601c:	08 95       	ret

0000601e <grid_forward>:


void grid_forward()
{
    601e:	df 93       	push	r29
    6020:	cf 93       	push	r28
    6022:	cd b7       	in	r28, 0x3d	; 61
    6024:	de b7       	in	r29, 0x3e	; 62
	Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    6026:	83 e0       	ldi	r24, 0x03	; 3
    6028:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    602c:	80 93 45 03 	sts	0x0345, r24
	Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    6030:	82 e0       	ldi	r24, 0x02	; 2
    6032:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    6036:	80 93 46 03 	sts	0x0346, r24
	Right_white_line = ADC_Conversion(1); 
    603a:	81 e0       	ldi	r24, 0x01	; 1
    603c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    6040:	80 93 47 03 	sts	0x0347, r24
	lcd_print(2,3,8,1);
    6044:	82 e0       	ldi	r24, 0x02	; 2
    6046:	63 e0       	ldi	r22, 0x03	; 3
    6048:	48 e0       	ldi	r20, 0x08	; 8
    604a:	50 e0       	ldi	r21, 0x00	; 0
    604c:	21 e0       	ldi	r18, 0x01	; 1
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    6054:	9b c0       	rjmp	.+310    	; 0x618c <grid_forward+0x16e>
	while(!(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE) )
	{
		//forward_mm(5);
		
			checkobst_backpath();
    6056:	0e 94 35 12 	call	0x246a	; 0x246a <checkobst_backpath>
		
		if(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE)
    605a:	80 91 46 03 	lds	r24, 0x0346
    605e:	80 34       	cpi	r24, 0x40	; 64
    6060:	60 f0       	brcs	.+24     	; 0x607a <grid_forward+0x5c>
    6062:	80 91 45 03 	lds	r24, 0x0345
    6066:	80 34       	cpi	r24, 0x40	; 64
    6068:	40 f0       	brcs	.+16     	; 0x607a <grid_forward+0x5c>
    606a:	80 91 47 03 	lds	r24, 0x0347
    606e:	80 34       	cpi	r24, 0x40	; 64
    6070:	20 f4       	brcc	.+8      	; 0x607a <grid_forward+0x5c>
		{
			left_degrees(1);
    6072:	81 e0       	ldi	r24, 0x01	; 1
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE)
    607a:	80 91 46 03 	lds	r24, 0x0346
    607e:	80 34       	cpi	r24, 0x40	; 64
    6080:	60 f0       	brcs	.+24     	; 0x609a <grid_forward+0x7c>
    6082:	80 91 45 03 	lds	r24, 0x0345
    6086:	80 34       	cpi	r24, 0x40	; 64
    6088:	40 f4       	brcc	.+16     	; 0x609a <grid_forward+0x7c>
    608a:	80 91 47 03 	lds	r24, 0x0347
    608e:	80 34       	cpi	r24, 0x40	; 64
    6090:	20 f0       	brcs	.+8      	; 0x609a <grid_forward+0x7c>
		{
			right_degrees(1);
    6092:	81 e0       	ldi	r24, 0x01	; 1
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE)
    609a:	80 91 46 03 	lds	r24, 0x0346
    609e:	80 34       	cpi	r24, 0x40	; 64
    60a0:	60 f0       	brcs	.+24     	; 0x60ba <grid_forward+0x9c>
    60a2:	80 91 45 03 	lds	r24, 0x0345
    60a6:	80 34       	cpi	r24, 0x40	; 64
    60a8:	40 f4       	brcc	.+16     	; 0x60ba <grid_forward+0x9c>
    60aa:	80 91 47 03 	lds	r24, 0x0347
    60ae:	80 34       	cpi	r24, 0x40	; 64
    60b0:	20 f4       	brcc	.+8      	; 0x60ba <grid_forward+0x9c>
		{
			forward_mm(5);
    60b2:	85 e0       	ldi	r24, 0x05	; 5
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE)
    60ba:	80 91 46 03 	lds	r24, 0x0346
    60be:	80 34       	cpi	r24, 0x40	; 64
    60c0:	60 f4       	brcc	.+24     	; 0x60da <grid_forward+0xbc>
    60c2:	80 91 45 03 	lds	r24, 0x0345
    60c6:	80 34       	cpi	r24, 0x40	; 64
    60c8:	40 f4       	brcc	.+16     	; 0x60da <grid_forward+0xbc>
    60ca:	80 91 47 03 	lds	r24, 0x0347
    60ce:	80 34       	cpi	r24, 0x40	; 64
    60d0:	20 f0       	brcs	.+8      	; 0x60da <grid_forward+0xbc>
		{
			right_degrees(2);
    60d2:	82 e0       	ldi	r24, 0x02	; 2
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE)
    60da:	80 91 46 03 	lds	r24, 0x0346
    60de:	80 34       	cpi	r24, 0x40	; 64
    60e0:	60 f4       	brcc	.+24     	; 0x60fa <grid_forward+0xdc>
    60e2:	80 91 45 03 	lds	r24, 0x0345
    60e6:	80 34       	cpi	r24, 0x40	; 64
    60e8:	40 f0       	brcs	.+16     	; 0x60fa <grid_forward+0xdc>
    60ea:	80 91 47 03 	lds	r24, 0x0347
    60ee:	80 34       	cpi	r24, 0x40	; 64
    60f0:	20 f4       	brcc	.+8      	; 0x60fa <grid_forward+0xdc>
		{
			left_degrees(2);
    60f2:	82 e0       	ldi	r24, 0x02	; 2
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE)
    60fa:	80 91 46 03 	lds	r24, 0x0346
    60fe:	80 34       	cpi	r24, 0x40	; 64
    6100:	50 f4       	brcc	.+20     	; 0x6116 <grid_forward+0xf8>
    6102:	80 91 45 03 	lds	r24, 0x0345
    6106:	80 34       	cpi	r24, 0x40	; 64
    6108:	30 f4       	brcc	.+12     	; 0x6116 <grid_forward+0xf8>
    610a:	80 91 47 03 	lds	r24, 0x0347
    610e:	80 34       	cpi	r24, 0x40	; 64
    6110:	10 f4       	brcc	.+4      	; 0x6116 <grid_forward+0xf8>
		{
			//stop();
			adjust_path();
    6112:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <adjust_path>

		}
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    6116:	83 e0       	ldi	r24, 0x03	; 3
    6118:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    611c:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    6120:	82 e0       	ldi	r24, 0x02	; 2
    6122:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    6126:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1); 
    612a:	81 e0       	ldi	r24, 0x01	; 1
    612c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    6130:	80 93 47 03 	sts	0x0347, r24
		sample_sensor();
    6134:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
		if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 )
    6138:	80 91 5a 03 	lds	r24, 0x035A
    613c:	28 2f       	mov	r18, r24
    613e:	30 e0       	ldi	r19, 0x00	; 0
    6140:	80 91 08 02 	lds	r24, 0x0208
    6144:	90 91 09 02 	lds	r25, 0x0209
    6148:	82 17       	cp	r24, r18
    614a:	93 07       	cpc	r25, r19
    614c:	d0 f0       	brcs	.+52     	; 0x6182 <grid_forward+0x164>
    614e:	80 91 5b 03 	lds	r24, 0x035B
    6152:	28 2f       	mov	r18, r24
    6154:	30 e0       	ldi	r19, 0x00	; 0
    6156:	80 91 86 03 	lds	r24, 0x0386
    615a:	90 91 87 03 	lds	r25, 0x0387
    615e:	28 17       	cp	r18, r24
    6160:	39 07       	cpc	r19, r25
    6162:	78 f0       	brcs	.+30     	; 0x6182 <grid_forward+0x164>
    6164:	80 91 60 03 	lds	r24, 0x0360
    6168:	28 2f       	mov	r18, r24
    616a:	30 e0       	ldi	r19, 0x00	; 0
    616c:	80 91 86 03 	lds	r24, 0x0386
    6170:	90 91 87 03 	lds	r25, 0x0387
    6174:	28 17       	cp	r18, r24
    6176:	39 07       	cpc	r19, r25
    6178:	20 f0       	brcs	.+8      	; 0x6182 <grid_forward+0x164>
    617a:	80 91 61 03 	lds	r24, 0x0361
    617e:	88 23       	and	r24, r24
    6180:	29 f0       	breq	.+10     	; 0x618c <grid_forward+0x16e>
		{
			obstflag=1;
    6182:	81 e0       	ldi	r24, 0x01	; 1
    6184:	80 93 5c 03 	sts	0x035C, r24
			stop();	
    6188:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
{
	Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
	Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
	Right_white_line = ADC_Conversion(1); 
	lcd_print(2,3,8,1);
	while(!(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE) )
    618c:	80 91 46 03 	lds	r24, 0x0346
    6190:	80 34       	cpi	r24, 0x40	; 64
    6192:	08 f4       	brcc	.+2      	; 0x6196 <grid_forward+0x178>
    6194:	60 cf       	rjmp	.-320    	; 0x6056 <grid_forward+0x38>
    6196:	80 91 45 03 	lds	r24, 0x0345
    619a:	80 34       	cpi	r24, 0x40	; 64
    619c:	08 f4       	brcc	.+2      	; 0x61a0 <grid_forward+0x182>
    619e:	5b cf       	rjmp	.-330    	; 0x6056 <grid_forward+0x38>
    61a0:	80 91 47 03 	lds	r24, 0x0347
    61a4:	80 34       	cpi	r24, 0x40	; 64
    61a6:	08 f4       	brcc	.+2      	; 0x61aa <grid_forward+0x18c>
    61a8:	56 cf       	rjmp	.-340    	; 0x6056 <grid_forward+0x38>
		{
			obstflag=1;
			stop();	
		}
	}
	forward_mm(90);
    61aa:	8a e5       	ldi	r24, 0x5A	; 90
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
	return;
}
    61b2:	cf 91       	pop	r28
    61b4:	df 91       	pop	r29
    61b6:	08 95       	ret

000061b8 <adjust_path>:

void adjust_path()
{
    61b8:	df 93       	push	r29
    61ba:	cf 93       	push	r28
    61bc:	0f 92       	push	r0
    61be:	0f 92       	push	r0
    61c0:	cd b7       	in	r28, 0x3d	; 61
    61c2:	de b7       	in	r29, 0x3e	; 62
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    61c4:	83 e0       	ldi	r24, 0x03	; 3
    61c6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    61ca:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    61ce:	82 e0       	ldi	r24, 0x02	; 2
    61d0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    61d4:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);	
    61d8:	81 e0       	ldi	r24, 0x01	; 1
    61da:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    61de:	80 93 47 03 	sts	0x0347, r24
		lcd_print(2,3,7,1);
    61e2:	82 e0       	ldi	r24, 0x02	; 2
    61e4:	63 e0       	ldi	r22, 0x03	; 3
    61e6:	47 e0       	ldi	r20, 0x07	; 7
    61e8:	50 e0       	ldi	r21, 0x00	; 0
    61ea:	21 e0       	ldi	r18, 0x01	; 1
    61ec:	30 e0       	ldi	r19, 0x00	; 0
    61ee:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		int backcount=0;
    61f2:	1a 82       	std	Y+2, r1	; 0x02
    61f4:	19 82       	std	Y+1, r1	; 0x01
    61f6:	9a c0       	rjmp	.+308    	; 0x632c <adjust_path+0x174>
	while(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE)
	{	
		lcd_print(2,3,5,1);
    61f8:	82 e0       	ldi	r24, 0x02	; 2
    61fa:	63 e0       	ldi	r22, 0x03	; 3
    61fc:	45 e0       	ldi	r20, 0x05	; 5
    61fe:	50 e0       	ldi	r21, 0x00	; 0
    6200:	21 e0       	ldi	r18, 0x01	; 1
    6202:	30 e0       	ldi	r19, 0x00	; 0
    6204:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
		left_degrees(2);
    6208:	82 e0       	ldi	r24, 0x02	; 2
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    6210:	83 e0       	ldi	r24, 0x03	; 3
    6212:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    6216:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    621a:	82 e0       	ldi	r24, 0x02	; 2
    621c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    6220:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    6224:	81 e0       	ldi	r24, 0x01	; 1
    6226:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    622a:	80 93 47 03 	sts	0x0347, r24
		if(Center_white_line>=BLACK_LINE || Left_white_line>=BLACK_LINE || Right_white_line>=BLACK_LINE)
    622e:	80 91 46 03 	lds	r24, 0x0346
    6232:	80 34       	cpi	r24, 0x40	; 64
    6234:	08 f0       	brcs	.+2      	; 0x6238 <adjust_path+0x80>
    6236:	87 c0       	rjmp	.+270    	; 0x6346 <adjust_path+0x18e>
    6238:	80 91 45 03 	lds	r24, 0x0345
    623c:	80 34       	cpi	r24, 0x40	; 64
    623e:	08 f0       	brcs	.+2      	; 0x6242 <adjust_path+0x8a>
    6240:	82 c0       	rjmp	.+260    	; 0x6346 <adjust_path+0x18e>
    6242:	80 91 47 03 	lds	r24, 0x0347
    6246:	80 34       	cpi	r24, 0x40	; 64
    6248:	08 f0       	brcs	.+2      	; 0x624c <adjust_path+0x94>
    624a:	7d c0       	rjmp	.+250    	; 0x6346 <adjust_path+0x18e>
		{
			break;
		}
		right_degrees(4);
    624c:	84 e0       	ldi	r24, 0x04	; 4
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    6254:	83 e0       	ldi	r24, 0x03	; 3
    6256:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    625a:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    625e:	82 e0       	ldi	r24, 0x02	; 2
    6260:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    6264:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    6268:	81 e0       	ldi	r24, 0x01	; 1
    626a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    626e:	80 93 47 03 	sts	0x0347, r24
		
		if(Center_white_line>=BLACK_LINE || Left_white_line>=BLACK_LINE || Right_white_line>=BLACK_LINE)
    6272:	80 91 46 03 	lds	r24, 0x0346
    6276:	80 34       	cpi	r24, 0x40	; 64
    6278:	08 f0       	brcs	.+2      	; 0x627c <adjust_path+0xc4>
    627a:	65 c0       	rjmp	.+202    	; 0x6346 <adjust_path+0x18e>
    627c:	80 91 45 03 	lds	r24, 0x0345
    6280:	80 34       	cpi	r24, 0x40	; 64
    6282:	08 f0       	brcs	.+2      	; 0x6286 <adjust_path+0xce>
    6284:	60 c0       	rjmp	.+192    	; 0x6346 <adjust_path+0x18e>
    6286:	80 91 47 03 	lds	r24, 0x0347
    628a:	80 34       	cpi	r24, 0x40	; 64
    628c:	08 f0       	brcs	.+2      	; 0x6290 <adjust_path+0xd8>
    628e:	5b c0       	rjmp	.+182    	; 0x6346 <adjust_path+0x18e>
		{
			break;
		}
		
		right_degrees(2);
    6290:	82 e0       	ldi	r24, 0x02	; 2
    6292:	90 e0       	ldi	r25, 0x00	; 0
    6294:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    6298:	83 e0       	ldi	r24, 0x03	; 3
    629a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    629e:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    62a2:	82 e0       	ldi	r24, 0x02	; 2
    62a4:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    62a8:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    62ac:	81 e0       	ldi	r24, 0x01	; 1
    62ae:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    62b2:	80 93 47 03 	sts	0x0347, r24
		if(Center_white_line>=BLACK_LINE || Left_white_line>=BLACK_LINE || Right_white_line>=BLACK_LINE)
    62b6:	80 91 46 03 	lds	r24, 0x0346
    62ba:	80 34       	cpi	r24, 0x40	; 64
    62bc:	08 f0       	brcs	.+2      	; 0x62c0 <adjust_path+0x108>
    62be:	43 c0       	rjmp	.+134    	; 0x6346 <adjust_path+0x18e>
    62c0:	80 91 45 03 	lds	r24, 0x0345
    62c4:	80 34       	cpi	r24, 0x40	; 64
    62c6:	08 f0       	brcs	.+2      	; 0x62ca <adjust_path+0x112>
    62c8:	3e c0       	rjmp	.+124    	; 0x6346 <adjust_path+0x18e>
    62ca:	80 91 47 03 	lds	r24, 0x0347
    62ce:	80 34       	cpi	r24, 0x40	; 64
    62d0:	d0 f5       	brcc	.+116    	; 0x6346 <adjust_path+0x18e>
		{
			break;
		}
		left_degrees(4);
    62d2:	84 e0       	ldi	r24, 0x04	; 4
    62d4:	90 e0       	ldi	r25, 0x00	; 0
    62d6:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    62da:	83 e0       	ldi	r24, 0x03	; 3
    62dc:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    62e0:	80 93 45 03 	sts	0x0345, r24
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    62e4:	82 e0       	ldi	r24, 0x02	; 2
    62e6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    62ea:	80 93 46 03 	sts	0x0346, r24
		Right_white_line = ADC_Conversion(1);
    62ee:	81 e0       	ldi	r24, 0x01	; 1
    62f0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    62f4:	80 93 47 03 	sts	0x0347, r24
		
		if(Center_white_line>=BLACK_LINE || Left_white_line>=BLACK_LINE || Right_white_line>=BLACK_LINE)
    62f8:	80 91 46 03 	lds	r24, 0x0346
    62fc:	80 34       	cpi	r24, 0x40	; 64
    62fe:	18 f5       	brcc	.+70     	; 0x6346 <adjust_path+0x18e>
    6300:	80 91 45 03 	lds	r24, 0x0345
    6304:	80 34       	cpi	r24, 0x40	; 64
    6306:	f8 f4       	brcc	.+62     	; 0x6346 <adjust_path+0x18e>
    6308:	80 91 47 03 	lds	r24, 0x0347
    630c:	80 34       	cpi	r24, 0x40	; 64
    630e:	d8 f4       	brcc	.+54     	; 0x6346 <adjust_path+0x18e>
		{
			break;
		}
		
		
		back_mm(5);
    6310:	85 e0       	ldi	r24, 0x05	; 5
    6312:	90 e0       	ldi	r25, 0x00	; 0
    6314:	0e 94 ad 10 	call	0x215a	; 0x215a <back_mm>
		if(backcount > 20)
    6318:	89 81       	ldd	r24, Y+1	; 0x01
    631a:	9a 81       	ldd	r25, Y+2	; 0x02
    631c:	85 31       	cpi	r24, 0x15	; 21
    631e:	91 05       	cpc	r25, r1
    6320:	94 f4       	brge	.+36     	; 0x6346 <adjust_path+0x18e>
		{
			break;
		}
		backcount++;
    6322:	89 81       	ldd	r24, Y+1	; 0x01
    6324:	9a 81       	ldd	r25, Y+2	; 0x02
    6326:	01 96       	adiw	r24, 0x01	; 1
    6328:	9a 83       	std	Y+2, r25	; 0x02
    632a:	89 83       	std	Y+1, r24	; 0x01
		Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
		Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
		Right_white_line = ADC_Conversion(1);	
		lcd_print(2,3,7,1);
		int backcount=0;
	while(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE)
    632c:	80 91 46 03 	lds	r24, 0x0346
    6330:	80 34       	cpi	r24, 0x40	; 64
    6332:	48 f4       	brcc	.+18     	; 0x6346 <adjust_path+0x18e>
    6334:	80 91 45 03 	lds	r24, 0x0345
    6338:	80 34       	cpi	r24, 0x40	; 64
    633a:	28 f4       	brcc	.+10     	; 0x6346 <adjust_path+0x18e>
    633c:	80 91 47 03 	lds	r24, 0x0347
    6340:	80 34       	cpi	r24, 0x40	; 64
    6342:	08 f4       	brcc	.+2      	; 0x6346 <adjust_path+0x18e>
    6344:	59 cf       	rjmp	.-334    	; 0x61f8 <adjust_path+0x40>
		{
			break;
		}
		backcount++;
		}
	}
    6346:	0f 90       	pop	r0
    6348:	0f 90       	pop	r0
    634a:	cf 91       	pop	r28
    634c:	df 91       	pop	r29
    634e:	08 95       	ret

00006350 <sample_sensor>:
		


void sample_sensor()
{
    6350:	df 93       	push	r29
    6352:	cf 93       	push	r28
    6354:	cd b7       	in	r28, 0x3d	; 61
    6356:	de b7       	in	r29, 0x3e	; 62
	Left_IR_sensor2 = ADC_Conversion(5);
    6358:	85 e0       	ldi	r24, 0x05	; 5
    635a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    635e:	80 93 60 03 	sts	0x0360, r24
	Front_IR_Sensor = ADC_Conversion(6);
    6362:	86 e0       	ldi	r24, 0x06	; 6
    6364:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    6368:	80 93 5b 03 	sts	0x035B, r24
	Right_IR_sensor4 = ADC_Conversion(7);
    636c:	87 e0       	ldi	r24, 0x07	; 7
    636e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    6372:	80 93 61 03 	sts	0x0361, r24
	Front_Sharp_Sensor = ADC_Conversion(11);
    6376:	8b e0       	ldi	r24, 0x0B	; 11
    6378:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    637c:	80 93 5a 03 	sts	0x035A, r24
}
    6380:	cf 91       	pop	r28
    6382:	df 91       	pop	r29
    6384:	08 95       	ret

00006386 <forward_mm_totable>:

void forward_mm_totable(int distance_togo)
{
    6386:	df 93       	push	r29
    6388:	cf 93       	push	r28
    638a:	00 d0       	rcall	.+0      	; 0x638c <forward_mm_totable+0x6>
    638c:	0f 92       	push	r0
    638e:	cd b7       	in	r28, 0x3d	; 61
    6390:	de b7       	in	r29, 0x3e	; 62
    6392:	9c 83       	std	Y+4, r25	; 0x04
    6394:	8b 83       	std	Y+3, r24	; 0x03
	int distance_travelled=0;
    6396:	1a 82       	std	Y+2, r1	; 0x02
    6398:	19 82       	std	Y+1, r1	; 0x01
	Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    639a:	83 e0       	ldi	r24, 0x03	; 3
    639c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    63a0:	80 93 45 03 	sts	0x0345, r24
	Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    63a4:	82 e0       	ldi	r24, 0x02	; 2
    63a6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    63aa:	80 93 46 03 	sts	0x0346, r24
	Right_white_line = ADC_Conversion(1); 
    63ae:	81 e0       	ldi	r24, 0x01	; 1
    63b0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    63b4:	80 93 47 03 	sts	0x0347, r24

while(1)
{
	Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
    63b8:	83 e0       	ldi	r24, 0x03	; 3
    63ba:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    63be:	80 93 45 03 	sts	0x0345, r24
  Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
    63c2:	82 e0       	ldi	r24, 0x02	; 2
    63c4:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    63c8:	80 93 46 03 	sts	0x0346, r24
  Right_white_line = ADC_Conversion(1); 
    63cc:	81 e0       	ldi	r24, 0x01	; 1
    63ce:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    63d2:	80 93 47 03 	sts	0x0347, r24
	sample_sensor();
    63d6:	0e 94 a8 31 	call	0x6350	; 0x6350 <sample_sensor>
	obstflag=0;
    63da:	10 92 5c 03 	sts	0x035C, r1
	if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    63de:	80 91 5a 03 	lds	r24, 0x035A
    63e2:	28 2f       	mov	r18, r24
    63e4:	30 e0       	ldi	r19, 0x00	; 0
    63e6:	80 91 08 02 	lds	r24, 0x0208
    63ea:	90 91 09 02 	lds	r25, 0x0209
    63ee:	82 17       	cp	r24, r18
    63f0:	93 07       	cpc	r25, r19
    63f2:	08 f1       	brcs	.+66     	; 0x6436 <forward_mm_totable+0xb0>
    63f4:	80 91 5b 03 	lds	r24, 0x035B
    63f8:	28 2f       	mov	r18, r24
    63fa:	30 e0       	ldi	r19, 0x00	; 0
    63fc:	80 91 86 03 	lds	r24, 0x0386
    6400:	90 91 87 03 	lds	r25, 0x0387
    6404:	28 17       	cp	r18, r24
    6406:	39 07       	cpc	r19, r25
    6408:	b0 f0       	brcs	.+44     	; 0x6436 <forward_mm_totable+0xb0>
    640a:	80 91 60 03 	lds	r24, 0x0360
    640e:	28 2f       	mov	r18, r24
    6410:	30 e0       	ldi	r19, 0x00	; 0
    6412:	80 91 86 03 	lds	r24, 0x0386
    6416:	90 91 87 03 	lds	r25, 0x0387
    641a:	28 17       	cp	r18, r24
    641c:	39 07       	cpc	r19, r25
    641e:	58 f0       	brcs	.+22     	; 0x6436 <forward_mm_totable+0xb0>
    6420:	80 91 61 03 	lds	r24, 0x0361
    6424:	28 2f       	mov	r18, r24
    6426:	30 e0       	ldi	r19, 0x00	; 0
    6428:	80 91 86 03 	lds	r24, 0x0386
    642c:	90 91 87 03 	lds	r25, 0x0387
    6430:	28 17       	cp	r18, r24
    6432:	39 07       	cpc	r19, r25
    6434:	28 f4       	brcc	.+10     	; 0x6440 <forward_mm_totable+0xba>
		{
			stop();
    6436:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <stop>
			obstflag=1;
    643a:	81 e0       	ldi	r24, 0x01	; 1
    643c:	80 93 5c 03 	sts	0x035C, r24
		}

	if(distance_travelled >= distance_togo)
    6440:	29 81       	ldd	r18, Y+1	; 0x01
    6442:	3a 81       	ldd	r19, Y+2	; 0x02
    6444:	8b 81       	ldd	r24, Y+3	; 0x03
    6446:	9c 81       	ldd	r25, Y+4	; 0x04
    6448:	28 17       	cp	r18, r24
    644a:	39 07       	cpc	r19, r25
    644c:	0c f0       	brlt	.+2      	; 0x6450 <forward_mm_totable+0xca>
    644e:	99 c0       	rjmp	.+306    	; 0x6582 <forward_mm_totable+0x1fc>
		{
		break;
		}

		if(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    6450:	80 91 46 03 	lds	r24, 0x0346
    6454:	80 34       	cpi	r24, 0x40	; 64
    6456:	80 f0       	brcs	.+32     	; 0x6478 <forward_mm_totable+0xf2>
    6458:	80 91 45 03 	lds	r24, 0x0345
    645c:	80 34       	cpi	r24, 0x40	; 64
    645e:	60 f0       	brcs	.+24     	; 0x6478 <forward_mm_totable+0xf2>
    6460:	80 91 47 03 	lds	r24, 0x0347
    6464:	80 34       	cpi	r24, 0x40	; 64
    6466:	40 f4       	brcc	.+16     	; 0x6478 <forward_mm_totable+0xf2>
    6468:	80 91 5c 03 	lds	r24, 0x035C
    646c:	88 23       	and	r24, r24
    646e:	21 f4       	brne	.+8      	; 0x6478 <forward_mm_totable+0xf2>
		{
			left_degrees(1);
    6470:	81 e0       	ldi	r24, 0x01	; 1
    6472:	90 e0       	ldi	r25, 0x00	; 0
    6474:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE && obstflag ==0)
    6478:	80 91 46 03 	lds	r24, 0x0346
    647c:	80 34       	cpi	r24, 0x40	; 64
    647e:	80 f0       	brcs	.+32     	; 0x64a0 <forward_mm_totable+0x11a>
    6480:	80 91 45 03 	lds	r24, 0x0345
    6484:	80 34       	cpi	r24, 0x40	; 64
    6486:	60 f4       	brcc	.+24     	; 0x64a0 <forward_mm_totable+0x11a>
    6488:	80 91 47 03 	lds	r24, 0x0347
    648c:	80 34       	cpi	r24, 0x40	; 64
    648e:	40 f0       	brcs	.+16     	; 0x64a0 <forward_mm_totable+0x11a>
    6490:	80 91 5c 03 	lds	r24, 0x035C
    6494:	88 23       	and	r24, r24
    6496:	21 f4       	brne	.+8      	; 0x64a0 <forward_mm_totable+0x11a>
		{
			right_degrees(1);
    6498:	81 e0       	ldi	r24, 0x01	; 1
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    64a0:	80 91 46 03 	lds	r24, 0x0346
    64a4:	80 34       	cpi	r24, 0x40	; 64
    64a6:	a8 f0       	brcs	.+42     	; 0x64d2 <forward_mm_totable+0x14c>
    64a8:	80 91 45 03 	lds	r24, 0x0345
    64ac:	80 34       	cpi	r24, 0x40	; 64
    64ae:	88 f4       	brcc	.+34     	; 0x64d2 <forward_mm_totable+0x14c>
    64b0:	80 91 47 03 	lds	r24, 0x0347
    64b4:	80 34       	cpi	r24, 0x40	; 64
    64b6:	68 f4       	brcc	.+26     	; 0x64d2 <forward_mm_totable+0x14c>
    64b8:	80 91 5c 03 	lds	r24, 0x035C
    64bc:	88 23       	and	r24, r24
    64be:	49 f4       	brne	.+18     	; 0x64d2 <forward_mm_totable+0x14c>
		{
			forward_mm(5);
    64c0:	85 e0       	ldi	r24, 0x05	; 5
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
			distance_travelled=distance_travelled+5;
    64c8:	89 81       	ldd	r24, Y+1	; 0x01
    64ca:	9a 81       	ldd	r25, Y+2	; 0x02
    64cc:	05 96       	adiw	r24, 0x05	; 5
    64ce:	9a 83       	std	Y+2, r25	; 0x02
    64d0:	89 83       	std	Y+1, r24	; 0x01
			
		}
		if(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE && obstflag ==0)
    64d2:	80 91 46 03 	lds	r24, 0x0346
    64d6:	80 34       	cpi	r24, 0x40	; 64
    64d8:	a8 f0       	brcs	.+42     	; 0x6504 <forward_mm_totable+0x17e>
    64da:	80 91 45 03 	lds	r24, 0x0345
    64de:	80 34       	cpi	r24, 0x40	; 64
    64e0:	88 f0       	brcs	.+34     	; 0x6504 <forward_mm_totable+0x17e>
    64e2:	80 91 47 03 	lds	r24, 0x0347
    64e6:	80 34       	cpi	r24, 0x40	; 64
    64e8:	68 f0       	brcs	.+26     	; 0x6504 <forward_mm_totable+0x17e>
    64ea:	80 91 5c 03 	lds	r24, 0x035C
    64ee:	88 23       	and	r24, r24
    64f0:	49 f4       	brne	.+18     	; 0x6504 <forward_mm_totable+0x17e>
		{
			forward_mm(5);
    64f2:	85 e0       	ldi	r24, 0x05	; 5
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	0e 94 9a 10 	call	0x2134	; 0x2134 <forward_mm>
			distance_travelled=distance_travelled+5;
    64fa:	89 81       	ldd	r24, Y+1	; 0x01
    64fc:	9a 81       	ldd	r25, Y+2	; 0x02
    64fe:	05 96       	adiw	r24, 0x05	; 5
    6500:	9a 83       	std	Y+2, r25	; 0x02
    6502:	89 83       	std	Y+1, r24	; 0x01
			
		}
		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE && obstflag ==0)
    6504:	80 91 46 03 	lds	r24, 0x0346
    6508:	80 34       	cpi	r24, 0x40	; 64
    650a:	80 f4       	brcc	.+32     	; 0x652c <forward_mm_totable+0x1a6>
    650c:	80 91 45 03 	lds	r24, 0x0345
    6510:	80 34       	cpi	r24, 0x40	; 64
    6512:	60 f4       	brcc	.+24     	; 0x652c <forward_mm_totable+0x1a6>
    6514:	80 91 47 03 	lds	r24, 0x0347
    6518:	80 34       	cpi	r24, 0x40	; 64
    651a:	40 f0       	brcs	.+16     	; 0x652c <forward_mm_totable+0x1a6>
    651c:	80 91 5c 03 	lds	r24, 0x035C
    6520:	88 23       	and	r24, r24
    6522:	21 f4       	brne	.+8      	; 0x652c <forward_mm_totable+0x1a6>
		{
			right_degrees(2);
    6524:	82 e0       	ldi	r24, 0x02	; 2
    6526:	90 e0       	ldi	r25, 0x00	; 0
    6528:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <right_degrees>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    652c:	80 91 46 03 	lds	r24, 0x0346
    6530:	80 34       	cpi	r24, 0x40	; 64
    6532:	80 f4       	brcc	.+32     	; 0x6554 <forward_mm_totable+0x1ce>
    6534:	80 91 45 03 	lds	r24, 0x0345
    6538:	80 34       	cpi	r24, 0x40	; 64
    653a:	60 f0       	brcs	.+24     	; 0x6554 <forward_mm_totable+0x1ce>
    653c:	80 91 47 03 	lds	r24, 0x0347
    6540:	80 34       	cpi	r24, 0x40	; 64
    6542:	40 f4       	brcc	.+16     	; 0x6554 <forward_mm_totable+0x1ce>
    6544:	80 91 5c 03 	lds	r24, 0x035C
    6548:	88 23       	and	r24, r24
    654a:	21 f4       	brne	.+8      	; 0x6554 <forward_mm_totable+0x1ce>
		{
			left_degrees(2);
    654c:	82 e0       	ldi	r24, 0x02	; 2
    654e:	90 e0       	ldi	r25, 0x00	; 0
    6550:	0e 94 c0 10 	call	0x2180	; 0x2180 <left_degrees>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    6554:	80 91 46 03 	lds	r24, 0x0346
    6558:	80 34       	cpi	r24, 0x40	; 64
    655a:	08 f0       	brcs	.+2      	; 0x655e <forward_mm_totable+0x1d8>
    655c:	2d cf       	rjmp	.-422    	; 0x63b8 <forward_mm_totable+0x32>
    655e:	80 91 45 03 	lds	r24, 0x0345
    6562:	80 34       	cpi	r24, 0x40	; 64
    6564:	08 f0       	brcs	.+2      	; 0x6568 <forward_mm_totable+0x1e2>
    6566:	28 cf       	rjmp	.-432    	; 0x63b8 <forward_mm_totable+0x32>
    6568:	80 91 47 03 	lds	r24, 0x0347
    656c:	80 34       	cpi	r24, 0x40	; 64
    656e:	08 f0       	brcs	.+2      	; 0x6572 <forward_mm_totable+0x1ec>
    6570:	23 cf       	rjmp	.-442    	; 0x63b8 <forward_mm_totable+0x32>
    6572:	80 91 5c 03 	lds	r24, 0x035C
    6576:	88 23       	and	r24, r24
    6578:	09 f0       	breq	.+2      	; 0x657c <forward_mm_totable+0x1f6>
    657a:	1e cf       	rjmp	.-452    	; 0x63b8 <forward_mm_totable+0x32>
		{
			//stop();
			adjust_path();
    657c:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <adjust_path>
    6580:	1b cf       	rjmp	.-458    	; 0x63b8 <forward_mm_totable+0x32>

		}
 }


}
    6582:	0f 90       	pop	r0
    6584:	0f 90       	pop	r0
    6586:	0f 90       	pop	r0
    6588:	0f 90       	pop	r0
    658a:	cf 91       	pop	r28
    658c:	df 91       	pop	r29
    658e:	08 95       	ret

00006590 <__fixunssfsi>:
    6590:	ef 92       	push	r14
    6592:	ff 92       	push	r15
    6594:	0f 93       	push	r16
    6596:	1f 93       	push	r17
    6598:	7b 01       	movw	r14, r22
    659a:	8c 01       	movw	r16, r24
    659c:	20 e0       	ldi	r18, 0x00	; 0
    659e:	30 e0       	ldi	r19, 0x00	; 0
    65a0:	40 e0       	ldi	r20, 0x00	; 0
    65a2:	5f e4       	ldi	r21, 0x4F	; 79
    65a4:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__gesf2>
    65a8:	88 23       	and	r24, r24
    65aa:	8c f0       	brlt	.+34     	; 0x65ce <__fixunssfsi+0x3e>
    65ac:	c8 01       	movw	r24, r16
    65ae:	b7 01       	movw	r22, r14
    65b0:	20 e0       	ldi	r18, 0x00	; 0
    65b2:	30 e0       	ldi	r19, 0x00	; 0
    65b4:	40 e0       	ldi	r20, 0x00	; 0
    65b6:	5f e4       	ldi	r21, 0x4F	; 79
    65b8:	0e 94 40 34 	call	0x6880	; 0x6880 <__subsf3>
    65bc:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <__fixsfsi>
    65c0:	9b 01       	movw	r18, r22
    65c2:	ac 01       	movw	r20, r24
    65c4:	20 50       	subi	r18, 0x00	; 0
    65c6:	30 40       	sbci	r19, 0x00	; 0
    65c8:	40 40       	sbci	r20, 0x00	; 0
    65ca:	50 48       	sbci	r21, 0x80	; 128
    65cc:	06 c0       	rjmp	.+12     	; 0x65da <__fixunssfsi+0x4a>
    65ce:	c8 01       	movw	r24, r16
    65d0:	b7 01       	movw	r22, r14
    65d2:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <__fixsfsi>
    65d6:	9b 01       	movw	r18, r22
    65d8:	ac 01       	movw	r20, r24
    65da:	b9 01       	movw	r22, r18
    65dc:	ca 01       	movw	r24, r20
    65de:	1f 91       	pop	r17
    65e0:	0f 91       	pop	r16
    65e2:	ff 90       	pop	r15
    65e4:	ef 90       	pop	r14
    65e6:	08 95       	ret

000065e8 <_fpadd_parts>:
    65e8:	a0 e0       	ldi	r26, 0x00	; 0
    65ea:	b0 e0       	ldi	r27, 0x00	; 0
    65ec:	ea ef       	ldi	r30, 0xFA	; 250
    65ee:	f2 e3       	ldi	r31, 0x32	; 50
    65f0:	0c 94 aa 39 	jmp	0x7354	; 0x7354 <__prologue_saves__>
    65f4:	dc 01       	movw	r26, r24
    65f6:	2b 01       	movw	r4, r22
    65f8:	fa 01       	movw	r30, r20
    65fa:	9c 91       	ld	r25, X
    65fc:	92 30       	cpi	r25, 0x02	; 2
    65fe:	08 f4       	brcc	.+2      	; 0x6602 <_fpadd_parts+0x1a>
    6600:	39 c1       	rjmp	.+626    	; 0x6874 <_fpadd_parts+0x28c>
    6602:	eb 01       	movw	r28, r22
    6604:	88 81       	ld	r24, Y
    6606:	82 30       	cpi	r24, 0x02	; 2
    6608:	08 f4       	brcc	.+2      	; 0x660c <_fpadd_parts+0x24>
    660a:	33 c1       	rjmp	.+614    	; 0x6872 <_fpadd_parts+0x28a>
    660c:	94 30       	cpi	r25, 0x04	; 4
    660e:	69 f4       	brne	.+26     	; 0x662a <_fpadd_parts+0x42>
    6610:	84 30       	cpi	r24, 0x04	; 4
    6612:	09 f0       	breq	.+2      	; 0x6616 <_fpadd_parts+0x2e>
    6614:	2f c1       	rjmp	.+606    	; 0x6874 <_fpadd_parts+0x28c>
    6616:	11 96       	adiw	r26, 0x01	; 1
    6618:	9c 91       	ld	r25, X
    661a:	11 97       	sbiw	r26, 0x01	; 1
    661c:	89 81       	ldd	r24, Y+1	; 0x01
    661e:	98 17       	cp	r25, r24
    6620:	09 f4       	brne	.+2      	; 0x6624 <_fpadd_parts+0x3c>
    6622:	28 c1       	rjmp	.+592    	; 0x6874 <_fpadd_parts+0x28c>
    6624:	a4 e3       	ldi	r26, 0x34	; 52
    6626:	b2 e0       	ldi	r27, 0x02	; 2
    6628:	25 c1       	rjmp	.+586    	; 0x6874 <_fpadd_parts+0x28c>
    662a:	84 30       	cpi	r24, 0x04	; 4
    662c:	09 f4       	brne	.+2      	; 0x6630 <_fpadd_parts+0x48>
    662e:	21 c1       	rjmp	.+578    	; 0x6872 <_fpadd_parts+0x28a>
    6630:	82 30       	cpi	r24, 0x02	; 2
    6632:	a9 f4       	brne	.+42     	; 0x665e <_fpadd_parts+0x76>
    6634:	92 30       	cpi	r25, 0x02	; 2
    6636:	09 f0       	breq	.+2      	; 0x663a <_fpadd_parts+0x52>
    6638:	1d c1       	rjmp	.+570    	; 0x6874 <_fpadd_parts+0x28c>
    663a:	9a 01       	movw	r18, r20
    663c:	ad 01       	movw	r20, r26
    663e:	88 e0       	ldi	r24, 0x08	; 8
    6640:	ea 01       	movw	r28, r20
    6642:	09 90       	ld	r0, Y+
    6644:	ae 01       	movw	r20, r28
    6646:	e9 01       	movw	r28, r18
    6648:	09 92       	st	Y+, r0
    664a:	9e 01       	movw	r18, r28
    664c:	81 50       	subi	r24, 0x01	; 1
    664e:	c1 f7       	brne	.-16     	; 0x6640 <_fpadd_parts+0x58>
    6650:	e2 01       	movw	r28, r4
    6652:	89 81       	ldd	r24, Y+1	; 0x01
    6654:	11 96       	adiw	r26, 0x01	; 1
    6656:	9c 91       	ld	r25, X
    6658:	89 23       	and	r24, r25
    665a:	81 83       	std	Z+1, r24	; 0x01
    665c:	08 c1       	rjmp	.+528    	; 0x686e <_fpadd_parts+0x286>
    665e:	92 30       	cpi	r25, 0x02	; 2
    6660:	09 f4       	brne	.+2      	; 0x6664 <_fpadd_parts+0x7c>
    6662:	07 c1       	rjmp	.+526    	; 0x6872 <_fpadd_parts+0x28a>
    6664:	12 96       	adiw	r26, 0x02	; 2
    6666:	2d 90       	ld	r2, X+
    6668:	3c 90       	ld	r3, X
    666a:	13 97       	sbiw	r26, 0x03	; 3
    666c:	eb 01       	movw	r28, r22
    666e:	8a 81       	ldd	r24, Y+2	; 0x02
    6670:	9b 81       	ldd	r25, Y+3	; 0x03
    6672:	14 96       	adiw	r26, 0x04	; 4
    6674:	ad 90       	ld	r10, X+
    6676:	bd 90       	ld	r11, X+
    6678:	cd 90       	ld	r12, X+
    667a:	dc 90       	ld	r13, X
    667c:	17 97       	sbiw	r26, 0x07	; 7
    667e:	ec 80       	ldd	r14, Y+4	; 0x04
    6680:	fd 80       	ldd	r15, Y+5	; 0x05
    6682:	0e 81       	ldd	r16, Y+6	; 0x06
    6684:	1f 81       	ldd	r17, Y+7	; 0x07
    6686:	91 01       	movw	r18, r2
    6688:	28 1b       	sub	r18, r24
    668a:	39 0b       	sbc	r19, r25
    668c:	b9 01       	movw	r22, r18
    668e:	37 ff       	sbrs	r19, 7
    6690:	04 c0       	rjmp	.+8      	; 0x669a <_fpadd_parts+0xb2>
    6692:	66 27       	eor	r22, r22
    6694:	77 27       	eor	r23, r23
    6696:	62 1b       	sub	r22, r18
    6698:	73 0b       	sbc	r23, r19
    669a:	60 32       	cpi	r22, 0x20	; 32
    669c:	71 05       	cpc	r23, r1
    669e:	0c f0       	brlt	.+2      	; 0x66a2 <_fpadd_parts+0xba>
    66a0:	61 c0       	rjmp	.+194    	; 0x6764 <_fpadd_parts+0x17c>
    66a2:	12 16       	cp	r1, r18
    66a4:	13 06       	cpc	r1, r19
    66a6:	6c f5       	brge	.+90     	; 0x6702 <_fpadd_parts+0x11a>
    66a8:	37 01       	movw	r6, r14
    66aa:	48 01       	movw	r8, r16
    66ac:	06 2e       	mov	r0, r22
    66ae:	04 c0       	rjmp	.+8      	; 0x66b8 <_fpadd_parts+0xd0>
    66b0:	96 94       	lsr	r9
    66b2:	87 94       	ror	r8
    66b4:	77 94       	ror	r7
    66b6:	67 94       	ror	r6
    66b8:	0a 94       	dec	r0
    66ba:	d2 f7       	brpl	.-12     	; 0x66b0 <_fpadd_parts+0xc8>
    66bc:	21 e0       	ldi	r18, 0x01	; 1
    66be:	30 e0       	ldi	r19, 0x00	; 0
    66c0:	40 e0       	ldi	r20, 0x00	; 0
    66c2:	50 e0       	ldi	r21, 0x00	; 0
    66c4:	04 c0       	rjmp	.+8      	; 0x66ce <_fpadd_parts+0xe6>
    66c6:	22 0f       	add	r18, r18
    66c8:	33 1f       	adc	r19, r19
    66ca:	44 1f       	adc	r20, r20
    66cc:	55 1f       	adc	r21, r21
    66ce:	6a 95       	dec	r22
    66d0:	d2 f7       	brpl	.-12     	; 0x66c6 <_fpadd_parts+0xde>
    66d2:	21 50       	subi	r18, 0x01	; 1
    66d4:	30 40       	sbci	r19, 0x00	; 0
    66d6:	40 40       	sbci	r20, 0x00	; 0
    66d8:	50 40       	sbci	r21, 0x00	; 0
    66da:	2e 21       	and	r18, r14
    66dc:	3f 21       	and	r19, r15
    66de:	40 23       	and	r20, r16
    66e0:	51 23       	and	r21, r17
    66e2:	21 15       	cp	r18, r1
    66e4:	31 05       	cpc	r19, r1
    66e6:	41 05       	cpc	r20, r1
    66e8:	51 05       	cpc	r21, r1
    66ea:	21 f0       	breq	.+8      	; 0x66f4 <_fpadd_parts+0x10c>
    66ec:	21 e0       	ldi	r18, 0x01	; 1
    66ee:	30 e0       	ldi	r19, 0x00	; 0
    66f0:	40 e0       	ldi	r20, 0x00	; 0
    66f2:	50 e0       	ldi	r21, 0x00	; 0
    66f4:	79 01       	movw	r14, r18
    66f6:	8a 01       	movw	r16, r20
    66f8:	e6 28       	or	r14, r6
    66fa:	f7 28       	or	r15, r7
    66fc:	08 29       	or	r16, r8
    66fe:	19 29       	or	r17, r9
    6700:	3c c0       	rjmp	.+120    	; 0x677a <_fpadd_parts+0x192>
    6702:	23 2b       	or	r18, r19
    6704:	d1 f1       	breq	.+116    	; 0x677a <_fpadd_parts+0x192>
    6706:	26 0e       	add	r2, r22
    6708:	37 1e       	adc	r3, r23
    670a:	35 01       	movw	r6, r10
    670c:	46 01       	movw	r8, r12
    670e:	06 2e       	mov	r0, r22
    6710:	04 c0       	rjmp	.+8      	; 0x671a <_fpadd_parts+0x132>
    6712:	96 94       	lsr	r9
    6714:	87 94       	ror	r8
    6716:	77 94       	ror	r7
    6718:	67 94       	ror	r6
    671a:	0a 94       	dec	r0
    671c:	d2 f7       	brpl	.-12     	; 0x6712 <_fpadd_parts+0x12a>
    671e:	21 e0       	ldi	r18, 0x01	; 1
    6720:	30 e0       	ldi	r19, 0x00	; 0
    6722:	40 e0       	ldi	r20, 0x00	; 0
    6724:	50 e0       	ldi	r21, 0x00	; 0
    6726:	04 c0       	rjmp	.+8      	; 0x6730 <_fpadd_parts+0x148>
    6728:	22 0f       	add	r18, r18
    672a:	33 1f       	adc	r19, r19
    672c:	44 1f       	adc	r20, r20
    672e:	55 1f       	adc	r21, r21
    6730:	6a 95       	dec	r22
    6732:	d2 f7       	brpl	.-12     	; 0x6728 <_fpadd_parts+0x140>
    6734:	21 50       	subi	r18, 0x01	; 1
    6736:	30 40       	sbci	r19, 0x00	; 0
    6738:	40 40       	sbci	r20, 0x00	; 0
    673a:	50 40       	sbci	r21, 0x00	; 0
    673c:	2a 21       	and	r18, r10
    673e:	3b 21       	and	r19, r11
    6740:	4c 21       	and	r20, r12
    6742:	5d 21       	and	r21, r13
    6744:	21 15       	cp	r18, r1
    6746:	31 05       	cpc	r19, r1
    6748:	41 05       	cpc	r20, r1
    674a:	51 05       	cpc	r21, r1
    674c:	21 f0       	breq	.+8      	; 0x6756 <_fpadd_parts+0x16e>
    674e:	21 e0       	ldi	r18, 0x01	; 1
    6750:	30 e0       	ldi	r19, 0x00	; 0
    6752:	40 e0       	ldi	r20, 0x00	; 0
    6754:	50 e0       	ldi	r21, 0x00	; 0
    6756:	59 01       	movw	r10, r18
    6758:	6a 01       	movw	r12, r20
    675a:	a6 28       	or	r10, r6
    675c:	b7 28       	or	r11, r7
    675e:	c8 28       	or	r12, r8
    6760:	d9 28       	or	r13, r9
    6762:	0b c0       	rjmp	.+22     	; 0x677a <_fpadd_parts+0x192>
    6764:	82 15       	cp	r24, r2
    6766:	93 05       	cpc	r25, r3
    6768:	2c f0       	brlt	.+10     	; 0x6774 <_fpadd_parts+0x18c>
    676a:	1c 01       	movw	r2, r24
    676c:	aa 24       	eor	r10, r10
    676e:	bb 24       	eor	r11, r11
    6770:	65 01       	movw	r12, r10
    6772:	03 c0       	rjmp	.+6      	; 0x677a <_fpadd_parts+0x192>
    6774:	ee 24       	eor	r14, r14
    6776:	ff 24       	eor	r15, r15
    6778:	87 01       	movw	r16, r14
    677a:	11 96       	adiw	r26, 0x01	; 1
    677c:	9c 91       	ld	r25, X
    677e:	d2 01       	movw	r26, r4
    6780:	11 96       	adiw	r26, 0x01	; 1
    6782:	8c 91       	ld	r24, X
    6784:	98 17       	cp	r25, r24
    6786:	09 f4       	brne	.+2      	; 0x678a <_fpadd_parts+0x1a2>
    6788:	45 c0       	rjmp	.+138    	; 0x6814 <_fpadd_parts+0x22c>
    678a:	99 23       	and	r25, r25
    678c:	39 f0       	breq	.+14     	; 0x679c <_fpadd_parts+0x1b4>
    678e:	a8 01       	movw	r20, r16
    6790:	97 01       	movw	r18, r14
    6792:	2a 19       	sub	r18, r10
    6794:	3b 09       	sbc	r19, r11
    6796:	4c 09       	sbc	r20, r12
    6798:	5d 09       	sbc	r21, r13
    679a:	06 c0       	rjmp	.+12     	; 0x67a8 <_fpadd_parts+0x1c0>
    679c:	a6 01       	movw	r20, r12
    679e:	95 01       	movw	r18, r10
    67a0:	2e 19       	sub	r18, r14
    67a2:	3f 09       	sbc	r19, r15
    67a4:	40 0b       	sbc	r20, r16
    67a6:	51 0b       	sbc	r21, r17
    67a8:	57 fd       	sbrc	r21, 7
    67aa:	08 c0       	rjmp	.+16     	; 0x67bc <_fpadd_parts+0x1d4>
    67ac:	11 82       	std	Z+1, r1	; 0x01
    67ae:	33 82       	std	Z+3, r3	; 0x03
    67b0:	22 82       	std	Z+2, r2	; 0x02
    67b2:	24 83       	std	Z+4, r18	; 0x04
    67b4:	35 83       	std	Z+5, r19	; 0x05
    67b6:	46 83       	std	Z+6, r20	; 0x06
    67b8:	57 83       	std	Z+7, r21	; 0x07
    67ba:	1d c0       	rjmp	.+58     	; 0x67f6 <_fpadd_parts+0x20e>
    67bc:	81 e0       	ldi	r24, 0x01	; 1
    67be:	81 83       	std	Z+1, r24	; 0x01
    67c0:	33 82       	std	Z+3, r3	; 0x03
    67c2:	22 82       	std	Z+2, r2	; 0x02
    67c4:	88 27       	eor	r24, r24
    67c6:	99 27       	eor	r25, r25
    67c8:	dc 01       	movw	r26, r24
    67ca:	82 1b       	sub	r24, r18
    67cc:	93 0b       	sbc	r25, r19
    67ce:	a4 0b       	sbc	r26, r20
    67d0:	b5 0b       	sbc	r27, r21
    67d2:	84 83       	std	Z+4, r24	; 0x04
    67d4:	95 83       	std	Z+5, r25	; 0x05
    67d6:	a6 83       	std	Z+6, r26	; 0x06
    67d8:	b7 83       	std	Z+7, r27	; 0x07
    67da:	0d c0       	rjmp	.+26     	; 0x67f6 <_fpadd_parts+0x20e>
    67dc:	22 0f       	add	r18, r18
    67de:	33 1f       	adc	r19, r19
    67e0:	44 1f       	adc	r20, r20
    67e2:	55 1f       	adc	r21, r21
    67e4:	24 83       	std	Z+4, r18	; 0x04
    67e6:	35 83       	std	Z+5, r19	; 0x05
    67e8:	46 83       	std	Z+6, r20	; 0x06
    67ea:	57 83       	std	Z+7, r21	; 0x07
    67ec:	82 81       	ldd	r24, Z+2	; 0x02
    67ee:	93 81       	ldd	r25, Z+3	; 0x03
    67f0:	01 97       	sbiw	r24, 0x01	; 1
    67f2:	93 83       	std	Z+3, r25	; 0x03
    67f4:	82 83       	std	Z+2, r24	; 0x02
    67f6:	24 81       	ldd	r18, Z+4	; 0x04
    67f8:	35 81       	ldd	r19, Z+5	; 0x05
    67fa:	46 81       	ldd	r20, Z+6	; 0x06
    67fc:	57 81       	ldd	r21, Z+7	; 0x07
    67fe:	da 01       	movw	r26, r20
    6800:	c9 01       	movw	r24, r18
    6802:	01 97       	sbiw	r24, 0x01	; 1
    6804:	a1 09       	sbc	r26, r1
    6806:	b1 09       	sbc	r27, r1
    6808:	8f 5f       	subi	r24, 0xFF	; 255
    680a:	9f 4f       	sbci	r25, 0xFF	; 255
    680c:	af 4f       	sbci	r26, 0xFF	; 255
    680e:	bf 43       	sbci	r27, 0x3F	; 63
    6810:	28 f3       	brcs	.-54     	; 0x67dc <_fpadd_parts+0x1f4>
    6812:	0b c0       	rjmp	.+22     	; 0x682a <_fpadd_parts+0x242>
    6814:	91 83       	std	Z+1, r25	; 0x01
    6816:	33 82       	std	Z+3, r3	; 0x03
    6818:	22 82       	std	Z+2, r2	; 0x02
    681a:	ea 0c       	add	r14, r10
    681c:	fb 1c       	adc	r15, r11
    681e:	0c 1d       	adc	r16, r12
    6820:	1d 1d       	adc	r17, r13
    6822:	e4 82       	std	Z+4, r14	; 0x04
    6824:	f5 82       	std	Z+5, r15	; 0x05
    6826:	06 83       	std	Z+6, r16	; 0x06
    6828:	17 83       	std	Z+7, r17	; 0x07
    682a:	83 e0       	ldi	r24, 0x03	; 3
    682c:	80 83       	st	Z, r24
    682e:	24 81       	ldd	r18, Z+4	; 0x04
    6830:	35 81       	ldd	r19, Z+5	; 0x05
    6832:	46 81       	ldd	r20, Z+6	; 0x06
    6834:	57 81       	ldd	r21, Z+7	; 0x07
    6836:	57 ff       	sbrs	r21, 7
    6838:	1a c0       	rjmp	.+52     	; 0x686e <_fpadd_parts+0x286>
    683a:	c9 01       	movw	r24, r18
    683c:	aa 27       	eor	r26, r26
    683e:	97 fd       	sbrc	r25, 7
    6840:	a0 95       	com	r26
    6842:	ba 2f       	mov	r27, r26
    6844:	81 70       	andi	r24, 0x01	; 1
    6846:	90 70       	andi	r25, 0x00	; 0
    6848:	a0 70       	andi	r26, 0x00	; 0
    684a:	b0 70       	andi	r27, 0x00	; 0
    684c:	56 95       	lsr	r21
    684e:	47 95       	ror	r20
    6850:	37 95       	ror	r19
    6852:	27 95       	ror	r18
    6854:	82 2b       	or	r24, r18
    6856:	93 2b       	or	r25, r19
    6858:	a4 2b       	or	r26, r20
    685a:	b5 2b       	or	r27, r21
    685c:	84 83       	std	Z+4, r24	; 0x04
    685e:	95 83       	std	Z+5, r25	; 0x05
    6860:	a6 83       	std	Z+6, r26	; 0x06
    6862:	b7 83       	std	Z+7, r27	; 0x07
    6864:	82 81       	ldd	r24, Z+2	; 0x02
    6866:	93 81       	ldd	r25, Z+3	; 0x03
    6868:	01 96       	adiw	r24, 0x01	; 1
    686a:	93 83       	std	Z+3, r25	; 0x03
    686c:	82 83       	std	Z+2, r24	; 0x02
    686e:	df 01       	movw	r26, r30
    6870:	01 c0       	rjmp	.+2      	; 0x6874 <_fpadd_parts+0x28c>
    6872:	d2 01       	movw	r26, r4
    6874:	cd 01       	movw	r24, r26
    6876:	cd b7       	in	r28, 0x3d	; 61
    6878:	de b7       	in	r29, 0x3e	; 62
    687a:	e2 e1       	ldi	r30, 0x12	; 18
    687c:	0c 94 c6 39 	jmp	0x738c	; 0x738c <__epilogue_restores__>

00006880 <__subsf3>:
    6880:	a0 e2       	ldi	r26, 0x20	; 32
    6882:	b0 e0       	ldi	r27, 0x00	; 0
    6884:	e6 e4       	ldi	r30, 0x46	; 70
    6886:	f4 e3       	ldi	r31, 0x34	; 52
    6888:	0c 94 b6 39 	jmp	0x736c	; 0x736c <__prologue_saves__+0x18>
    688c:	69 83       	std	Y+1, r22	; 0x01
    688e:	7a 83       	std	Y+2, r23	; 0x02
    6890:	8b 83       	std	Y+3, r24	; 0x03
    6892:	9c 83       	std	Y+4, r25	; 0x04
    6894:	2d 83       	std	Y+5, r18	; 0x05
    6896:	3e 83       	std	Y+6, r19	; 0x06
    6898:	4f 83       	std	Y+7, r20	; 0x07
    689a:	58 87       	std	Y+8, r21	; 0x08
    689c:	e9 e0       	ldi	r30, 0x09	; 9
    689e:	ee 2e       	mov	r14, r30
    68a0:	f1 2c       	mov	r15, r1
    68a2:	ec 0e       	add	r14, r28
    68a4:	fd 1e       	adc	r15, r29
    68a6:	ce 01       	movw	r24, r28
    68a8:	01 96       	adiw	r24, 0x01	; 1
    68aa:	b7 01       	movw	r22, r14
    68ac:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    68b0:	8e 01       	movw	r16, r28
    68b2:	0f 5e       	subi	r16, 0xEF	; 239
    68b4:	1f 4f       	sbci	r17, 0xFF	; 255
    68b6:	ce 01       	movw	r24, r28
    68b8:	05 96       	adiw	r24, 0x05	; 5
    68ba:	b8 01       	movw	r22, r16
    68bc:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    68c0:	8a 89       	ldd	r24, Y+18	; 0x12
    68c2:	91 e0       	ldi	r25, 0x01	; 1
    68c4:	89 27       	eor	r24, r25
    68c6:	8a 8b       	std	Y+18, r24	; 0x12
    68c8:	c7 01       	movw	r24, r14
    68ca:	b8 01       	movw	r22, r16
    68cc:	ae 01       	movw	r20, r28
    68ce:	47 5e       	subi	r20, 0xE7	; 231
    68d0:	5f 4f       	sbci	r21, 0xFF	; 255
    68d2:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <_fpadd_parts>
    68d6:	0e 94 f0 37 	call	0x6fe0	; 0x6fe0 <__pack_f>
    68da:	a0 96       	adiw	r28, 0x20	; 32
    68dc:	e6 e0       	ldi	r30, 0x06	; 6
    68de:	0c 94 d2 39 	jmp	0x73a4	; 0x73a4 <__epilogue_restores__+0x18>

000068e2 <__addsf3>:
    68e2:	a0 e2       	ldi	r26, 0x20	; 32
    68e4:	b0 e0       	ldi	r27, 0x00	; 0
    68e6:	e7 e7       	ldi	r30, 0x77	; 119
    68e8:	f4 e3       	ldi	r31, 0x34	; 52
    68ea:	0c 94 b6 39 	jmp	0x736c	; 0x736c <__prologue_saves__+0x18>
    68ee:	69 83       	std	Y+1, r22	; 0x01
    68f0:	7a 83       	std	Y+2, r23	; 0x02
    68f2:	8b 83       	std	Y+3, r24	; 0x03
    68f4:	9c 83       	std	Y+4, r25	; 0x04
    68f6:	2d 83       	std	Y+5, r18	; 0x05
    68f8:	3e 83       	std	Y+6, r19	; 0x06
    68fa:	4f 83       	std	Y+7, r20	; 0x07
    68fc:	58 87       	std	Y+8, r21	; 0x08
    68fe:	f9 e0       	ldi	r31, 0x09	; 9
    6900:	ef 2e       	mov	r14, r31
    6902:	f1 2c       	mov	r15, r1
    6904:	ec 0e       	add	r14, r28
    6906:	fd 1e       	adc	r15, r29
    6908:	ce 01       	movw	r24, r28
    690a:	01 96       	adiw	r24, 0x01	; 1
    690c:	b7 01       	movw	r22, r14
    690e:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6912:	8e 01       	movw	r16, r28
    6914:	0f 5e       	subi	r16, 0xEF	; 239
    6916:	1f 4f       	sbci	r17, 0xFF	; 255
    6918:	ce 01       	movw	r24, r28
    691a:	05 96       	adiw	r24, 0x05	; 5
    691c:	b8 01       	movw	r22, r16
    691e:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6922:	c7 01       	movw	r24, r14
    6924:	b8 01       	movw	r22, r16
    6926:	ae 01       	movw	r20, r28
    6928:	47 5e       	subi	r20, 0xE7	; 231
    692a:	5f 4f       	sbci	r21, 0xFF	; 255
    692c:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <_fpadd_parts>
    6930:	0e 94 f0 37 	call	0x6fe0	; 0x6fe0 <__pack_f>
    6934:	a0 96       	adiw	r28, 0x20	; 32
    6936:	e6 e0       	ldi	r30, 0x06	; 6
    6938:	0c 94 d2 39 	jmp	0x73a4	; 0x73a4 <__epilogue_restores__+0x18>

0000693c <__mulsf3>:
    693c:	a0 e2       	ldi	r26, 0x20	; 32
    693e:	b0 e0       	ldi	r27, 0x00	; 0
    6940:	e4 ea       	ldi	r30, 0xA4	; 164
    6942:	f4 e3       	ldi	r31, 0x34	; 52
    6944:	0c 94 aa 39 	jmp	0x7354	; 0x7354 <__prologue_saves__>
    6948:	69 83       	std	Y+1, r22	; 0x01
    694a:	7a 83       	std	Y+2, r23	; 0x02
    694c:	8b 83       	std	Y+3, r24	; 0x03
    694e:	9c 83       	std	Y+4, r25	; 0x04
    6950:	2d 83       	std	Y+5, r18	; 0x05
    6952:	3e 83       	std	Y+6, r19	; 0x06
    6954:	4f 83       	std	Y+7, r20	; 0x07
    6956:	58 87       	std	Y+8, r21	; 0x08
    6958:	ce 01       	movw	r24, r28
    695a:	01 96       	adiw	r24, 0x01	; 1
    695c:	be 01       	movw	r22, r28
    695e:	67 5f       	subi	r22, 0xF7	; 247
    6960:	7f 4f       	sbci	r23, 0xFF	; 255
    6962:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6966:	ce 01       	movw	r24, r28
    6968:	05 96       	adiw	r24, 0x05	; 5
    696a:	be 01       	movw	r22, r28
    696c:	6f 5e       	subi	r22, 0xEF	; 239
    696e:	7f 4f       	sbci	r23, 0xFF	; 255
    6970:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6974:	99 85       	ldd	r25, Y+9	; 0x09
    6976:	92 30       	cpi	r25, 0x02	; 2
    6978:	88 f0       	brcs	.+34     	; 0x699c <__mulsf3+0x60>
    697a:	89 89       	ldd	r24, Y+17	; 0x11
    697c:	82 30       	cpi	r24, 0x02	; 2
    697e:	c8 f0       	brcs	.+50     	; 0x69b2 <__mulsf3+0x76>
    6980:	94 30       	cpi	r25, 0x04	; 4
    6982:	19 f4       	brne	.+6      	; 0x698a <__mulsf3+0x4e>
    6984:	82 30       	cpi	r24, 0x02	; 2
    6986:	51 f4       	brne	.+20     	; 0x699c <__mulsf3+0x60>
    6988:	04 c0       	rjmp	.+8      	; 0x6992 <__mulsf3+0x56>
    698a:	84 30       	cpi	r24, 0x04	; 4
    698c:	29 f4       	brne	.+10     	; 0x6998 <__mulsf3+0x5c>
    698e:	92 30       	cpi	r25, 0x02	; 2
    6990:	81 f4       	brne	.+32     	; 0x69b2 <__mulsf3+0x76>
    6992:	84 e3       	ldi	r24, 0x34	; 52
    6994:	92 e0       	ldi	r25, 0x02	; 2
    6996:	c6 c0       	rjmp	.+396    	; 0x6b24 <__mulsf3+0x1e8>
    6998:	92 30       	cpi	r25, 0x02	; 2
    699a:	49 f4       	brne	.+18     	; 0x69ae <__mulsf3+0x72>
    699c:	20 e0       	ldi	r18, 0x00	; 0
    699e:	9a 85       	ldd	r25, Y+10	; 0x0a
    69a0:	8a 89       	ldd	r24, Y+18	; 0x12
    69a2:	98 13       	cpse	r25, r24
    69a4:	21 e0       	ldi	r18, 0x01	; 1
    69a6:	2a 87       	std	Y+10, r18	; 0x0a
    69a8:	ce 01       	movw	r24, r28
    69aa:	09 96       	adiw	r24, 0x09	; 9
    69ac:	bb c0       	rjmp	.+374    	; 0x6b24 <__mulsf3+0x1e8>
    69ae:	82 30       	cpi	r24, 0x02	; 2
    69b0:	49 f4       	brne	.+18     	; 0x69c4 <__mulsf3+0x88>
    69b2:	20 e0       	ldi	r18, 0x00	; 0
    69b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    69b6:	8a 89       	ldd	r24, Y+18	; 0x12
    69b8:	98 13       	cpse	r25, r24
    69ba:	21 e0       	ldi	r18, 0x01	; 1
    69bc:	2a 8b       	std	Y+18, r18	; 0x12
    69be:	ce 01       	movw	r24, r28
    69c0:	41 96       	adiw	r24, 0x11	; 17
    69c2:	b0 c0       	rjmp	.+352    	; 0x6b24 <__mulsf3+0x1e8>
    69c4:	2d 84       	ldd	r2, Y+13	; 0x0d
    69c6:	3e 84       	ldd	r3, Y+14	; 0x0e
    69c8:	4f 84       	ldd	r4, Y+15	; 0x0f
    69ca:	58 88       	ldd	r5, Y+16	; 0x10
    69cc:	6d 88       	ldd	r6, Y+21	; 0x15
    69ce:	7e 88       	ldd	r7, Y+22	; 0x16
    69d0:	8f 88       	ldd	r8, Y+23	; 0x17
    69d2:	98 8c       	ldd	r9, Y+24	; 0x18
    69d4:	ee 24       	eor	r14, r14
    69d6:	ff 24       	eor	r15, r15
    69d8:	87 01       	movw	r16, r14
    69da:	aa 24       	eor	r10, r10
    69dc:	bb 24       	eor	r11, r11
    69de:	65 01       	movw	r12, r10
    69e0:	40 e0       	ldi	r20, 0x00	; 0
    69e2:	50 e0       	ldi	r21, 0x00	; 0
    69e4:	60 e0       	ldi	r22, 0x00	; 0
    69e6:	70 e0       	ldi	r23, 0x00	; 0
    69e8:	e0 e0       	ldi	r30, 0x00	; 0
    69ea:	f0 e0       	ldi	r31, 0x00	; 0
    69ec:	c1 01       	movw	r24, r2
    69ee:	81 70       	andi	r24, 0x01	; 1
    69f0:	90 70       	andi	r25, 0x00	; 0
    69f2:	89 2b       	or	r24, r25
    69f4:	e9 f0       	breq	.+58     	; 0x6a30 <__mulsf3+0xf4>
    69f6:	e6 0c       	add	r14, r6
    69f8:	f7 1c       	adc	r15, r7
    69fa:	08 1d       	adc	r16, r8
    69fc:	19 1d       	adc	r17, r9
    69fe:	9a 01       	movw	r18, r20
    6a00:	ab 01       	movw	r20, r22
    6a02:	2a 0d       	add	r18, r10
    6a04:	3b 1d       	adc	r19, r11
    6a06:	4c 1d       	adc	r20, r12
    6a08:	5d 1d       	adc	r21, r13
    6a0a:	80 e0       	ldi	r24, 0x00	; 0
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	a0 e0       	ldi	r26, 0x00	; 0
    6a10:	b0 e0       	ldi	r27, 0x00	; 0
    6a12:	e6 14       	cp	r14, r6
    6a14:	f7 04       	cpc	r15, r7
    6a16:	08 05       	cpc	r16, r8
    6a18:	19 05       	cpc	r17, r9
    6a1a:	20 f4       	brcc	.+8      	; 0x6a24 <__mulsf3+0xe8>
    6a1c:	81 e0       	ldi	r24, 0x01	; 1
    6a1e:	90 e0       	ldi	r25, 0x00	; 0
    6a20:	a0 e0       	ldi	r26, 0x00	; 0
    6a22:	b0 e0       	ldi	r27, 0x00	; 0
    6a24:	ba 01       	movw	r22, r20
    6a26:	a9 01       	movw	r20, r18
    6a28:	48 0f       	add	r20, r24
    6a2a:	59 1f       	adc	r21, r25
    6a2c:	6a 1f       	adc	r22, r26
    6a2e:	7b 1f       	adc	r23, r27
    6a30:	aa 0c       	add	r10, r10
    6a32:	bb 1c       	adc	r11, r11
    6a34:	cc 1c       	adc	r12, r12
    6a36:	dd 1c       	adc	r13, r13
    6a38:	97 fe       	sbrs	r9, 7
    6a3a:	08 c0       	rjmp	.+16     	; 0x6a4c <__mulsf3+0x110>
    6a3c:	81 e0       	ldi	r24, 0x01	; 1
    6a3e:	90 e0       	ldi	r25, 0x00	; 0
    6a40:	a0 e0       	ldi	r26, 0x00	; 0
    6a42:	b0 e0       	ldi	r27, 0x00	; 0
    6a44:	a8 2a       	or	r10, r24
    6a46:	b9 2a       	or	r11, r25
    6a48:	ca 2a       	or	r12, r26
    6a4a:	db 2a       	or	r13, r27
    6a4c:	31 96       	adiw	r30, 0x01	; 1
    6a4e:	e0 32       	cpi	r30, 0x20	; 32
    6a50:	f1 05       	cpc	r31, r1
    6a52:	49 f0       	breq	.+18     	; 0x6a66 <__mulsf3+0x12a>
    6a54:	66 0c       	add	r6, r6
    6a56:	77 1c       	adc	r7, r7
    6a58:	88 1c       	adc	r8, r8
    6a5a:	99 1c       	adc	r9, r9
    6a5c:	56 94       	lsr	r5
    6a5e:	47 94       	ror	r4
    6a60:	37 94       	ror	r3
    6a62:	27 94       	ror	r2
    6a64:	c3 cf       	rjmp	.-122    	; 0x69ec <__mulsf3+0xb0>
    6a66:	fa 85       	ldd	r31, Y+10	; 0x0a
    6a68:	ea 89       	ldd	r30, Y+18	; 0x12
    6a6a:	2b 89       	ldd	r18, Y+19	; 0x13
    6a6c:	3c 89       	ldd	r19, Y+20	; 0x14
    6a6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6a70:	9c 85       	ldd	r25, Y+12	; 0x0c
    6a72:	28 0f       	add	r18, r24
    6a74:	39 1f       	adc	r19, r25
    6a76:	2e 5f       	subi	r18, 0xFE	; 254
    6a78:	3f 4f       	sbci	r19, 0xFF	; 255
    6a7a:	17 c0       	rjmp	.+46     	; 0x6aaa <__mulsf3+0x16e>
    6a7c:	ca 01       	movw	r24, r20
    6a7e:	81 70       	andi	r24, 0x01	; 1
    6a80:	90 70       	andi	r25, 0x00	; 0
    6a82:	89 2b       	or	r24, r25
    6a84:	61 f0       	breq	.+24     	; 0x6a9e <__mulsf3+0x162>
    6a86:	16 95       	lsr	r17
    6a88:	07 95       	ror	r16
    6a8a:	f7 94       	ror	r15
    6a8c:	e7 94       	ror	r14
    6a8e:	80 e0       	ldi	r24, 0x00	; 0
    6a90:	90 e0       	ldi	r25, 0x00	; 0
    6a92:	a0 e0       	ldi	r26, 0x00	; 0
    6a94:	b0 e8       	ldi	r27, 0x80	; 128
    6a96:	e8 2a       	or	r14, r24
    6a98:	f9 2a       	or	r15, r25
    6a9a:	0a 2b       	or	r16, r26
    6a9c:	1b 2b       	or	r17, r27
    6a9e:	76 95       	lsr	r23
    6aa0:	67 95       	ror	r22
    6aa2:	57 95       	ror	r21
    6aa4:	47 95       	ror	r20
    6aa6:	2f 5f       	subi	r18, 0xFF	; 255
    6aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    6aaa:	77 fd       	sbrc	r23, 7
    6aac:	e7 cf       	rjmp	.-50     	; 0x6a7c <__mulsf3+0x140>
    6aae:	0c c0       	rjmp	.+24     	; 0x6ac8 <__mulsf3+0x18c>
    6ab0:	44 0f       	add	r20, r20
    6ab2:	55 1f       	adc	r21, r21
    6ab4:	66 1f       	adc	r22, r22
    6ab6:	77 1f       	adc	r23, r23
    6ab8:	17 fd       	sbrc	r17, 7
    6aba:	41 60       	ori	r20, 0x01	; 1
    6abc:	ee 0c       	add	r14, r14
    6abe:	ff 1c       	adc	r15, r15
    6ac0:	00 1f       	adc	r16, r16
    6ac2:	11 1f       	adc	r17, r17
    6ac4:	21 50       	subi	r18, 0x01	; 1
    6ac6:	30 40       	sbci	r19, 0x00	; 0
    6ac8:	40 30       	cpi	r20, 0x00	; 0
    6aca:	90 e0       	ldi	r25, 0x00	; 0
    6acc:	59 07       	cpc	r21, r25
    6ace:	90 e0       	ldi	r25, 0x00	; 0
    6ad0:	69 07       	cpc	r22, r25
    6ad2:	90 e4       	ldi	r25, 0x40	; 64
    6ad4:	79 07       	cpc	r23, r25
    6ad6:	60 f3       	brcs	.-40     	; 0x6ab0 <__mulsf3+0x174>
    6ad8:	2b 8f       	std	Y+27, r18	; 0x1b
    6ada:	3c 8f       	std	Y+28, r19	; 0x1c
    6adc:	db 01       	movw	r26, r22
    6ade:	ca 01       	movw	r24, r20
    6ae0:	8f 77       	andi	r24, 0x7F	; 127
    6ae2:	90 70       	andi	r25, 0x00	; 0
    6ae4:	a0 70       	andi	r26, 0x00	; 0
    6ae6:	b0 70       	andi	r27, 0x00	; 0
    6ae8:	80 34       	cpi	r24, 0x40	; 64
    6aea:	91 05       	cpc	r25, r1
    6aec:	a1 05       	cpc	r26, r1
    6aee:	b1 05       	cpc	r27, r1
    6af0:	61 f4       	brne	.+24     	; 0x6b0a <__mulsf3+0x1ce>
    6af2:	47 fd       	sbrc	r20, 7
    6af4:	0a c0       	rjmp	.+20     	; 0x6b0a <__mulsf3+0x1ce>
    6af6:	e1 14       	cp	r14, r1
    6af8:	f1 04       	cpc	r15, r1
    6afa:	01 05       	cpc	r16, r1
    6afc:	11 05       	cpc	r17, r1
    6afe:	29 f0       	breq	.+10     	; 0x6b0a <__mulsf3+0x1ce>
    6b00:	40 5c       	subi	r20, 0xC0	; 192
    6b02:	5f 4f       	sbci	r21, 0xFF	; 255
    6b04:	6f 4f       	sbci	r22, 0xFF	; 255
    6b06:	7f 4f       	sbci	r23, 0xFF	; 255
    6b08:	40 78       	andi	r20, 0x80	; 128
    6b0a:	1a 8e       	std	Y+26, r1	; 0x1a
    6b0c:	fe 17       	cp	r31, r30
    6b0e:	11 f0       	breq	.+4      	; 0x6b14 <__mulsf3+0x1d8>
    6b10:	81 e0       	ldi	r24, 0x01	; 1
    6b12:	8a 8f       	std	Y+26, r24	; 0x1a
    6b14:	4d 8f       	std	Y+29, r20	; 0x1d
    6b16:	5e 8f       	std	Y+30, r21	; 0x1e
    6b18:	6f 8f       	std	Y+31, r22	; 0x1f
    6b1a:	78 a3       	std	Y+32, r23	; 0x20
    6b1c:	83 e0       	ldi	r24, 0x03	; 3
    6b1e:	89 8f       	std	Y+25, r24	; 0x19
    6b20:	ce 01       	movw	r24, r28
    6b22:	49 96       	adiw	r24, 0x19	; 25
    6b24:	0e 94 f0 37 	call	0x6fe0	; 0x6fe0 <__pack_f>
    6b28:	a0 96       	adiw	r28, 0x20	; 32
    6b2a:	e2 e1       	ldi	r30, 0x12	; 18
    6b2c:	0c 94 c6 39 	jmp	0x738c	; 0x738c <__epilogue_restores__>

00006b30 <__divsf3>:
    6b30:	a8 e1       	ldi	r26, 0x18	; 24
    6b32:	b0 e0       	ldi	r27, 0x00	; 0
    6b34:	ee e9       	ldi	r30, 0x9E	; 158
    6b36:	f5 e3       	ldi	r31, 0x35	; 53
    6b38:	0c 94 b2 39 	jmp	0x7364	; 0x7364 <__prologue_saves__+0x10>
    6b3c:	69 83       	std	Y+1, r22	; 0x01
    6b3e:	7a 83       	std	Y+2, r23	; 0x02
    6b40:	8b 83       	std	Y+3, r24	; 0x03
    6b42:	9c 83       	std	Y+4, r25	; 0x04
    6b44:	2d 83       	std	Y+5, r18	; 0x05
    6b46:	3e 83       	std	Y+6, r19	; 0x06
    6b48:	4f 83       	std	Y+7, r20	; 0x07
    6b4a:	58 87       	std	Y+8, r21	; 0x08
    6b4c:	b9 e0       	ldi	r27, 0x09	; 9
    6b4e:	eb 2e       	mov	r14, r27
    6b50:	f1 2c       	mov	r15, r1
    6b52:	ec 0e       	add	r14, r28
    6b54:	fd 1e       	adc	r15, r29
    6b56:	ce 01       	movw	r24, r28
    6b58:	01 96       	adiw	r24, 0x01	; 1
    6b5a:	b7 01       	movw	r22, r14
    6b5c:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6b60:	8e 01       	movw	r16, r28
    6b62:	0f 5e       	subi	r16, 0xEF	; 239
    6b64:	1f 4f       	sbci	r17, 0xFF	; 255
    6b66:	ce 01       	movw	r24, r28
    6b68:	05 96       	adiw	r24, 0x05	; 5
    6b6a:	b8 01       	movw	r22, r16
    6b6c:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6b70:	29 85       	ldd	r18, Y+9	; 0x09
    6b72:	22 30       	cpi	r18, 0x02	; 2
    6b74:	08 f4       	brcc	.+2      	; 0x6b78 <__divsf3+0x48>
    6b76:	7e c0       	rjmp	.+252    	; 0x6c74 <__divsf3+0x144>
    6b78:	39 89       	ldd	r19, Y+17	; 0x11
    6b7a:	32 30       	cpi	r19, 0x02	; 2
    6b7c:	10 f4       	brcc	.+4      	; 0x6b82 <__divsf3+0x52>
    6b7e:	b8 01       	movw	r22, r16
    6b80:	7c c0       	rjmp	.+248    	; 0x6c7a <__divsf3+0x14a>
    6b82:	8a 85       	ldd	r24, Y+10	; 0x0a
    6b84:	9a 89       	ldd	r25, Y+18	; 0x12
    6b86:	89 27       	eor	r24, r25
    6b88:	8a 87       	std	Y+10, r24	; 0x0a
    6b8a:	24 30       	cpi	r18, 0x04	; 4
    6b8c:	11 f0       	breq	.+4      	; 0x6b92 <__divsf3+0x62>
    6b8e:	22 30       	cpi	r18, 0x02	; 2
    6b90:	31 f4       	brne	.+12     	; 0x6b9e <__divsf3+0x6e>
    6b92:	23 17       	cp	r18, r19
    6b94:	09 f0       	breq	.+2      	; 0x6b98 <__divsf3+0x68>
    6b96:	6e c0       	rjmp	.+220    	; 0x6c74 <__divsf3+0x144>
    6b98:	64 e3       	ldi	r22, 0x34	; 52
    6b9a:	72 e0       	ldi	r23, 0x02	; 2
    6b9c:	6e c0       	rjmp	.+220    	; 0x6c7a <__divsf3+0x14a>
    6b9e:	34 30       	cpi	r19, 0x04	; 4
    6ba0:	39 f4       	brne	.+14     	; 0x6bb0 <__divsf3+0x80>
    6ba2:	1d 86       	std	Y+13, r1	; 0x0d
    6ba4:	1e 86       	std	Y+14, r1	; 0x0e
    6ba6:	1f 86       	std	Y+15, r1	; 0x0f
    6ba8:	18 8a       	std	Y+16, r1	; 0x10
    6baa:	1c 86       	std	Y+12, r1	; 0x0c
    6bac:	1b 86       	std	Y+11, r1	; 0x0b
    6bae:	04 c0       	rjmp	.+8      	; 0x6bb8 <__divsf3+0x88>
    6bb0:	32 30       	cpi	r19, 0x02	; 2
    6bb2:	21 f4       	brne	.+8      	; 0x6bbc <__divsf3+0x8c>
    6bb4:	84 e0       	ldi	r24, 0x04	; 4
    6bb6:	89 87       	std	Y+9, r24	; 0x09
    6bb8:	b7 01       	movw	r22, r14
    6bba:	5f c0       	rjmp	.+190    	; 0x6c7a <__divsf3+0x14a>
    6bbc:	2b 85       	ldd	r18, Y+11	; 0x0b
    6bbe:	3c 85       	ldd	r19, Y+12	; 0x0c
    6bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    6bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    6bc4:	28 1b       	sub	r18, r24
    6bc6:	39 0b       	sbc	r19, r25
    6bc8:	3c 87       	std	Y+12, r19	; 0x0c
    6bca:	2b 87       	std	Y+11, r18	; 0x0b
    6bcc:	ed 84       	ldd	r14, Y+13	; 0x0d
    6bce:	fe 84       	ldd	r15, Y+14	; 0x0e
    6bd0:	0f 85       	ldd	r16, Y+15	; 0x0f
    6bd2:	18 89       	ldd	r17, Y+16	; 0x10
    6bd4:	ad 88       	ldd	r10, Y+21	; 0x15
    6bd6:	be 88       	ldd	r11, Y+22	; 0x16
    6bd8:	cf 88       	ldd	r12, Y+23	; 0x17
    6bda:	d8 8c       	ldd	r13, Y+24	; 0x18
    6bdc:	ea 14       	cp	r14, r10
    6bde:	fb 04       	cpc	r15, r11
    6be0:	0c 05       	cpc	r16, r12
    6be2:	1d 05       	cpc	r17, r13
    6be4:	40 f4       	brcc	.+16     	; 0x6bf6 <__divsf3+0xc6>
    6be6:	ee 0c       	add	r14, r14
    6be8:	ff 1c       	adc	r15, r15
    6bea:	00 1f       	adc	r16, r16
    6bec:	11 1f       	adc	r17, r17
    6bee:	21 50       	subi	r18, 0x01	; 1
    6bf0:	30 40       	sbci	r19, 0x00	; 0
    6bf2:	3c 87       	std	Y+12, r19	; 0x0c
    6bf4:	2b 87       	std	Y+11, r18	; 0x0b
    6bf6:	20 e0       	ldi	r18, 0x00	; 0
    6bf8:	30 e0       	ldi	r19, 0x00	; 0
    6bfa:	40 e0       	ldi	r20, 0x00	; 0
    6bfc:	50 e0       	ldi	r21, 0x00	; 0
    6bfe:	80 e0       	ldi	r24, 0x00	; 0
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	a0 e0       	ldi	r26, 0x00	; 0
    6c04:	b0 e4       	ldi	r27, 0x40	; 64
    6c06:	60 e0       	ldi	r22, 0x00	; 0
    6c08:	70 e0       	ldi	r23, 0x00	; 0
    6c0a:	ea 14       	cp	r14, r10
    6c0c:	fb 04       	cpc	r15, r11
    6c0e:	0c 05       	cpc	r16, r12
    6c10:	1d 05       	cpc	r17, r13
    6c12:	40 f0       	brcs	.+16     	; 0x6c24 <__divsf3+0xf4>
    6c14:	28 2b       	or	r18, r24
    6c16:	39 2b       	or	r19, r25
    6c18:	4a 2b       	or	r20, r26
    6c1a:	5b 2b       	or	r21, r27
    6c1c:	ea 18       	sub	r14, r10
    6c1e:	fb 08       	sbc	r15, r11
    6c20:	0c 09       	sbc	r16, r12
    6c22:	1d 09       	sbc	r17, r13
    6c24:	b6 95       	lsr	r27
    6c26:	a7 95       	ror	r26
    6c28:	97 95       	ror	r25
    6c2a:	87 95       	ror	r24
    6c2c:	ee 0c       	add	r14, r14
    6c2e:	ff 1c       	adc	r15, r15
    6c30:	00 1f       	adc	r16, r16
    6c32:	11 1f       	adc	r17, r17
    6c34:	6f 5f       	subi	r22, 0xFF	; 255
    6c36:	7f 4f       	sbci	r23, 0xFF	; 255
    6c38:	6f 31       	cpi	r22, 0x1F	; 31
    6c3a:	71 05       	cpc	r23, r1
    6c3c:	31 f7       	brne	.-52     	; 0x6c0a <__divsf3+0xda>
    6c3e:	da 01       	movw	r26, r20
    6c40:	c9 01       	movw	r24, r18
    6c42:	8f 77       	andi	r24, 0x7F	; 127
    6c44:	90 70       	andi	r25, 0x00	; 0
    6c46:	a0 70       	andi	r26, 0x00	; 0
    6c48:	b0 70       	andi	r27, 0x00	; 0
    6c4a:	80 34       	cpi	r24, 0x40	; 64
    6c4c:	91 05       	cpc	r25, r1
    6c4e:	a1 05       	cpc	r26, r1
    6c50:	b1 05       	cpc	r27, r1
    6c52:	61 f4       	brne	.+24     	; 0x6c6c <__divsf3+0x13c>
    6c54:	27 fd       	sbrc	r18, 7
    6c56:	0a c0       	rjmp	.+20     	; 0x6c6c <__divsf3+0x13c>
    6c58:	e1 14       	cp	r14, r1
    6c5a:	f1 04       	cpc	r15, r1
    6c5c:	01 05       	cpc	r16, r1
    6c5e:	11 05       	cpc	r17, r1
    6c60:	29 f0       	breq	.+10     	; 0x6c6c <__divsf3+0x13c>
    6c62:	20 5c       	subi	r18, 0xC0	; 192
    6c64:	3f 4f       	sbci	r19, 0xFF	; 255
    6c66:	4f 4f       	sbci	r20, 0xFF	; 255
    6c68:	5f 4f       	sbci	r21, 0xFF	; 255
    6c6a:	20 78       	andi	r18, 0x80	; 128
    6c6c:	2d 87       	std	Y+13, r18	; 0x0d
    6c6e:	3e 87       	std	Y+14, r19	; 0x0e
    6c70:	4f 87       	std	Y+15, r20	; 0x0f
    6c72:	58 8b       	std	Y+16, r21	; 0x10
    6c74:	be 01       	movw	r22, r28
    6c76:	67 5f       	subi	r22, 0xF7	; 247
    6c78:	7f 4f       	sbci	r23, 0xFF	; 255
    6c7a:	cb 01       	movw	r24, r22
    6c7c:	0e 94 f0 37 	call	0x6fe0	; 0x6fe0 <__pack_f>
    6c80:	68 96       	adiw	r28, 0x18	; 24
    6c82:	ea e0       	ldi	r30, 0x0A	; 10
    6c84:	0c 94 ce 39 	jmp	0x739c	; 0x739c <__epilogue_restores__+0x10>

00006c88 <__gtsf2>:
    6c88:	a8 e1       	ldi	r26, 0x18	; 24
    6c8a:	b0 e0       	ldi	r27, 0x00	; 0
    6c8c:	ea e4       	ldi	r30, 0x4A	; 74
    6c8e:	f6 e3       	ldi	r31, 0x36	; 54
    6c90:	0c 94 b6 39 	jmp	0x736c	; 0x736c <__prologue_saves__+0x18>
    6c94:	69 83       	std	Y+1, r22	; 0x01
    6c96:	7a 83       	std	Y+2, r23	; 0x02
    6c98:	8b 83       	std	Y+3, r24	; 0x03
    6c9a:	9c 83       	std	Y+4, r25	; 0x04
    6c9c:	2d 83       	std	Y+5, r18	; 0x05
    6c9e:	3e 83       	std	Y+6, r19	; 0x06
    6ca0:	4f 83       	std	Y+7, r20	; 0x07
    6ca2:	58 87       	std	Y+8, r21	; 0x08
    6ca4:	89 e0       	ldi	r24, 0x09	; 9
    6ca6:	e8 2e       	mov	r14, r24
    6ca8:	f1 2c       	mov	r15, r1
    6caa:	ec 0e       	add	r14, r28
    6cac:	fd 1e       	adc	r15, r29
    6cae:	ce 01       	movw	r24, r28
    6cb0:	01 96       	adiw	r24, 0x01	; 1
    6cb2:	b7 01       	movw	r22, r14
    6cb4:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6cb8:	8e 01       	movw	r16, r28
    6cba:	0f 5e       	subi	r16, 0xEF	; 239
    6cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    6cbe:	ce 01       	movw	r24, r28
    6cc0:	05 96       	adiw	r24, 0x05	; 5
    6cc2:	b8 01       	movw	r22, r16
    6cc4:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6cc8:	89 85       	ldd	r24, Y+9	; 0x09
    6cca:	82 30       	cpi	r24, 0x02	; 2
    6ccc:	40 f0       	brcs	.+16     	; 0x6cde <__gtsf2+0x56>
    6cce:	89 89       	ldd	r24, Y+17	; 0x11
    6cd0:	82 30       	cpi	r24, 0x02	; 2
    6cd2:	28 f0       	brcs	.+10     	; 0x6cde <__gtsf2+0x56>
    6cd4:	c7 01       	movw	r24, r14
    6cd6:	b8 01       	movw	r22, r16
    6cd8:	0e 94 3d 39 	call	0x727a	; 0x727a <__fpcmp_parts_f>
    6cdc:	01 c0       	rjmp	.+2      	; 0x6ce0 <__gtsf2+0x58>
    6cde:	8f ef       	ldi	r24, 0xFF	; 255
    6ce0:	68 96       	adiw	r28, 0x18	; 24
    6ce2:	e6 e0       	ldi	r30, 0x06	; 6
    6ce4:	0c 94 d2 39 	jmp	0x73a4	; 0x73a4 <__epilogue_restores__+0x18>

00006ce8 <__gesf2>:
    6ce8:	a8 e1       	ldi	r26, 0x18	; 24
    6cea:	b0 e0       	ldi	r27, 0x00	; 0
    6cec:	ea e7       	ldi	r30, 0x7A	; 122
    6cee:	f6 e3       	ldi	r31, 0x36	; 54
    6cf0:	0c 94 b6 39 	jmp	0x736c	; 0x736c <__prologue_saves__+0x18>
    6cf4:	69 83       	std	Y+1, r22	; 0x01
    6cf6:	7a 83       	std	Y+2, r23	; 0x02
    6cf8:	8b 83       	std	Y+3, r24	; 0x03
    6cfa:	9c 83       	std	Y+4, r25	; 0x04
    6cfc:	2d 83       	std	Y+5, r18	; 0x05
    6cfe:	3e 83       	std	Y+6, r19	; 0x06
    6d00:	4f 83       	std	Y+7, r20	; 0x07
    6d02:	58 87       	std	Y+8, r21	; 0x08
    6d04:	89 e0       	ldi	r24, 0x09	; 9
    6d06:	e8 2e       	mov	r14, r24
    6d08:	f1 2c       	mov	r15, r1
    6d0a:	ec 0e       	add	r14, r28
    6d0c:	fd 1e       	adc	r15, r29
    6d0e:	ce 01       	movw	r24, r28
    6d10:	01 96       	adiw	r24, 0x01	; 1
    6d12:	b7 01       	movw	r22, r14
    6d14:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6d18:	8e 01       	movw	r16, r28
    6d1a:	0f 5e       	subi	r16, 0xEF	; 239
    6d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    6d1e:	ce 01       	movw	r24, r28
    6d20:	05 96       	adiw	r24, 0x05	; 5
    6d22:	b8 01       	movw	r22, r16
    6d24:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6d28:	89 85       	ldd	r24, Y+9	; 0x09
    6d2a:	82 30       	cpi	r24, 0x02	; 2
    6d2c:	40 f0       	brcs	.+16     	; 0x6d3e <__gesf2+0x56>
    6d2e:	89 89       	ldd	r24, Y+17	; 0x11
    6d30:	82 30       	cpi	r24, 0x02	; 2
    6d32:	28 f0       	brcs	.+10     	; 0x6d3e <__gesf2+0x56>
    6d34:	c7 01       	movw	r24, r14
    6d36:	b8 01       	movw	r22, r16
    6d38:	0e 94 3d 39 	call	0x727a	; 0x727a <__fpcmp_parts_f>
    6d3c:	01 c0       	rjmp	.+2      	; 0x6d40 <__gesf2+0x58>
    6d3e:	8f ef       	ldi	r24, 0xFF	; 255
    6d40:	68 96       	adiw	r28, 0x18	; 24
    6d42:	e6 e0       	ldi	r30, 0x06	; 6
    6d44:	0c 94 d2 39 	jmp	0x73a4	; 0x73a4 <__epilogue_restores__+0x18>

00006d48 <__ltsf2>:
    6d48:	a8 e1       	ldi	r26, 0x18	; 24
    6d4a:	b0 e0       	ldi	r27, 0x00	; 0
    6d4c:	ea ea       	ldi	r30, 0xAA	; 170
    6d4e:	f6 e3       	ldi	r31, 0x36	; 54
    6d50:	0c 94 b6 39 	jmp	0x736c	; 0x736c <__prologue_saves__+0x18>
    6d54:	69 83       	std	Y+1, r22	; 0x01
    6d56:	7a 83       	std	Y+2, r23	; 0x02
    6d58:	8b 83       	std	Y+3, r24	; 0x03
    6d5a:	9c 83       	std	Y+4, r25	; 0x04
    6d5c:	2d 83       	std	Y+5, r18	; 0x05
    6d5e:	3e 83       	std	Y+6, r19	; 0x06
    6d60:	4f 83       	std	Y+7, r20	; 0x07
    6d62:	58 87       	std	Y+8, r21	; 0x08
    6d64:	89 e0       	ldi	r24, 0x09	; 9
    6d66:	e8 2e       	mov	r14, r24
    6d68:	f1 2c       	mov	r15, r1
    6d6a:	ec 0e       	add	r14, r28
    6d6c:	fd 1e       	adc	r15, r29
    6d6e:	ce 01       	movw	r24, r28
    6d70:	01 96       	adiw	r24, 0x01	; 1
    6d72:	b7 01       	movw	r22, r14
    6d74:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6d78:	8e 01       	movw	r16, r28
    6d7a:	0f 5e       	subi	r16, 0xEF	; 239
    6d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    6d7e:	ce 01       	movw	r24, r28
    6d80:	05 96       	adiw	r24, 0x05	; 5
    6d82:	b8 01       	movw	r22, r16
    6d84:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6d88:	89 85       	ldd	r24, Y+9	; 0x09
    6d8a:	82 30       	cpi	r24, 0x02	; 2
    6d8c:	40 f0       	brcs	.+16     	; 0x6d9e <__ltsf2+0x56>
    6d8e:	89 89       	ldd	r24, Y+17	; 0x11
    6d90:	82 30       	cpi	r24, 0x02	; 2
    6d92:	28 f0       	brcs	.+10     	; 0x6d9e <__ltsf2+0x56>
    6d94:	c7 01       	movw	r24, r14
    6d96:	b8 01       	movw	r22, r16
    6d98:	0e 94 3d 39 	call	0x727a	; 0x727a <__fpcmp_parts_f>
    6d9c:	01 c0       	rjmp	.+2      	; 0x6da0 <__ltsf2+0x58>
    6d9e:	81 e0       	ldi	r24, 0x01	; 1
    6da0:	68 96       	adiw	r28, 0x18	; 24
    6da2:	e6 e0       	ldi	r30, 0x06	; 6
    6da4:	0c 94 d2 39 	jmp	0x73a4	; 0x73a4 <__epilogue_restores__+0x18>

00006da8 <__fixsfsi>:
    6da8:	ac e0       	ldi	r26, 0x0C	; 12
    6daa:	b0 e0       	ldi	r27, 0x00	; 0
    6dac:	ea ed       	ldi	r30, 0xDA	; 218
    6dae:	f6 e3       	ldi	r31, 0x36	; 54
    6db0:	0c 94 ba 39 	jmp	0x7374	; 0x7374 <__prologue_saves__+0x20>
    6db4:	69 83       	std	Y+1, r22	; 0x01
    6db6:	7a 83       	std	Y+2, r23	; 0x02
    6db8:	8b 83       	std	Y+3, r24	; 0x03
    6dba:	9c 83       	std	Y+4, r25	; 0x04
    6dbc:	ce 01       	movw	r24, r28
    6dbe:	01 96       	adiw	r24, 0x01	; 1
    6dc0:	be 01       	movw	r22, r28
    6dc2:	6b 5f       	subi	r22, 0xFB	; 251
    6dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    6dc6:	0e 94 c5 38 	call	0x718a	; 0x718a <__unpack_f>
    6dca:	8d 81       	ldd	r24, Y+5	; 0x05
    6dcc:	82 30       	cpi	r24, 0x02	; 2
    6dce:	61 f1       	breq	.+88     	; 0x6e28 <__fixsfsi+0x80>
    6dd0:	82 30       	cpi	r24, 0x02	; 2
    6dd2:	50 f1       	brcs	.+84     	; 0x6e28 <__fixsfsi+0x80>
    6dd4:	84 30       	cpi	r24, 0x04	; 4
    6dd6:	21 f4       	brne	.+8      	; 0x6de0 <__fixsfsi+0x38>
    6dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    6dda:	88 23       	and	r24, r24
    6ddc:	51 f1       	breq	.+84     	; 0x6e32 <__fixsfsi+0x8a>
    6dde:	2e c0       	rjmp	.+92     	; 0x6e3c <__fixsfsi+0x94>
    6de0:	2f 81       	ldd	r18, Y+7	; 0x07
    6de2:	38 85       	ldd	r19, Y+8	; 0x08
    6de4:	37 fd       	sbrc	r19, 7
    6de6:	20 c0       	rjmp	.+64     	; 0x6e28 <__fixsfsi+0x80>
    6de8:	6e 81       	ldd	r22, Y+6	; 0x06
    6dea:	2f 31       	cpi	r18, 0x1F	; 31
    6dec:	31 05       	cpc	r19, r1
    6dee:	1c f0       	brlt	.+6      	; 0x6df6 <__fixsfsi+0x4e>
    6df0:	66 23       	and	r22, r22
    6df2:	f9 f0       	breq	.+62     	; 0x6e32 <__fixsfsi+0x8a>
    6df4:	23 c0       	rjmp	.+70     	; 0x6e3c <__fixsfsi+0x94>
    6df6:	8e e1       	ldi	r24, 0x1E	; 30
    6df8:	90 e0       	ldi	r25, 0x00	; 0
    6dfa:	82 1b       	sub	r24, r18
    6dfc:	93 0b       	sbc	r25, r19
    6dfe:	29 85       	ldd	r18, Y+9	; 0x09
    6e00:	3a 85       	ldd	r19, Y+10	; 0x0a
    6e02:	4b 85       	ldd	r20, Y+11	; 0x0b
    6e04:	5c 85       	ldd	r21, Y+12	; 0x0c
    6e06:	04 c0       	rjmp	.+8      	; 0x6e10 <__fixsfsi+0x68>
    6e08:	56 95       	lsr	r21
    6e0a:	47 95       	ror	r20
    6e0c:	37 95       	ror	r19
    6e0e:	27 95       	ror	r18
    6e10:	8a 95       	dec	r24
    6e12:	d2 f7       	brpl	.-12     	; 0x6e08 <__fixsfsi+0x60>
    6e14:	66 23       	and	r22, r22
    6e16:	b1 f0       	breq	.+44     	; 0x6e44 <__fixsfsi+0x9c>
    6e18:	50 95       	com	r21
    6e1a:	40 95       	com	r20
    6e1c:	30 95       	com	r19
    6e1e:	21 95       	neg	r18
    6e20:	3f 4f       	sbci	r19, 0xFF	; 255
    6e22:	4f 4f       	sbci	r20, 0xFF	; 255
    6e24:	5f 4f       	sbci	r21, 0xFF	; 255
    6e26:	0e c0       	rjmp	.+28     	; 0x6e44 <__fixsfsi+0x9c>
    6e28:	20 e0       	ldi	r18, 0x00	; 0
    6e2a:	30 e0       	ldi	r19, 0x00	; 0
    6e2c:	40 e0       	ldi	r20, 0x00	; 0
    6e2e:	50 e0       	ldi	r21, 0x00	; 0
    6e30:	09 c0       	rjmp	.+18     	; 0x6e44 <__fixsfsi+0x9c>
    6e32:	2f ef       	ldi	r18, 0xFF	; 255
    6e34:	3f ef       	ldi	r19, 0xFF	; 255
    6e36:	4f ef       	ldi	r20, 0xFF	; 255
    6e38:	5f e7       	ldi	r21, 0x7F	; 127
    6e3a:	04 c0       	rjmp	.+8      	; 0x6e44 <__fixsfsi+0x9c>
    6e3c:	20 e0       	ldi	r18, 0x00	; 0
    6e3e:	30 e0       	ldi	r19, 0x00	; 0
    6e40:	40 e0       	ldi	r20, 0x00	; 0
    6e42:	50 e8       	ldi	r21, 0x80	; 128
    6e44:	b9 01       	movw	r22, r18
    6e46:	ca 01       	movw	r24, r20
    6e48:	2c 96       	adiw	r28, 0x0c	; 12
    6e4a:	e2 e0       	ldi	r30, 0x02	; 2
    6e4c:	0c 94 d6 39 	jmp	0x73ac	; 0x73ac <__epilogue_restores__+0x20>

00006e50 <__floatunsisf>:
    6e50:	a8 e0       	ldi	r26, 0x08	; 8
    6e52:	b0 e0       	ldi	r27, 0x00	; 0
    6e54:	ee e2       	ldi	r30, 0x2E	; 46
    6e56:	f7 e3       	ldi	r31, 0x37	; 55
    6e58:	0c 94 b2 39 	jmp	0x7364	; 0x7364 <__prologue_saves__+0x10>
    6e5c:	7b 01       	movw	r14, r22
    6e5e:	8c 01       	movw	r16, r24
    6e60:	61 15       	cp	r22, r1
    6e62:	71 05       	cpc	r23, r1
    6e64:	81 05       	cpc	r24, r1
    6e66:	91 05       	cpc	r25, r1
    6e68:	19 f4       	brne	.+6      	; 0x6e70 <__floatunsisf+0x20>
    6e6a:	82 e0       	ldi	r24, 0x02	; 2
    6e6c:	89 83       	std	Y+1, r24	; 0x01
    6e6e:	60 c0       	rjmp	.+192    	; 0x6f30 <__floatunsisf+0xe0>
    6e70:	83 e0       	ldi	r24, 0x03	; 3
    6e72:	89 83       	std	Y+1, r24	; 0x01
    6e74:	8e e1       	ldi	r24, 0x1E	; 30
    6e76:	c8 2e       	mov	r12, r24
    6e78:	d1 2c       	mov	r13, r1
    6e7a:	dc 82       	std	Y+4, r13	; 0x04
    6e7c:	cb 82       	std	Y+3, r12	; 0x03
    6e7e:	ed 82       	std	Y+5, r14	; 0x05
    6e80:	fe 82       	std	Y+6, r15	; 0x06
    6e82:	0f 83       	std	Y+7, r16	; 0x07
    6e84:	18 87       	std	Y+8, r17	; 0x08
    6e86:	c8 01       	movw	r24, r16
    6e88:	b7 01       	movw	r22, r14
    6e8a:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <__clzsi2>
    6e8e:	fc 01       	movw	r30, r24
    6e90:	31 97       	sbiw	r30, 0x01	; 1
    6e92:	f7 ff       	sbrs	r31, 7
    6e94:	3b c0       	rjmp	.+118    	; 0x6f0c <__floatunsisf+0xbc>
    6e96:	22 27       	eor	r18, r18
    6e98:	33 27       	eor	r19, r19
    6e9a:	2e 1b       	sub	r18, r30
    6e9c:	3f 0b       	sbc	r19, r31
    6e9e:	57 01       	movw	r10, r14
    6ea0:	68 01       	movw	r12, r16
    6ea2:	02 2e       	mov	r0, r18
    6ea4:	04 c0       	rjmp	.+8      	; 0x6eae <__floatunsisf+0x5e>
    6ea6:	d6 94       	lsr	r13
    6ea8:	c7 94       	ror	r12
    6eaa:	b7 94       	ror	r11
    6eac:	a7 94       	ror	r10
    6eae:	0a 94       	dec	r0
    6eb0:	d2 f7       	brpl	.-12     	; 0x6ea6 <__floatunsisf+0x56>
    6eb2:	40 e0       	ldi	r20, 0x00	; 0
    6eb4:	50 e0       	ldi	r21, 0x00	; 0
    6eb6:	60 e0       	ldi	r22, 0x00	; 0
    6eb8:	70 e0       	ldi	r23, 0x00	; 0
    6eba:	81 e0       	ldi	r24, 0x01	; 1
    6ebc:	90 e0       	ldi	r25, 0x00	; 0
    6ebe:	a0 e0       	ldi	r26, 0x00	; 0
    6ec0:	b0 e0       	ldi	r27, 0x00	; 0
    6ec2:	04 c0       	rjmp	.+8      	; 0x6ecc <__floatunsisf+0x7c>
    6ec4:	88 0f       	add	r24, r24
    6ec6:	99 1f       	adc	r25, r25
    6ec8:	aa 1f       	adc	r26, r26
    6eca:	bb 1f       	adc	r27, r27
    6ecc:	2a 95       	dec	r18
    6ece:	d2 f7       	brpl	.-12     	; 0x6ec4 <__floatunsisf+0x74>
    6ed0:	01 97       	sbiw	r24, 0x01	; 1
    6ed2:	a1 09       	sbc	r26, r1
    6ed4:	b1 09       	sbc	r27, r1
    6ed6:	8e 21       	and	r24, r14
    6ed8:	9f 21       	and	r25, r15
    6eda:	a0 23       	and	r26, r16
    6edc:	b1 23       	and	r27, r17
    6ede:	00 97       	sbiw	r24, 0x00	; 0
    6ee0:	a1 05       	cpc	r26, r1
    6ee2:	b1 05       	cpc	r27, r1
    6ee4:	21 f0       	breq	.+8      	; 0x6eee <__floatunsisf+0x9e>
    6ee6:	41 e0       	ldi	r20, 0x01	; 1
    6ee8:	50 e0       	ldi	r21, 0x00	; 0
    6eea:	60 e0       	ldi	r22, 0x00	; 0
    6eec:	70 e0       	ldi	r23, 0x00	; 0
    6eee:	4a 29       	or	r20, r10
    6ef0:	5b 29       	or	r21, r11
    6ef2:	6c 29       	or	r22, r12
    6ef4:	7d 29       	or	r23, r13
    6ef6:	4d 83       	std	Y+5, r20	; 0x05
    6ef8:	5e 83       	std	Y+6, r21	; 0x06
    6efa:	6f 83       	std	Y+7, r22	; 0x07
    6efc:	78 87       	std	Y+8, r23	; 0x08
    6efe:	8e e1       	ldi	r24, 0x1E	; 30
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	8e 1b       	sub	r24, r30
    6f04:	9f 0b       	sbc	r25, r31
    6f06:	9c 83       	std	Y+4, r25	; 0x04
    6f08:	8b 83       	std	Y+3, r24	; 0x03
    6f0a:	12 c0       	rjmp	.+36     	; 0x6f30 <__floatunsisf+0xe0>
    6f0c:	30 97       	sbiw	r30, 0x00	; 0
    6f0e:	81 f0       	breq	.+32     	; 0x6f30 <__floatunsisf+0xe0>
    6f10:	0e 2e       	mov	r0, r30
    6f12:	04 c0       	rjmp	.+8      	; 0x6f1c <__floatunsisf+0xcc>
    6f14:	ee 0c       	add	r14, r14
    6f16:	ff 1c       	adc	r15, r15
    6f18:	00 1f       	adc	r16, r16
    6f1a:	11 1f       	adc	r17, r17
    6f1c:	0a 94       	dec	r0
    6f1e:	d2 f7       	brpl	.-12     	; 0x6f14 <__floatunsisf+0xc4>
    6f20:	ed 82       	std	Y+5, r14	; 0x05
    6f22:	fe 82       	std	Y+6, r15	; 0x06
    6f24:	0f 83       	std	Y+7, r16	; 0x07
    6f26:	18 87       	std	Y+8, r17	; 0x08
    6f28:	ce 1a       	sub	r12, r30
    6f2a:	df 0a       	sbc	r13, r31
    6f2c:	dc 82       	std	Y+4, r13	; 0x04
    6f2e:	cb 82       	std	Y+3, r12	; 0x03
    6f30:	1a 82       	std	Y+2, r1	; 0x02
    6f32:	ce 01       	movw	r24, r28
    6f34:	01 96       	adiw	r24, 0x01	; 1
    6f36:	0e 94 f0 37 	call	0x6fe0	; 0x6fe0 <__pack_f>
    6f3a:	28 96       	adiw	r28, 0x08	; 8
    6f3c:	ea e0       	ldi	r30, 0x0A	; 10
    6f3e:	0c 94 ce 39 	jmp	0x739c	; 0x739c <__epilogue_restores__+0x10>

00006f42 <__clzsi2>:
    6f42:	ef 92       	push	r14
    6f44:	ff 92       	push	r15
    6f46:	0f 93       	push	r16
    6f48:	1f 93       	push	r17
    6f4a:	7b 01       	movw	r14, r22
    6f4c:	8c 01       	movw	r16, r24
    6f4e:	80 e0       	ldi	r24, 0x00	; 0
    6f50:	e8 16       	cp	r14, r24
    6f52:	80 e0       	ldi	r24, 0x00	; 0
    6f54:	f8 06       	cpc	r15, r24
    6f56:	81 e0       	ldi	r24, 0x01	; 1
    6f58:	08 07       	cpc	r16, r24
    6f5a:	80 e0       	ldi	r24, 0x00	; 0
    6f5c:	18 07       	cpc	r17, r24
    6f5e:	88 f4       	brcc	.+34     	; 0x6f82 <__clzsi2+0x40>
    6f60:	8f ef       	ldi	r24, 0xFF	; 255
    6f62:	e8 16       	cp	r14, r24
    6f64:	f1 04       	cpc	r15, r1
    6f66:	01 05       	cpc	r16, r1
    6f68:	11 05       	cpc	r17, r1
    6f6a:	31 f0       	breq	.+12     	; 0x6f78 <__clzsi2+0x36>
    6f6c:	28 f0       	brcs	.+10     	; 0x6f78 <__clzsi2+0x36>
    6f6e:	88 e0       	ldi	r24, 0x08	; 8
    6f70:	90 e0       	ldi	r25, 0x00	; 0
    6f72:	a0 e0       	ldi	r26, 0x00	; 0
    6f74:	b0 e0       	ldi	r27, 0x00	; 0
    6f76:	17 c0       	rjmp	.+46     	; 0x6fa6 <__clzsi2+0x64>
    6f78:	80 e0       	ldi	r24, 0x00	; 0
    6f7a:	90 e0       	ldi	r25, 0x00	; 0
    6f7c:	a0 e0       	ldi	r26, 0x00	; 0
    6f7e:	b0 e0       	ldi	r27, 0x00	; 0
    6f80:	12 c0       	rjmp	.+36     	; 0x6fa6 <__clzsi2+0x64>
    6f82:	80 e0       	ldi	r24, 0x00	; 0
    6f84:	e8 16       	cp	r14, r24
    6f86:	80 e0       	ldi	r24, 0x00	; 0
    6f88:	f8 06       	cpc	r15, r24
    6f8a:	80 e0       	ldi	r24, 0x00	; 0
    6f8c:	08 07       	cpc	r16, r24
    6f8e:	81 e0       	ldi	r24, 0x01	; 1
    6f90:	18 07       	cpc	r17, r24
    6f92:	28 f0       	brcs	.+10     	; 0x6f9e <__clzsi2+0x5c>
    6f94:	88 e1       	ldi	r24, 0x18	; 24
    6f96:	90 e0       	ldi	r25, 0x00	; 0
    6f98:	a0 e0       	ldi	r26, 0x00	; 0
    6f9a:	b0 e0       	ldi	r27, 0x00	; 0
    6f9c:	04 c0       	rjmp	.+8      	; 0x6fa6 <__clzsi2+0x64>
    6f9e:	80 e1       	ldi	r24, 0x10	; 16
    6fa0:	90 e0       	ldi	r25, 0x00	; 0
    6fa2:	a0 e0       	ldi	r26, 0x00	; 0
    6fa4:	b0 e0       	ldi	r27, 0x00	; 0
    6fa6:	20 e2       	ldi	r18, 0x20	; 32
    6fa8:	30 e0       	ldi	r19, 0x00	; 0
    6faa:	40 e0       	ldi	r20, 0x00	; 0
    6fac:	50 e0       	ldi	r21, 0x00	; 0
    6fae:	28 1b       	sub	r18, r24
    6fb0:	39 0b       	sbc	r19, r25
    6fb2:	4a 0b       	sbc	r20, r26
    6fb4:	5b 0b       	sbc	r21, r27
    6fb6:	04 c0       	rjmp	.+8      	; 0x6fc0 <__clzsi2+0x7e>
    6fb8:	16 95       	lsr	r17
    6fba:	07 95       	ror	r16
    6fbc:	f7 94       	ror	r15
    6fbe:	e7 94       	ror	r14
    6fc0:	8a 95       	dec	r24
    6fc2:	d2 f7       	brpl	.-12     	; 0x6fb8 <__clzsi2+0x76>
    6fc4:	f7 01       	movw	r30, r14
    6fc6:	e4 5c       	subi	r30, 0xC4	; 196
    6fc8:	fd 4f       	sbci	r31, 0xFD	; 253
    6fca:	80 81       	ld	r24, Z
    6fcc:	28 1b       	sub	r18, r24
    6fce:	31 09       	sbc	r19, r1
    6fd0:	41 09       	sbc	r20, r1
    6fd2:	51 09       	sbc	r21, r1
    6fd4:	c9 01       	movw	r24, r18
    6fd6:	1f 91       	pop	r17
    6fd8:	0f 91       	pop	r16
    6fda:	ff 90       	pop	r15
    6fdc:	ef 90       	pop	r14
    6fde:	08 95       	ret

00006fe0 <__pack_f>:
    6fe0:	df 92       	push	r13
    6fe2:	ef 92       	push	r14
    6fe4:	ff 92       	push	r15
    6fe6:	0f 93       	push	r16
    6fe8:	1f 93       	push	r17
    6fea:	fc 01       	movw	r30, r24
    6fec:	e4 80       	ldd	r14, Z+4	; 0x04
    6fee:	f5 80       	ldd	r15, Z+5	; 0x05
    6ff0:	06 81       	ldd	r16, Z+6	; 0x06
    6ff2:	17 81       	ldd	r17, Z+7	; 0x07
    6ff4:	d1 80       	ldd	r13, Z+1	; 0x01
    6ff6:	80 81       	ld	r24, Z
    6ff8:	82 30       	cpi	r24, 0x02	; 2
    6ffa:	48 f4       	brcc	.+18     	; 0x700e <__pack_f+0x2e>
    6ffc:	80 e0       	ldi	r24, 0x00	; 0
    6ffe:	90 e0       	ldi	r25, 0x00	; 0
    7000:	a0 e1       	ldi	r26, 0x10	; 16
    7002:	b0 e0       	ldi	r27, 0x00	; 0
    7004:	e8 2a       	or	r14, r24
    7006:	f9 2a       	or	r15, r25
    7008:	0a 2b       	or	r16, r26
    700a:	1b 2b       	or	r17, r27
    700c:	a5 c0       	rjmp	.+330    	; 0x7158 <__pack_f+0x178>
    700e:	84 30       	cpi	r24, 0x04	; 4
    7010:	09 f4       	brne	.+2      	; 0x7014 <__pack_f+0x34>
    7012:	9f c0       	rjmp	.+318    	; 0x7152 <__pack_f+0x172>
    7014:	82 30       	cpi	r24, 0x02	; 2
    7016:	21 f4       	brne	.+8      	; 0x7020 <__pack_f+0x40>
    7018:	ee 24       	eor	r14, r14
    701a:	ff 24       	eor	r15, r15
    701c:	87 01       	movw	r16, r14
    701e:	05 c0       	rjmp	.+10     	; 0x702a <__pack_f+0x4a>
    7020:	e1 14       	cp	r14, r1
    7022:	f1 04       	cpc	r15, r1
    7024:	01 05       	cpc	r16, r1
    7026:	11 05       	cpc	r17, r1
    7028:	19 f4       	brne	.+6      	; 0x7030 <__pack_f+0x50>
    702a:	e0 e0       	ldi	r30, 0x00	; 0
    702c:	f0 e0       	ldi	r31, 0x00	; 0
    702e:	96 c0       	rjmp	.+300    	; 0x715c <__pack_f+0x17c>
    7030:	62 81       	ldd	r22, Z+2	; 0x02
    7032:	73 81       	ldd	r23, Z+3	; 0x03
    7034:	9f ef       	ldi	r25, 0xFF	; 255
    7036:	62 38       	cpi	r22, 0x82	; 130
    7038:	79 07       	cpc	r23, r25
    703a:	0c f0       	brlt	.+2      	; 0x703e <__pack_f+0x5e>
    703c:	5b c0       	rjmp	.+182    	; 0x70f4 <__pack_f+0x114>
    703e:	22 e8       	ldi	r18, 0x82	; 130
    7040:	3f ef       	ldi	r19, 0xFF	; 255
    7042:	26 1b       	sub	r18, r22
    7044:	37 0b       	sbc	r19, r23
    7046:	2a 31       	cpi	r18, 0x1A	; 26
    7048:	31 05       	cpc	r19, r1
    704a:	2c f0       	brlt	.+10     	; 0x7056 <__pack_f+0x76>
    704c:	20 e0       	ldi	r18, 0x00	; 0
    704e:	30 e0       	ldi	r19, 0x00	; 0
    7050:	40 e0       	ldi	r20, 0x00	; 0
    7052:	50 e0       	ldi	r21, 0x00	; 0
    7054:	2a c0       	rjmp	.+84     	; 0x70aa <__pack_f+0xca>
    7056:	b8 01       	movw	r22, r16
    7058:	a7 01       	movw	r20, r14
    705a:	02 2e       	mov	r0, r18
    705c:	04 c0       	rjmp	.+8      	; 0x7066 <__pack_f+0x86>
    705e:	76 95       	lsr	r23
    7060:	67 95       	ror	r22
    7062:	57 95       	ror	r21
    7064:	47 95       	ror	r20
    7066:	0a 94       	dec	r0
    7068:	d2 f7       	brpl	.-12     	; 0x705e <__pack_f+0x7e>
    706a:	81 e0       	ldi	r24, 0x01	; 1
    706c:	90 e0       	ldi	r25, 0x00	; 0
    706e:	a0 e0       	ldi	r26, 0x00	; 0
    7070:	b0 e0       	ldi	r27, 0x00	; 0
    7072:	04 c0       	rjmp	.+8      	; 0x707c <__pack_f+0x9c>
    7074:	88 0f       	add	r24, r24
    7076:	99 1f       	adc	r25, r25
    7078:	aa 1f       	adc	r26, r26
    707a:	bb 1f       	adc	r27, r27
    707c:	2a 95       	dec	r18
    707e:	d2 f7       	brpl	.-12     	; 0x7074 <__pack_f+0x94>
    7080:	01 97       	sbiw	r24, 0x01	; 1
    7082:	a1 09       	sbc	r26, r1
    7084:	b1 09       	sbc	r27, r1
    7086:	8e 21       	and	r24, r14
    7088:	9f 21       	and	r25, r15
    708a:	a0 23       	and	r26, r16
    708c:	b1 23       	and	r27, r17
    708e:	00 97       	sbiw	r24, 0x00	; 0
    7090:	a1 05       	cpc	r26, r1
    7092:	b1 05       	cpc	r27, r1
    7094:	21 f0       	breq	.+8      	; 0x709e <__pack_f+0xbe>
    7096:	81 e0       	ldi	r24, 0x01	; 1
    7098:	90 e0       	ldi	r25, 0x00	; 0
    709a:	a0 e0       	ldi	r26, 0x00	; 0
    709c:	b0 e0       	ldi	r27, 0x00	; 0
    709e:	9a 01       	movw	r18, r20
    70a0:	ab 01       	movw	r20, r22
    70a2:	28 2b       	or	r18, r24
    70a4:	39 2b       	or	r19, r25
    70a6:	4a 2b       	or	r20, r26
    70a8:	5b 2b       	or	r21, r27
    70aa:	da 01       	movw	r26, r20
    70ac:	c9 01       	movw	r24, r18
    70ae:	8f 77       	andi	r24, 0x7F	; 127
    70b0:	90 70       	andi	r25, 0x00	; 0
    70b2:	a0 70       	andi	r26, 0x00	; 0
    70b4:	b0 70       	andi	r27, 0x00	; 0
    70b6:	80 34       	cpi	r24, 0x40	; 64
    70b8:	91 05       	cpc	r25, r1
    70ba:	a1 05       	cpc	r26, r1
    70bc:	b1 05       	cpc	r27, r1
    70be:	39 f4       	brne	.+14     	; 0x70ce <__pack_f+0xee>
    70c0:	27 ff       	sbrs	r18, 7
    70c2:	09 c0       	rjmp	.+18     	; 0x70d6 <__pack_f+0xf6>
    70c4:	20 5c       	subi	r18, 0xC0	; 192
    70c6:	3f 4f       	sbci	r19, 0xFF	; 255
    70c8:	4f 4f       	sbci	r20, 0xFF	; 255
    70ca:	5f 4f       	sbci	r21, 0xFF	; 255
    70cc:	04 c0       	rjmp	.+8      	; 0x70d6 <__pack_f+0xf6>
    70ce:	21 5c       	subi	r18, 0xC1	; 193
    70d0:	3f 4f       	sbci	r19, 0xFF	; 255
    70d2:	4f 4f       	sbci	r20, 0xFF	; 255
    70d4:	5f 4f       	sbci	r21, 0xFF	; 255
    70d6:	e0 e0       	ldi	r30, 0x00	; 0
    70d8:	f0 e0       	ldi	r31, 0x00	; 0
    70da:	20 30       	cpi	r18, 0x00	; 0
    70dc:	a0 e0       	ldi	r26, 0x00	; 0
    70de:	3a 07       	cpc	r19, r26
    70e0:	a0 e0       	ldi	r26, 0x00	; 0
    70e2:	4a 07       	cpc	r20, r26
    70e4:	a0 e4       	ldi	r26, 0x40	; 64
    70e6:	5a 07       	cpc	r21, r26
    70e8:	10 f0       	brcs	.+4      	; 0x70ee <__pack_f+0x10e>
    70ea:	e1 e0       	ldi	r30, 0x01	; 1
    70ec:	f0 e0       	ldi	r31, 0x00	; 0
    70ee:	79 01       	movw	r14, r18
    70f0:	8a 01       	movw	r16, r20
    70f2:	27 c0       	rjmp	.+78     	; 0x7142 <__pack_f+0x162>
    70f4:	60 38       	cpi	r22, 0x80	; 128
    70f6:	71 05       	cpc	r23, r1
    70f8:	64 f5       	brge	.+88     	; 0x7152 <__pack_f+0x172>
    70fa:	fb 01       	movw	r30, r22
    70fc:	e1 58       	subi	r30, 0x81	; 129
    70fe:	ff 4f       	sbci	r31, 0xFF	; 255
    7100:	d8 01       	movw	r26, r16
    7102:	c7 01       	movw	r24, r14
    7104:	8f 77       	andi	r24, 0x7F	; 127
    7106:	90 70       	andi	r25, 0x00	; 0
    7108:	a0 70       	andi	r26, 0x00	; 0
    710a:	b0 70       	andi	r27, 0x00	; 0
    710c:	80 34       	cpi	r24, 0x40	; 64
    710e:	91 05       	cpc	r25, r1
    7110:	a1 05       	cpc	r26, r1
    7112:	b1 05       	cpc	r27, r1
    7114:	39 f4       	brne	.+14     	; 0x7124 <__pack_f+0x144>
    7116:	e7 fe       	sbrs	r14, 7
    7118:	0d c0       	rjmp	.+26     	; 0x7134 <__pack_f+0x154>
    711a:	80 e4       	ldi	r24, 0x40	; 64
    711c:	90 e0       	ldi	r25, 0x00	; 0
    711e:	a0 e0       	ldi	r26, 0x00	; 0
    7120:	b0 e0       	ldi	r27, 0x00	; 0
    7122:	04 c0       	rjmp	.+8      	; 0x712c <__pack_f+0x14c>
    7124:	8f e3       	ldi	r24, 0x3F	; 63
    7126:	90 e0       	ldi	r25, 0x00	; 0
    7128:	a0 e0       	ldi	r26, 0x00	; 0
    712a:	b0 e0       	ldi	r27, 0x00	; 0
    712c:	e8 0e       	add	r14, r24
    712e:	f9 1e       	adc	r15, r25
    7130:	0a 1f       	adc	r16, r26
    7132:	1b 1f       	adc	r17, r27
    7134:	17 ff       	sbrs	r17, 7
    7136:	05 c0       	rjmp	.+10     	; 0x7142 <__pack_f+0x162>
    7138:	16 95       	lsr	r17
    713a:	07 95       	ror	r16
    713c:	f7 94       	ror	r15
    713e:	e7 94       	ror	r14
    7140:	31 96       	adiw	r30, 0x01	; 1
    7142:	87 e0       	ldi	r24, 0x07	; 7
    7144:	16 95       	lsr	r17
    7146:	07 95       	ror	r16
    7148:	f7 94       	ror	r15
    714a:	e7 94       	ror	r14
    714c:	8a 95       	dec	r24
    714e:	d1 f7       	brne	.-12     	; 0x7144 <__pack_f+0x164>
    7150:	05 c0       	rjmp	.+10     	; 0x715c <__pack_f+0x17c>
    7152:	ee 24       	eor	r14, r14
    7154:	ff 24       	eor	r15, r15
    7156:	87 01       	movw	r16, r14
    7158:	ef ef       	ldi	r30, 0xFF	; 255
    715a:	f0 e0       	ldi	r31, 0x00	; 0
    715c:	6e 2f       	mov	r22, r30
    715e:	67 95       	ror	r22
    7160:	66 27       	eor	r22, r22
    7162:	67 95       	ror	r22
    7164:	90 2f       	mov	r25, r16
    7166:	9f 77       	andi	r25, 0x7F	; 127
    7168:	d7 94       	ror	r13
    716a:	dd 24       	eor	r13, r13
    716c:	d7 94       	ror	r13
    716e:	8e 2f       	mov	r24, r30
    7170:	86 95       	lsr	r24
    7172:	49 2f       	mov	r20, r25
    7174:	46 2b       	or	r20, r22
    7176:	58 2f       	mov	r21, r24
    7178:	5d 29       	or	r21, r13
    717a:	b7 01       	movw	r22, r14
    717c:	ca 01       	movw	r24, r20
    717e:	1f 91       	pop	r17
    7180:	0f 91       	pop	r16
    7182:	ff 90       	pop	r15
    7184:	ef 90       	pop	r14
    7186:	df 90       	pop	r13
    7188:	08 95       	ret

0000718a <__unpack_f>:
    718a:	fc 01       	movw	r30, r24
    718c:	db 01       	movw	r26, r22
    718e:	40 81       	ld	r20, Z
    7190:	51 81       	ldd	r21, Z+1	; 0x01
    7192:	22 81       	ldd	r18, Z+2	; 0x02
    7194:	62 2f       	mov	r22, r18
    7196:	6f 77       	andi	r22, 0x7F	; 127
    7198:	70 e0       	ldi	r23, 0x00	; 0
    719a:	22 1f       	adc	r18, r18
    719c:	22 27       	eor	r18, r18
    719e:	22 1f       	adc	r18, r18
    71a0:	93 81       	ldd	r25, Z+3	; 0x03
    71a2:	89 2f       	mov	r24, r25
    71a4:	88 0f       	add	r24, r24
    71a6:	82 2b       	or	r24, r18
    71a8:	28 2f       	mov	r18, r24
    71aa:	30 e0       	ldi	r19, 0x00	; 0
    71ac:	99 1f       	adc	r25, r25
    71ae:	99 27       	eor	r25, r25
    71b0:	99 1f       	adc	r25, r25
    71b2:	11 96       	adiw	r26, 0x01	; 1
    71b4:	9c 93       	st	X, r25
    71b6:	11 97       	sbiw	r26, 0x01	; 1
    71b8:	21 15       	cp	r18, r1
    71ba:	31 05       	cpc	r19, r1
    71bc:	a9 f5       	brne	.+106    	; 0x7228 <__unpack_f+0x9e>
    71be:	41 15       	cp	r20, r1
    71c0:	51 05       	cpc	r21, r1
    71c2:	61 05       	cpc	r22, r1
    71c4:	71 05       	cpc	r23, r1
    71c6:	11 f4       	brne	.+4      	; 0x71cc <__unpack_f+0x42>
    71c8:	82 e0       	ldi	r24, 0x02	; 2
    71ca:	37 c0       	rjmp	.+110    	; 0x723a <__unpack_f+0xb0>
    71cc:	82 e8       	ldi	r24, 0x82	; 130
    71ce:	9f ef       	ldi	r25, 0xFF	; 255
    71d0:	13 96       	adiw	r26, 0x03	; 3
    71d2:	9c 93       	st	X, r25
    71d4:	8e 93       	st	-X, r24
    71d6:	12 97       	sbiw	r26, 0x02	; 2
    71d8:	9a 01       	movw	r18, r20
    71da:	ab 01       	movw	r20, r22
    71dc:	67 e0       	ldi	r22, 0x07	; 7
    71de:	22 0f       	add	r18, r18
    71e0:	33 1f       	adc	r19, r19
    71e2:	44 1f       	adc	r20, r20
    71e4:	55 1f       	adc	r21, r21
    71e6:	6a 95       	dec	r22
    71e8:	d1 f7       	brne	.-12     	; 0x71de <__unpack_f+0x54>
    71ea:	83 e0       	ldi	r24, 0x03	; 3
    71ec:	8c 93       	st	X, r24
    71ee:	0d c0       	rjmp	.+26     	; 0x720a <__unpack_f+0x80>
    71f0:	22 0f       	add	r18, r18
    71f2:	33 1f       	adc	r19, r19
    71f4:	44 1f       	adc	r20, r20
    71f6:	55 1f       	adc	r21, r21
    71f8:	12 96       	adiw	r26, 0x02	; 2
    71fa:	8d 91       	ld	r24, X+
    71fc:	9c 91       	ld	r25, X
    71fe:	13 97       	sbiw	r26, 0x03	; 3
    7200:	01 97       	sbiw	r24, 0x01	; 1
    7202:	13 96       	adiw	r26, 0x03	; 3
    7204:	9c 93       	st	X, r25
    7206:	8e 93       	st	-X, r24
    7208:	12 97       	sbiw	r26, 0x02	; 2
    720a:	20 30       	cpi	r18, 0x00	; 0
    720c:	80 e0       	ldi	r24, 0x00	; 0
    720e:	38 07       	cpc	r19, r24
    7210:	80 e0       	ldi	r24, 0x00	; 0
    7212:	48 07       	cpc	r20, r24
    7214:	80 e4       	ldi	r24, 0x40	; 64
    7216:	58 07       	cpc	r21, r24
    7218:	58 f3       	brcs	.-42     	; 0x71f0 <__unpack_f+0x66>
    721a:	14 96       	adiw	r26, 0x04	; 4
    721c:	2d 93       	st	X+, r18
    721e:	3d 93       	st	X+, r19
    7220:	4d 93       	st	X+, r20
    7222:	5c 93       	st	X, r21
    7224:	17 97       	sbiw	r26, 0x07	; 7
    7226:	08 95       	ret
    7228:	2f 3f       	cpi	r18, 0xFF	; 255
    722a:	31 05       	cpc	r19, r1
    722c:	79 f4       	brne	.+30     	; 0x724c <__unpack_f+0xc2>
    722e:	41 15       	cp	r20, r1
    7230:	51 05       	cpc	r21, r1
    7232:	61 05       	cpc	r22, r1
    7234:	71 05       	cpc	r23, r1
    7236:	19 f4       	brne	.+6      	; 0x723e <__unpack_f+0xb4>
    7238:	84 e0       	ldi	r24, 0x04	; 4
    723a:	8c 93       	st	X, r24
    723c:	08 95       	ret
    723e:	64 ff       	sbrs	r22, 4
    7240:	03 c0       	rjmp	.+6      	; 0x7248 <__unpack_f+0xbe>
    7242:	81 e0       	ldi	r24, 0x01	; 1
    7244:	8c 93       	st	X, r24
    7246:	12 c0       	rjmp	.+36     	; 0x726c <__unpack_f+0xe2>
    7248:	1c 92       	st	X, r1
    724a:	10 c0       	rjmp	.+32     	; 0x726c <__unpack_f+0xe2>
    724c:	2f 57       	subi	r18, 0x7F	; 127
    724e:	30 40       	sbci	r19, 0x00	; 0
    7250:	13 96       	adiw	r26, 0x03	; 3
    7252:	3c 93       	st	X, r19
    7254:	2e 93       	st	-X, r18
    7256:	12 97       	sbiw	r26, 0x02	; 2
    7258:	83 e0       	ldi	r24, 0x03	; 3
    725a:	8c 93       	st	X, r24
    725c:	87 e0       	ldi	r24, 0x07	; 7
    725e:	44 0f       	add	r20, r20
    7260:	55 1f       	adc	r21, r21
    7262:	66 1f       	adc	r22, r22
    7264:	77 1f       	adc	r23, r23
    7266:	8a 95       	dec	r24
    7268:	d1 f7       	brne	.-12     	; 0x725e <__unpack_f+0xd4>
    726a:	70 64       	ori	r23, 0x40	; 64
    726c:	14 96       	adiw	r26, 0x04	; 4
    726e:	4d 93       	st	X+, r20
    7270:	5d 93       	st	X+, r21
    7272:	6d 93       	st	X+, r22
    7274:	7c 93       	st	X, r23
    7276:	17 97       	sbiw	r26, 0x07	; 7
    7278:	08 95       	ret

0000727a <__fpcmp_parts_f>:
    727a:	1f 93       	push	r17
    727c:	dc 01       	movw	r26, r24
    727e:	fb 01       	movw	r30, r22
    7280:	9c 91       	ld	r25, X
    7282:	92 30       	cpi	r25, 0x02	; 2
    7284:	08 f4       	brcc	.+2      	; 0x7288 <__fpcmp_parts_f+0xe>
    7286:	47 c0       	rjmp	.+142    	; 0x7316 <__fpcmp_parts_f+0x9c>
    7288:	80 81       	ld	r24, Z
    728a:	82 30       	cpi	r24, 0x02	; 2
    728c:	08 f4       	brcc	.+2      	; 0x7290 <__fpcmp_parts_f+0x16>
    728e:	43 c0       	rjmp	.+134    	; 0x7316 <__fpcmp_parts_f+0x9c>
    7290:	94 30       	cpi	r25, 0x04	; 4
    7292:	51 f4       	brne	.+20     	; 0x72a8 <__fpcmp_parts_f+0x2e>
    7294:	11 96       	adiw	r26, 0x01	; 1
    7296:	1c 91       	ld	r17, X
    7298:	84 30       	cpi	r24, 0x04	; 4
    729a:	99 f5       	brne	.+102    	; 0x7302 <__fpcmp_parts_f+0x88>
    729c:	81 81       	ldd	r24, Z+1	; 0x01
    729e:	68 2f       	mov	r22, r24
    72a0:	70 e0       	ldi	r23, 0x00	; 0
    72a2:	61 1b       	sub	r22, r17
    72a4:	71 09       	sbc	r23, r1
    72a6:	3f c0       	rjmp	.+126    	; 0x7326 <__fpcmp_parts_f+0xac>
    72a8:	84 30       	cpi	r24, 0x04	; 4
    72aa:	21 f0       	breq	.+8      	; 0x72b4 <__fpcmp_parts_f+0x3a>
    72ac:	92 30       	cpi	r25, 0x02	; 2
    72ae:	31 f4       	brne	.+12     	; 0x72bc <__fpcmp_parts_f+0x42>
    72b0:	82 30       	cpi	r24, 0x02	; 2
    72b2:	b9 f1       	breq	.+110    	; 0x7322 <__fpcmp_parts_f+0xa8>
    72b4:	81 81       	ldd	r24, Z+1	; 0x01
    72b6:	88 23       	and	r24, r24
    72b8:	89 f1       	breq	.+98     	; 0x731c <__fpcmp_parts_f+0xa2>
    72ba:	2d c0       	rjmp	.+90     	; 0x7316 <__fpcmp_parts_f+0x9c>
    72bc:	11 96       	adiw	r26, 0x01	; 1
    72be:	1c 91       	ld	r17, X
    72c0:	11 97       	sbiw	r26, 0x01	; 1
    72c2:	82 30       	cpi	r24, 0x02	; 2
    72c4:	f1 f0       	breq	.+60     	; 0x7302 <__fpcmp_parts_f+0x88>
    72c6:	81 81       	ldd	r24, Z+1	; 0x01
    72c8:	18 17       	cp	r17, r24
    72ca:	d9 f4       	brne	.+54     	; 0x7302 <__fpcmp_parts_f+0x88>
    72cc:	12 96       	adiw	r26, 0x02	; 2
    72ce:	2d 91       	ld	r18, X+
    72d0:	3c 91       	ld	r19, X
    72d2:	13 97       	sbiw	r26, 0x03	; 3
    72d4:	82 81       	ldd	r24, Z+2	; 0x02
    72d6:	93 81       	ldd	r25, Z+3	; 0x03
    72d8:	82 17       	cp	r24, r18
    72da:	93 07       	cpc	r25, r19
    72dc:	94 f0       	brlt	.+36     	; 0x7302 <__fpcmp_parts_f+0x88>
    72de:	28 17       	cp	r18, r24
    72e0:	39 07       	cpc	r19, r25
    72e2:	bc f0       	brlt	.+46     	; 0x7312 <__fpcmp_parts_f+0x98>
    72e4:	14 96       	adiw	r26, 0x04	; 4
    72e6:	8d 91       	ld	r24, X+
    72e8:	9d 91       	ld	r25, X+
    72ea:	0d 90       	ld	r0, X+
    72ec:	bc 91       	ld	r27, X
    72ee:	a0 2d       	mov	r26, r0
    72f0:	24 81       	ldd	r18, Z+4	; 0x04
    72f2:	35 81       	ldd	r19, Z+5	; 0x05
    72f4:	46 81       	ldd	r20, Z+6	; 0x06
    72f6:	57 81       	ldd	r21, Z+7	; 0x07
    72f8:	28 17       	cp	r18, r24
    72fa:	39 07       	cpc	r19, r25
    72fc:	4a 07       	cpc	r20, r26
    72fe:	5b 07       	cpc	r21, r27
    7300:	18 f4       	brcc	.+6      	; 0x7308 <__fpcmp_parts_f+0x8e>
    7302:	11 23       	and	r17, r17
    7304:	41 f0       	breq	.+16     	; 0x7316 <__fpcmp_parts_f+0x9c>
    7306:	0a c0       	rjmp	.+20     	; 0x731c <__fpcmp_parts_f+0xa2>
    7308:	82 17       	cp	r24, r18
    730a:	93 07       	cpc	r25, r19
    730c:	a4 07       	cpc	r26, r20
    730e:	b5 07       	cpc	r27, r21
    7310:	40 f4       	brcc	.+16     	; 0x7322 <__fpcmp_parts_f+0xa8>
    7312:	11 23       	and	r17, r17
    7314:	19 f0       	breq	.+6      	; 0x731c <__fpcmp_parts_f+0xa2>
    7316:	61 e0       	ldi	r22, 0x01	; 1
    7318:	70 e0       	ldi	r23, 0x00	; 0
    731a:	05 c0       	rjmp	.+10     	; 0x7326 <__fpcmp_parts_f+0xac>
    731c:	6f ef       	ldi	r22, 0xFF	; 255
    731e:	7f ef       	ldi	r23, 0xFF	; 255
    7320:	02 c0       	rjmp	.+4      	; 0x7326 <__fpcmp_parts_f+0xac>
    7322:	60 e0       	ldi	r22, 0x00	; 0
    7324:	70 e0       	ldi	r23, 0x00	; 0
    7326:	cb 01       	movw	r24, r22
    7328:	1f 91       	pop	r17
    732a:	08 95       	ret

0000732c <__udivmodhi4>:
    732c:	aa 1b       	sub	r26, r26
    732e:	bb 1b       	sub	r27, r27
    7330:	51 e1       	ldi	r21, 0x11	; 17
    7332:	07 c0       	rjmp	.+14     	; 0x7342 <__udivmodhi4_ep>

00007334 <__udivmodhi4_loop>:
    7334:	aa 1f       	adc	r26, r26
    7336:	bb 1f       	adc	r27, r27
    7338:	a6 17       	cp	r26, r22
    733a:	b7 07       	cpc	r27, r23
    733c:	10 f0       	brcs	.+4      	; 0x7342 <__udivmodhi4_ep>
    733e:	a6 1b       	sub	r26, r22
    7340:	b7 0b       	sbc	r27, r23

00007342 <__udivmodhi4_ep>:
    7342:	88 1f       	adc	r24, r24
    7344:	99 1f       	adc	r25, r25
    7346:	5a 95       	dec	r21
    7348:	a9 f7       	brne	.-22     	; 0x7334 <__udivmodhi4_loop>
    734a:	80 95       	com	r24
    734c:	90 95       	com	r25
    734e:	bc 01       	movw	r22, r24
    7350:	cd 01       	movw	r24, r26
    7352:	08 95       	ret

00007354 <__prologue_saves__>:
    7354:	2f 92       	push	r2
    7356:	3f 92       	push	r3
    7358:	4f 92       	push	r4
    735a:	5f 92       	push	r5
    735c:	6f 92       	push	r6
    735e:	7f 92       	push	r7
    7360:	8f 92       	push	r8
    7362:	9f 92       	push	r9
    7364:	af 92       	push	r10
    7366:	bf 92       	push	r11
    7368:	cf 92       	push	r12
    736a:	df 92       	push	r13
    736c:	ef 92       	push	r14
    736e:	ff 92       	push	r15
    7370:	0f 93       	push	r16
    7372:	1f 93       	push	r17
    7374:	cf 93       	push	r28
    7376:	df 93       	push	r29
    7378:	cd b7       	in	r28, 0x3d	; 61
    737a:	de b7       	in	r29, 0x3e	; 62
    737c:	ca 1b       	sub	r28, r26
    737e:	db 0b       	sbc	r29, r27
    7380:	0f b6       	in	r0, 0x3f	; 63
    7382:	f8 94       	cli
    7384:	de bf       	out	0x3e, r29	; 62
    7386:	0f be       	out	0x3f, r0	; 63
    7388:	cd bf       	out	0x3d, r28	; 61
    738a:	19 94       	eijmp

0000738c <__epilogue_restores__>:
    738c:	2a 88       	ldd	r2, Y+18	; 0x12
    738e:	39 88       	ldd	r3, Y+17	; 0x11
    7390:	48 88       	ldd	r4, Y+16	; 0x10
    7392:	5f 84       	ldd	r5, Y+15	; 0x0f
    7394:	6e 84       	ldd	r6, Y+14	; 0x0e
    7396:	7d 84       	ldd	r7, Y+13	; 0x0d
    7398:	8c 84       	ldd	r8, Y+12	; 0x0c
    739a:	9b 84       	ldd	r9, Y+11	; 0x0b
    739c:	aa 84       	ldd	r10, Y+10	; 0x0a
    739e:	b9 84       	ldd	r11, Y+9	; 0x09
    73a0:	c8 84       	ldd	r12, Y+8	; 0x08
    73a2:	df 80       	ldd	r13, Y+7	; 0x07
    73a4:	ee 80       	ldd	r14, Y+6	; 0x06
    73a6:	fd 80       	ldd	r15, Y+5	; 0x05
    73a8:	0c 81       	ldd	r16, Y+4	; 0x04
    73aa:	1b 81       	ldd	r17, Y+3	; 0x03
    73ac:	aa 81       	ldd	r26, Y+2	; 0x02
    73ae:	b9 81       	ldd	r27, Y+1	; 0x01
    73b0:	ce 0f       	add	r28, r30
    73b2:	d1 1d       	adc	r29, r1
    73b4:	0f b6       	in	r0, 0x3f	; 63
    73b6:	f8 94       	cli
    73b8:	de bf       	out	0x3e, r29	; 62
    73ba:	0f be       	out	0x3f, r0	; 63
    73bc:	cd bf       	out	0x3d, r28	; 61
    73be:	ed 01       	movw	r28, r26
    73c0:	08 95       	ret

000073c2 <_exit>:
    73c2:	f8 94       	cli

000073c4 <__stop_program>:
    73c4:	ff cf       	rjmp	.-2      	; 0x73c4 <__stop_program>
